-- Generated by CSharp.lua Compiler
local System = System
local DCET = DCET
local DCETRuntime = DCETRuntime
local UnityEngine = UnityEngine
local HashSetString = System.HashSet(System.String)
local DictStringAnimationClip = System.Dictionary(System.String, UnityEngine.AnimationClip)
local DCET
System.import(function (out)
  DCET = out.DCET
end)
System.namespace("DCET", function (namespace)
  namespace.class("AnimatorComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.DCET.AwakeSystem_1(out.DCET.AnimatorComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("AnimatorComponentUpdateSystem", function (namespace)
    local Update
    Update = function (this, self)
      self:Update()
    end
    return {
      base = function (out)
        return {
          out.DCET.UpdateSystem_1(out.DCET.AnimatorComponent)
        }
      end,
      Update = Update,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("AnimatorComponent", function (namespace)
    local Awake, Update, HasParameter, PlayInTime, Play, AnimationTime, PauseAnimator, RunAnimator, 
    SetBoolValue, SetFloatValue, SetIntValue, SetTrigger, SetAnimatorSpeed, ResetAnimatorSpeed, Dispose, __ctor__
    __ctor__ = function (this)
      this.animationClips = DictStringAnimationClip()
      this.Parameter = HashSetString()
      this.MotionType = DCET.MotionType.None
      System.base(this).__ctor__(this)
    end
    Awake = function (this)
      local animator = System.as(this:GetParent(DCET.Unit).ViewGO:GetComponent(System.typeof(UnityEngine.Animator)), UnityEngine.Animator)

      if UnityEngine.Object.op_Equality(animator, nil) then
        return
      end

      if UnityEngine.Object.op_Equality(animator:getruntimeAnimatorController(), nil) then
        return
      end

      if animator:getruntimeAnimatorController():getanimationClips() == nil then
        return
      end
      this.Animator = animator
      for _, animationClip in System.each(animator:getruntimeAnimatorController():getanimationClips()) do
        this.animationClips:set(animationClip:getname(), animationClip)
      end
      for _, animatorControllerParameter in System.each(animator:getparameters()) do
        this.Parameter:Add(DCETRuntime.AnimatorHelper.GetName(animatorControllerParameter))
      end
    end
    Update = function (this)
      if this.isStop then
        return
      end

      if this.MotionType == DCET.MotionType.None then
        return
      end

      System.try(function ()
        this.Animator:SetFloat("MotionSpeed", this.MontionSpeed)

        this.Animator:SetTrigger(this.MotionType:EnumToString(DCET.MotionType))

        this.MontionSpeed = 1
        this.MotionType = DCET.MotionType.None
      end, function (default)
        local ex = default
        System.throw(System.Exception("动作播放失败: " .. this.MotionType:EnumToString(DCET.MotionType), ex))
      end)
    end
    HasParameter = function (this, parameter)
      return this.Parameter:Contains(parameter)
    end
    PlayInTime = function (this, motionType, time)
      local animationClip
      local default
      default, animationClip = this.animationClips:TryGetValue(motionType:EnumToString(DCET.MotionType))
      if not default then
        System.throw(System.Exception("找不到该动作: " .. motionType:EnumToString(DCET.MotionType)))
      end

      local motionSpeed = animationClip:getlength() / time
      if motionSpeed < 0.01 or motionSpeed > 1000 then
        DCET.Log.Error("motionSpeed数值异常, " .. motionSpeed .. ", 此动作跳过")
        return
      end
      this.MotionType = motionType
      this.MontionSpeed = motionSpeed
    end
    Play = function (this, motionType, motionSpeed)
      if not HasParameter(this, motionType:EnumToString(DCET.MotionType)) then
        return
      end
      this.MotionType = motionType
      this.MontionSpeed = motionSpeed
    end
    AnimationTime = function (this, motionType)
      local animationClip
      local default
      default, animationClip = this.animationClips:TryGetValue(motionType:EnumToString(DCET.MotionType))
      if not default then
        System.throw(System.Exception("找不到该动作: " .. motionType:EnumToString(DCET.MotionType)))
      end
      return animationClip:getlength()
    end
    PauseAnimator = function (this)
      if this.isStop then
        return
      end
      this.isStop = true

      if UnityEngine.Object.op_Equality(this.Animator, nil) then
        return
      end
      this.stopSpeed = this.Animator:getspeed()
      this.Animator:setspeed(0)
    end
    RunAnimator = function (this)
      if not this.isStop then
        return
      end

      this.isStop = false

      if UnityEngine.Object.op_Equality(this.Animator, nil) then
        return
      end
      this.Animator:setspeed(this.stopSpeed)
    end
    SetBoolValue = function (this, name, state)
      if not HasParameter(this, name) then
        return
      end

      this.Animator:SetBool(name, state)
    end
    SetFloatValue = function (this, name, state)
      if not HasParameter(this, name) then
        return
      end

      this.Animator:SetFloat(name, state)
    end
    SetIntValue = function (this, name, value)
      if not HasParameter(this, name) then
        return
      end

      this.Animator:SetInteger(name, value)
    end
    SetTrigger = function (this, name)
      if not HasParameter(this, name) then
        return
      end

      this.Animator:SetTrigger(name)
    end
    SetAnimatorSpeed = function (this, speed)
      this.stopSpeed = this.Animator:getspeed()
      this.Animator:setspeed(speed)
    end
    ResetAnimatorSpeed = function (this)
      this.Animator:setspeed(this.stopSpeed)
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end
      System.base(this).Dispose(this)

      this.animationClips = nil
      this.Parameter = nil
      this.Animator = nil
    end
    return {
      base = function (out)
        return {
          out.DCET.Entity
        }
      end,
      MontionSpeed = 0,
      isStop = false,
      stopSpeed = 0,
      Awake = Awake,
      Update = Update,
      HasParameter = HasParameter,
      PlayInTime = PlayInTime,
      Play = Play,
      AnimationTime = AnimationTime,
      PauseAnimator = PauseAnimator,
      RunAnimator = RunAnimator,
      SetBoolValue = SetBoolValue,
      SetFloatValue = SetFloatValue,
      SetIntValue = SetIntValue,
      SetTrigger = SetTrigger,
      SetAnimatorSpeed = SetAnimatorSpeed,
      ResetAnimatorSpeed = ResetAnimatorSpeed,
      Dispose = Dispose,
      __ctor__ = __ctor__
    }
  end)
end)
