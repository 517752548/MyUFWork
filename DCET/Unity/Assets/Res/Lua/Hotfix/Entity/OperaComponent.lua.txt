-- Generated by CSharp.lua Compiler
local System = System
local DCET = DCET
local UnityEngine = UnityEngine
local DCET
System.import(function (out)
  DCET = out.DCET
end)
System.namespace("DCET", function (namespace)
  namespace.class("OperaComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.DCET.AwakeSystem_1(out.DCET.OperaComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("OperaComponentUpdateSystem", function (namespace)
    local Update
    Update = function (this, self)
      self:Update()
    end
    return {
      base = function (out)
        return {
          out.DCET.UpdateSystem_1(out.DCET.OperaComponent)
        }
      end,
      Update = Update,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("OperaComponent", function (namespace)
    local Awake, Update, TestActor, __ctor__
    __ctor__ = function (this)
      this.ClickPoint = System.default(UnityEngine.Vector3)
      this.frameClickMap = DCET.Frame_ClickMap()
      System.base(this).__ctor__(this)
    end
    Awake = function (this)
      this.mapMask = UnityEngine.LayerMask.GetMask("Map")
    end
    Update = function (this)
      if UnityEngine.Input.GetMouseButtonDown(1) then
        local ray = UnityEngine.Camera.getmain():ScreenPointToRay(UnityEngine.Input.getmousePosition())
        local hit
        local default
        default, hit = UnityEngine.Physics.Raycast(ray, nil, 1000, this.mapMask)
        if default then
          this.ClickPoint = hit:getpoint()
          this.frameClickMap.X = this.ClickPoint.x
          this.frameClickMap.Y = this.ClickPoint.y
          this.frameClickMap.Z = this.ClickPoint.z
          DCET.SessionComponent.Instance:getSession():Send(this.frameClickMap)

          -- 测试actor rpc消息
          TestActor(this)
        end
      end
    end
    TestActor = function (this)
      System.async(function (async, this)
        System.try(function ()
          local default = DCET.C2M_TestActorRequest()
          default.Info = "actor rpc request"
          local response = System.cast(DCET.M2C_TestActorResponse, async:await(DCET.SessionComponent.Instance:getSession():Call(default)))
          DCET.Log.Info(response.Info)
        end, function (default)
          local e = default
          DCET.Log.Exception(e)
        end)
      end, true, this)
    end
    return {
      base = function (out)
        return {
          out.DCET.Entity
        }
      end,
      mapMask = 0,
      Awake = Awake,
      Update = Update,
      TestActor = TestActor,
      __ctor__ = __ctor__
    }
  end)
end)
