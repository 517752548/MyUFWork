-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local DCET
local DictInt64Player
System.import(function (out)
  DCET = out.DCET
  DictInt64Player = System.Dictionary(System.Int64, DCET.Player)
end)
System.namespace("DCET", function (namespace)
  namespace.class("PlayerComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.DCET.AwakeSystem_1(out.DCET.PlayerComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("PlayerComponent", function (namespace)
    local getMyPlayer, setMyPlayer, Awake, Add, Get, Remove, getCount, GetAll, 
    Dispose, class, __ctor__
    __ctor__ = function (this)
      this.idPlayers = DictInt64Player()
      System.base(this).__ctor__(this)
    end
    getMyPlayer = function (this)
      return this.myPlayer
    end
    setMyPlayer = function (this, value)
      this.myPlayer = value
      this.myPlayer:setParent(this)
    end
    Awake = function (this)
      class.Instance = this
    end
    Add = function (this, player)
      this.idPlayers:AddKeyValue(player.Id, player)
      player:setParent(this)
    end
    Get = function (this, id)
      local player
      local _
      _, player = this.idPlayers:TryGetValue(id)
      return player
    end
    Remove = function (this, id)
      this.idPlayers:RemoveKey(id)
    end
    getCount = function (this)
      return this.idPlayers:getCount()
    end
    GetAll = function (this)
      return Linq.ToArray(this.idPlayers:getValues())
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      System.base(this).Dispose(this)

      for _, player in System.each(this.idPlayers:getValues()) do
        player:Dispose()
      end

      class.Instance = nil
    end
    class = {
      base = function (out)
        return {
          out.DCET.Entity
        }
      end,
      getMyPlayer = getMyPlayer,
      setMyPlayer = setMyPlayer,
      Awake = Awake,
      Add = Add,
      Get = Get,
      Remove = Remove,
      getCount = getCount,
      GetAll = GetAll,
      Dispose = Dispose,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
