-- Generated by CSharp.lua Compiler
local System = System
local DCET = DCET
local DCET
local DictTypeACategory
System.import(function (out)
  DCET = out.DCET
  DictTypeACategory = System.Dictionary(System.Type, DCET.ACategory)
end)
System.namespace("DCET", function (namespace)
  namespace.class("ConfigComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.DCET.AwakeSystem_1(out.DCET.ConfigComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("ConfigComponentLoadSystem", function (namespace)
    local Load
    Load = function (this, self)
      self:Load()
    end
    return {
      base = function (out)
        return {
          out.DCET.LoadSystem_1(out.DCET.ConfigComponent)
        }
      end,
      Load = Load,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  -- <summary>
  -- Config组件会扫描所有的有ConfigAttribute标签的配置,加载进来
  -- </summary>
  namespace.class("ConfigComponent", function (namespace)
    local Awake, Load, GetOne, Get, TryGet, GetAll, GetCategory, __ctor__
    __ctor__ = function (this)
      this.allConfig = DictTypeACategory()
      DCET.Entity.__ctor__(this)
    end
    Awake = function (this)
      Load(this)
    end
    Load = function (this)
      this.allConfig:Clear()
      local types = DCET.Game.getEventSystem():GetTypes(System.typeof(DCET.ConfigAttribute))

      for _, type in System.each(types) do
        local continue
        repeat
          local attrs = type:GetCustomAttributes(System.typeof(DCET.ConfigAttribute), false)
          if #attrs == 0 then
            continue = true
            break
          end

          local configAttribute = System.as(attrs:get(0), DCET.ConfigAttribute)
          -- 只加载指定的配置
          if not DCET.AppTypeHelper.Is(configAttribute.Type, DCET.AppType.ClientM) then
            continue = true
            break
          end

          local obj = System.Activator.CreateInstance(type)

          local iCategory = System.as(obj, DCET.ACategory)
          if iCategory == nil then
            System.throw(System.Exception("class: " .. type:getName() .. " not inherit from ACategory"))
          end
          iCategory:BeginInit()
          iCategory:EndInit()

          this.allConfig:set(iCategory:getConfigType(), iCategory)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    GetOne = function (this, type)
      local configCategory
      local default
      default, configCategory = this.allConfig:TryGetValue(type)
      if not default then
        System.throw(System.Exception("ConfigComponent not found key: " .. type:getFullName()))
      end
      return configCategory:GetOne()
    end
    Get = function (this, type, id)
      local configCategory
      local default
      default, configCategory = this.allConfig:TryGetValue(type)
      if not default then
        System.throw(System.Exception("ConfigComponent not found key: " .. type:getFullName()))
      end

      return configCategory:TryGet(id)
    end
    TryGet = function (this, type, id)
      local configCategory
      local default
      default, configCategory = this.allConfig:TryGetValue(type)
      if not default then
        return nil
      end
      return configCategory:TryGet(id)
    end
    GetAll = function (this, type)
      local configCategory
      local default
      default, configCategory = this.allConfig:TryGetValue(type)
      if not default then
        System.throw(System.Exception("ConfigComponent not found key: " .. type:getFullName()))
      end
      return configCategory:GetAll()
    end
    GetCategory = function (this, type)
      local configCategory
      local default
      default, configCategory = this.allConfig:TryGetValue(type)
      local ret = default
      local extern
      if ret then
        extern = configCategory
      else
        extern = nil
      end
      return extern
    end
    return {
      base = function (out)
        return {
          out.DCET.Entity
        }
      end,
      Awake = Awake,
      Load = Load,
      GetOne = GetOne,
      Get = Get,
      TryGet = TryGet,
      GetAll = GetAll,
      GetCategory = GetCategory,
      __ctor__ = __ctor__
    }
  end)
end)
