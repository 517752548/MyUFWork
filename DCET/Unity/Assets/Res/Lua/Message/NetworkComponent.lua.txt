-- Generated by CSharp.lua Compiler
local System = System
local DCET = DCET
local DCET
local DictInt64Session
System.import(function (out)
  DCET = out.DCET
  DictInt64Session = System.Dictionary(System.Int64, DCET.Session)
end)
System.namespace("DCET", function (namespace)
  namespace.class("NetworkComponent", function (namespace)
    local Awake, Awake1, getCount, OnAccept, Remove, Get, Create, Create1, 
    Update, Dispose, __ctor__
    __ctor__ = function (this)
      this.Sessions = DictInt64Session()
      DCET.Entity.__ctor__(this)
    end
    Awake = function (this, protocol, packetSize)
      repeat
        local default = protocol
        if default == DCET.NetworkProtocol.KCP then
          local extern = DCET.KService()
          extern:setParent(this)
          this.Service = extern
          break
        elseif default == DCET.NetworkProtocol.TCP then
          local extern = System.new(DCET.TService, 2, packetSize)
          extern:setParent(this)
          this.Service = extern
          break
        elseif default == DCET.NetworkProtocol.WebSocket then
          local extern = DCET.WService()
          extern:setParent(this)
          this.Service = extern
          break
        end
      until 1
    end
    Awake1 = function (this, protocol, address, packetSize)
      System.try(function ()
        local ipEndPoint
        repeat
          local default = protocol
          if default == DCET.NetworkProtocol.KCP then
            ipEndPoint = DCET.NetworkHelper.ToIPEndPoint1(address)
            local extern = System.new(DCET.KService, 2, ipEndPoint, function (channel)
              this:OnAccept(channel)
            end)
            extern:setParent(this)
            this.Service = extern
            break
          elseif default == DCET.NetworkProtocol.TCP then
            ipEndPoint = DCET.NetworkHelper.ToIPEndPoint1(address)
            local extern = DCET.TService(packetSize, ipEndPoint, function (channel)
              this:OnAccept(channel)
            end)
            extern:setParent(this)
            this.Service = extern
            break
          elseif default == DCET.NetworkProtocol.WebSocket then
            local prefixs = address:Split(59 --[[';']], nil, 0)
            local extern = System.new(DCET.WService, 2, prefixs, function (channel)
              this:OnAccept(channel)
            end)
            extern:setParent(this)
            this.Service = extern
            break
          end
        until 1
      end, function (default)
        local e = default
        System.throw(System.Exception("NetworkComponent Awake Error " .. address, e))
      end)
    end
    getCount = function (this)
      return this.Sessions:getCount()
    end
    OnAccept = function (this, channel)
      local session = DCET.EntityFactory.CreateWithParent2(this, channel, DCET.Session, DCET.AChannel)
      this.Sessions:AddKeyValue(session.Id, session)
      channel:Start()
      return session
    end
    Remove = function (this, id)
      local session
      local default
      default, session = this.Sessions:TryGetValue(id)
      if not default then
        return
      end
      this.Sessions:RemoveKey(id)
      session:Dispose()
    end
    Get = function (this, id)
      local session
      local _
      _, session = this.Sessions:TryGetValue(id)
      return session
    end
    -- <summary>
    -- 创建一个新Session
    -- </summary>
    Create = function (this, ipEndPoint)
      local channel = this.Service:ConnectChannel(ipEndPoint)
      local session = DCET.EntityFactory.CreateWithParent2(this, channel, DCET.Session, DCET.AChannel)
      this.Sessions:AddKeyValue(session.Id, session)
      channel:Start()
      return session
    end
    -- <summary>
    -- 创建一个新Session
    -- </summary>
    Create1 = function (this, address)
      local channel = this.Service:ConnectChannel1(address)
      local session = DCET.EntityFactory.CreateWithParent2(this, channel, DCET.Session, DCET.AChannel)
      this.Sessions:AddKeyValue(session.Id, session)
      channel:Start()
      return session
    end
    Update = function (this)
      if this.Service == nil then
        return
      end
      this.Service:Update()
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      DCET.Entity.Dispose(this)

      local default = this.Service
      if default ~= nil then
        default:Dispose()
      end
    end
    return {
      base = function (out)
        return {
          out.DCET.Entity
        }
      end,
      Awake = Awake,
      Awake1 = Awake1,
      getCount = getCount,
      OnAccept = OnAccept,
      Remove = Remove,
      Get = Get,
      Create = Create,
      Create1 = Create1,
      Update = Update,
      Dispose = Dispose,
      __ctor__ = __ctor__
    }
  end)
end)
