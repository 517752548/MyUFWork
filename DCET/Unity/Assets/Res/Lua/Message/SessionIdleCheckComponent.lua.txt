-- Generated by CSharp.lua Compiler
local System = System
local DCET = DCET
local DCET
System.import(function (out)
  DCET = out.DCET
end)
System.namespace("DCET", function (namespace)
  namespace.class("SessionIdleCheckerComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self, checkInteral, recvMaxIdleTime, sendMaxIdleTime)
      self.CheckInterval = checkInteral
      self.RecvMaxIdleTime = recvMaxIdleTime
      self.SendMaxIdleTime = sendMaxIdleTime

      self.RepeatedTimer = DCET.TimerComponent.Instance:NewRepeatedTimer(checkInteral, System.fn(self, self.Check))
    end
    return {
      base = function (out)
        return {
          out.DCET.AwakeSystem_4(out.DCET.SessionIdleCheckerComponent, System.Int32, System.Int32, System.Int32)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("SessionIdleCheckerComponentLoadSystem", function (namespace)
    local Load
    Load = function (this, self)
      local repeatedTimer = DCET.TimerComponent.Instance:GetRepeatedTimer(self.RepeatedTimer)
      if repeatedTimer ~= nil then
        repeatedTimer.Callback = System.fn(self, self.Check)
      end
    end
    return {
      base = function (out)
        return {
          out.DCET.LoadSystem_1(out.DCET.SessionIdleCheckerComponent)
        }
      end,
      Load = Load,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("SessionIdleCheckerComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      self.CheckInterval = 0
      self.RecvMaxIdleTime = 0
      self.SendMaxIdleTime = 0
      DCET.TimerComponent.Instance:Remove(self.RepeatedTimer)
      self.RepeatedTimer = 0
    end
    return {
      base = function (out)
        return {
          out.DCET.DestroySystem_1(out.DCET.SessionIdleCheckerComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("SessionIdleCheckerComponentSystem", function (namespace)
    local Check
    Check = function (self)
      local session = self:GetParent(DCET.Session)
      local timeNow = DCET.TimeHelper.CurrentLocalMilliseconds()
      if timeNow - session.LastRecvTime < self.RecvMaxIdleTime and timeNow - session.LastSendTime < self.SendMaxIdleTime then
        return
      end

      session:setError(102014 --[[ErrorCode.ERR_SessionSendOrRecvTimeout]])
      session:Dispose()
    end
    return {
      Check = Check
    }
  end)

  namespace.class("SessionIdleCheckerComponent", function (namespace)
    local __ctor__
    __ctor__ = function (this)
      DCET.Entity.__ctor__(this)
    end
    return {
      base = function (out)
        return {
          out.DCET.Entity
        }
      end,
      CheckInterval = 0,
      RecvMaxIdleTime = 0,
      SendMaxIdleTime = 0,
      RepeatedTimer = 0,
      __ctor__ = __ctor__
    }
  end)
end)
