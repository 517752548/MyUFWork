-- Generated by CSharp.lua Compiler
local System = System
local DCET = DCET
local DCET
System.import(function (out)
  DCET = out.DCET
end)
System.namespace("DCET", function (namespace)
  namespace.enum("ChannelType", function ()
    return {
      Connect = 0,
      Accept = 1
    }
  end)

  namespace.class("AChannel", function (namespace)
    local Start, addErrorCallback, removeErrorCallback, addReadCallback, removeReadCallback, OnRead, OnError, Dispose, 
    __ctor__
    __ctor__ = function (this, service, channelType)
      this.ChannelType = DCET.ChannelType.Connect
      DCET.Entity.__ctor__(this)
      this.Id = DCET.IdGenerater.GenerateId()
      this.ChannelType = channelType
      this.Service = service
    end
    Start = function (this)
    end
    addErrorCallback = function (this, value)
      this.errorCallback = this.errorCallback + value
    end
    removeErrorCallback = function (this, value)
      this.errorCallback = this.errorCallback - value
    end
    addReadCallback = function (this, value)
      this.readCallback = this.readCallback + value
    end
    removeReadCallback = function (this, value)
      this.readCallback = this.readCallback - value
    end
    OnRead = function (this, memoryStream)
      local default = this.readCallback
      if default ~= nil then
        default(memoryStream)
      end
    end
    OnError = function (this, e)
      repeat
        local default = e
        if default == 102008 --[[ErrorCode.ERR_PeerDisconnect]] then
          this.Error = 102008 --[[ErrorCode.ERR_PeerDisconnect]]
          break
        elseif default == 102010 --[[ErrorCode.ERR_SocketError]] then
          this.Error = 102010 --[[ErrorCode.ERR_SocketError]]
          break
        else
          this.Error = e
          break
        end
      until 1

      local extern = this.errorCallback
      if extern ~= nil then
        extern(this, e)
      end
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      DCET.Entity.Dispose(this)

      this.Service:Remove(this.Id)
      this.errorCallback = nil
      this.readCallback = nil
    end
    return {
      base = function (out)
        return {
          out.DCET.Entity
        }
      end,
      Error = 0,
      Start = Start,
      addErrorCallback = addErrorCallback,
      removeErrorCallback = removeErrorCallback,
      addReadCallback = addReadCallback,
      removeReadCallback = removeReadCallback,
      OnRead = OnRead,
      OnError = OnError,
      Dispose = Dispose,
      __ctor__ = __ctor__
    }
  end)
end)
