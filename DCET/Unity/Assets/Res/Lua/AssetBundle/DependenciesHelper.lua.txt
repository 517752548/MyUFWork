-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local DCETRuntime = DCETRuntime
local ListString = System.List(System.String)
local ArrayString = System.Array(System.String)
local DictStringInt32 = System.Dictionary(System.String, System.Int32)
local DictStringArrayString = System.Dictionary(System.String, ArrayString)
local DCET
System.import(function (out)
  DCET = out.DCET
end)
System.namespace("DCET", function (namespace)
  namespace.class("DependenciesHelper", function (namespace)
    local GetDependencies, GetSortedDependencies, CollectDependencies, class, static
    static = function (this)
      this.DependenciesCache = DictStringArrayString()
    end
    GetDependencies = function (assetBundleName)
      local dependencies

      local default
      default, dependencies = class.DependenciesCache:TryGetValue(assetBundleName)
      if default then
        return dependencies
      end

      if DCETRuntime.Define.IsAsync then
        dependencies = DCET.ResourcesComponent.AssetBundleManifestObject:GetAllDependencies(assetBundleName)
      else
        dependencies = DCETRuntime.AssetDatabaseHelper.GetAssetBundleDependencies(assetBundleName, true)
      end

      if dependencies ~= nil then
        class.DependenciesCache:AddKeyValue(assetBundleName, dependencies)
      end

      return dependencies
    end
    GetSortedDependencies = function (assetBundleName)
      local info = DictStringInt32()
      local parents = ListString()

      CollectDependencies(parents, assetBundleName, info)

      return Linq.ToArray(Linq.Select(Linq.OrderBy(info, function (x)
        return x.Value
      end, nil, System.Int32), function (x)
        return x.Key
      end, System.String))
    end
    CollectDependencies = function (parents, assetBundleName, info)
      parents:Add(assetBundleName)

      local dependencies = GetDependencies(assetBundleName)

      for _, parent in System.each(parents) do
        if not info:ContainsKey(parent) then
          info:set(parent, 0)
        end

        if dependencies ~= nil then
          info:set(parent, info:get(parent) + #dependencies)
        end
      end

      if dependencies ~= nil then
        for _, dep in System.each(dependencies) do
          if parents:Contains(dep) then
            System.throw(System.Exception("包有循环依赖，请重新标记: " .. assetBundleName .. " " .. dep))
          end

          CollectDependencies(parents, dep, info)
        end
      end

      parents:RemoveAt(#parents - 1)
    end
    class = {
      GetDependencies = GetDependencies,
      GetSortedDependencies = GetSortedDependencies,
      CollectDependencies = CollectDependencies,
      static = static
    }
    return class
  end)
end)
