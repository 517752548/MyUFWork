-- Generated by CSharp.lua Compiler
local System = System
System.namespace("DCET", function (namespace)
  namespace.interface("IAwakeSystem", function ()
    return {}
  end)

  namespace.interface("IAwake", function ()
    return {}
  end)

  namespace.interface("IAwake_1", function ()
    return function (A)
      return {}
    end
  end)

  namespace.interface("IAwake_2", function ()
    return function (A, B)
      return {}
    end
  end)

  namespace.interface("IAwake_3", function ()
    return function (A, B, C)
      return {}
    end
  end)

  namespace.interface("IAwake_4", function ()
    return function (A, B, C, D)
      return {}
    end
  end)

  namespace.class("AwakeSystem_1", function (namespace)
    return function (T)
      local Type, Run
      Type = function (this)
        return System.typeof(T)
      end
      Run = function (this, o)
        this:Awake(System.cast(T, o))
      end
      return {
        base = function (out)
          return {
            out.DCET.IAwakeSystem,
            out.DCET.IAwake
          }
        end,
        Type = Type,
        Run = Run
      }
    end
  end)

  namespace.class("AwakeSystem_2", function (namespace)
    return function (T, A)
      local Type, Run
      Type = function (this)
        return System.typeof(T)
      end
      Run = function (this, o, a)
        this:Awake(System.cast(T, o), a)
      end
      return {
        base = function (out)
          return {
            out.DCET.IAwakeSystem,
            out.DCET.IAwake_1(A)
          }
        end,
        Type = Type,
        Run = Run
      }
    end
  end)

  namespace.class("AwakeSystem_3", function (namespace)
    return function (T, A, B)
      local Type, Run
      Type = function (this)
        return System.typeof(T)
      end
      Run = function (this, o, a, b)
        this:Awake(System.cast(T, o), a, b)
      end
      return {
        base = function (out)
          return {
            out.DCET.IAwakeSystem,
            out.DCET.IAwake_2(A, B)
          }
        end,
        Type = Type,
        Run = Run
      }
    end
  end)

  namespace.class("AwakeSystem_4", function (namespace)
    return function (T, A, B, C)
      local Type, Run
      Type = function (this)
        return System.typeof(T)
      end
      Run = function (this, o, a, b, c)
        this:Awake(System.cast(T, o), a, b, c)
      end
      return {
        base = function (out)
          return {
            out.DCET.IAwakeSystem,
            out.DCET.IAwake_3(A, B, C)
          }
        end,
        Type = Type,
        Run = Run
      }
    end
  end)
end)
