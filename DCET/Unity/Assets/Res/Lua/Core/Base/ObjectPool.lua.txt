-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local DCETRuntime = DCETRuntime
local SystemReflection = System.Reflection
local UnityEngine = UnityEngine
local DictTypeInt32 = System.Dictionary(System.Type, System.Int32)
local DCET
local QueueEntity
local DictTypeComponentQueue
local MultiMapSet_2StringString
System.import(function (out)
  DCET = out.DCET
  QueueEntity = System.Queue(DCET.Entity)
  DictTypeComponentQueue = System.Dictionary(System.Type, DCET.ComponentQueue)
  MultiMapSet_2StringString = DCET.MultiMapSet_2(System.String, System.String)
end)
System.namespace("DCET", function (namespace)
  namespace.class("ComponentQueue", function (namespace)
    local Game, Enqueue, Dequeue, Peek, getQueue, getCount, Dispose, static, 
    __ctor__
    static = function (this)
      Game = UnityEngine.GameObject.Find("Game")
      this.Game = Game
    end
    __ctor__ = function (this, typeName)
      this.queue = QueueEntity()
      this.Id = DCET.IdGenerater.GenerateId()
      this.TypeName = typeName

      this.ViewGO = UnityEngine.GameObject()
      this.ViewGO:setname(this:GetType():getName())
      this.ViewGO:setlayer(DCET.LayerNames.GetLayerInt("Hidden" --[[LayerNames.HIDDEN]]))
      this.ViewGO:gettransform():SetParent(Game:gettransform(), false)
      local componentView = System.as(this.ViewGO:AddComponent(System.typeof(DCETRuntime.ComponentView)), DCETRuntime.ComponentView)

      if UnityEngine.Object.op_Implicit(componentView) then
        componentView:setComponent(this)
      end
    end
    Enqueue = function (this, entity)
      this.queue:Enqueue(entity)
    end
    Dequeue = function (this)
      return this.queue:Dequeue()
    end
    Peek = function (this)
      return this.queue:Peek()
    end
    getQueue = function (this)
      return this.queue
    end
    getCount = function (this)
      return #this.queue
    end
    Dispose = function (this)
      while #this.queue > 0 do
        local component = this.queue:Dequeue()
        component:Dispose()
      end
    end
    return {
      base = function (out)
        return {
          System.IDisposable
        }
      end,
      Id = 0,
      Enqueue = Enqueue,
      Dequeue = Dequeue,
      Peek = Peek,
      getQueue = getQueue,
      getCount = getCount,
      Dispose = Dispose,
      static = static,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("ObjectPool", function (namespace)
    local Game, Fetch, Fetch1, Recycle, Dispose, ToString, LogErrorCheckResult, Check, 
    static, __ctor__
    static = function (this)
      Game = UnityEngine.GameObject.Find("Game")
      this.Game = Game
    end
    __ctor__ = function (this)
      this.dictionary = DictTypeComponentQueue()
      this.ViewGO = UnityEngine.GameObject()
      this.ViewGO:setname(this:GetType():getName())
      this.ViewGO:setlayer(DCET.LayerNames.GetLayerInt("Hidden" --[[LayerNames.HIDDEN]]))
      this.ViewGO:gettransform():SetParent(Game:gettransform(), false)
      local componentView = System.as(this.ViewGO:AddComponent(System.typeof(DCETRuntime.ComponentView)), DCETRuntime.ComponentView)

      if UnityEngine.Object.op_Implicit(componentView) then
        componentView:setComponent(this)
      end
    end
    Fetch = function (this, type)
      local obj
      local default, queue = this.dictionary:TryGetValue(type)
      if not default then
        obj = System.cast(DCET.Entity, System.Activator.CreateInstance(type))
      elseif queue:getCount() == 0 then
        obj = System.cast(DCET.Entity, System.Activator.CreateInstance(type))
      else
        obj = queue:Dequeue()
      end

      obj:setIsFromPool(true)
      return obj
    end
    Fetch1 = function (this, T)
      local t = System.cast(T, Fetch(this, System.typeof(T)))
      return t
    end
    Recycle = function (this, obj)
      local type = obj:GetType()
      local queue
      local default
      default, queue = this.dictionary:TryGetValue(type)
      if not default then
        queue = DCET.ComponentQueue(type:getName())


        if UnityEngine.Object.op_Inequality(queue.ViewGO, nil) then
          queue.ViewGO:gettransform():SetParent(this.ViewGO:gettransform())
          queue.ViewGO:setname(type:getName() .. "s")
        end

        this.dictionary:AddKeyValue(type, queue)
      end


      if UnityEngine.Object.op_Inequality(obj.ViewGO, nil) then
        obj.ViewGO:gettransform():SetParent(queue.ViewGO:gettransform())
      end

      obj.Id = 0
      queue:Enqueue(obj)
    end
    Dispose = function (this)
      for _, kv in System.each(this.dictionary) do
        kv.Value:Dispose()
      end
      this.dictionary:Clear()
    end
    ToString = function (this)
      local sb = System.StringBuilder()
      local typeCount = DictTypeInt32()
      for _, kv in System.each(this.dictionary) do
        typeCount:set(kv.Key, kv.Value:getCount())
      end

      local orderByDescending = Linq.OrderByDescending(typeCount, function (s)
        return s.Value
      end, nil, System.Int32)

      sb:AppendLine("ObjectPool Count: ")
      for _, kv in System.each(orderByDescending) do
        local continue
        repeat
          if kv.Value == 1 then
            continue = true
            break
          end
          sb:AppendLine("\t" .. kv.Key:getName() .. ": " .. kv.Value)
          continue = true
        until 1
        if not continue then
          break
        end
      end

      local dict = Check(this)

      sb:Append("not reset field:\n")
      for _, pair in System.each(dict:GetDictionary()) do
        sb:Append(pair.Key .. ": ")
        for _, value in System.each(pair.Value) do
          sb:Append(value .. ", ")
        end
        sb:Append("\n")
      end

      return sb:ToString()
    end
    LogErrorCheckResult = function (this)
      local dict = Check(this)
      if dict:getCount() == 0 then
        return
      end
      local sb = System.StringBuilder()
      sb:Append("not reset field:\n")
      for _, pair in System.each(dict:GetDictionary()) do
        sb:Append(pair.Key .. ": ")
        for _, value in System.each(pair.Value) do
          sb:Append(value .. ", ")
        end
        sb:Append("\n")
      end
      DCET.Log.Error(sb:ToString())
    end
    Check = function (this)
      local dict = MultiMapSet_2StringString()
      for _, queue in System.each(this.dictionary:getValues()) do
        local continue
        repeat
          for _, entity in System.each(queue:getQueue()) do
            local continue
            repeat
              local type = entity:GetType()

              local fieldInfos = type:GetFields()
              for _, fieldInfo in System.each(fieldInfos) do
                local continue
                repeat
                  if fieldInfo:getIsLiteral() then
                    continue = true
                    break
                  end

                  if Linq.Count(SystemReflection.CustomAttributeExtensions.GetCustomAttributes(fieldInfo, System.typeof(DCET.NoMemoryCheck))) > 0 then
                    continue = true
                    break
                  end

                  local fieldType = fieldInfo:getFieldType()
                  if fieldType == System.typeof(System.Int32) then
                    if System.cast(System.Int32, fieldInfo:GetValue(entity)) ~= 0 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if fieldType == System.typeof(System.UInt32) then
                    if System.cast(System.UInt32, fieldInfo:GetValue(entity)) ~= 0 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if fieldType == System.typeof(System.Int64) then
                    if System.cast(System.Int64, fieldInfo:GetValue(entity)) ~= 0 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if fieldType == System.typeof(System.UInt64) then
                    if System.cast(System.UInt64, fieldInfo:GetValue(entity)) ~= 0 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if fieldType == System.typeof(System.Int16) then
                    if System.cast(System.Int16, fieldInfo:GetValue(entity)) ~= 0 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if fieldType == System.typeof(System.UInt16) then
                    if System.cast(System.UInt16, fieldInfo:GetValue(entity)) ~= 0 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if fieldType == System.typeof(System.Single) then
                    if math.Abs(System.cast(System.Single, fieldInfo:GetValue(entity))) > 0.0001 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if fieldType == System.typeof(System.Double) then
                    if math.Abs(System.cast(System.Double, fieldInfo:GetValue(entity))) > 0.0001 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if fieldType == System.typeof(System.Boolean) then
                    if System.cast(System.Boolean, fieldInfo:GetValue(entity)) ~= false then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if System.typeof(System.ICollection):IsAssignableFrom(fieldType) then
                    local fieldValue = fieldInfo:GetValue(entity)
                    if fieldValue == nil then
                      continue = true
                      break
                    end
                    if (System.cast(System.ICollection, fieldValue)):getCount() ~= 0 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  local propertyInfo = fieldType:GetProperty("Count")
                  if propertyInfo ~= nil then
                    if System.cast(System.Int32, propertyInfo:GetValue(fieldInfo:GetValue(entity))) ~= 0 then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end

                  if fieldType:getIsClass() then
                    if fieldInfo:GetValue(entity) ~= nil then
                      dict:Add(type:getName(), fieldInfo:getName())
                    end
                    continue = true
                    break
                  end
                  continue = true
                until 1
                if not continue then
                  break
                end
              end
              continue = true
            until 1
            if not continue then
              break
            end
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end

      return dict
    end
    return {
      base = function (out)
        return {
          System.IDisposable
        }
      end,
      Fetch = Fetch,
      Fetch1 = Fetch1,
      Recycle = Recycle,
      Dispose = Dispose,
      ToString = ToString,
      LogErrorCheckResult = LogErrorCheckResult,
      Check = Check,
      static = static,
      __ctor__ = __ctor__
    }
  end)
end)
