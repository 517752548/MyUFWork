-- Generated by CSharp.lua Compiler
local System = System
local DCETRuntime = DCETRuntime
local UnityEngineNetworking = UnityEngine.Networking
local DCET
System.import(function (out)
  DCET = out.DCET
end)
System.namespace("DCET", function (namespace)
  namespace.class("UnityWebRequestUpdateSystem", function (namespace)
    local Update
    Update = function (this, self)
      self:Update()
    end
    return {
      base = function (out)
        return {
          out.DCET.UpdateSystem_1(out.DCET.UnityWebRequestAsync)
        }
      end,
      Update = Update,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.DCET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("UnityWebRequestAsync", function (namespace)
    local Dispose, getProgress, getByteDownloaded, Update, DownloadAsync, class, static, __ctor__
    static = function (this)
      this.certificateHandler = DCETRuntime.AcceptAllCertificate()
    end
    __ctor__ = function (this)
      DCET.Entity.__ctor__(this)
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      DCET.Entity.Dispose(this)

      local default = this.Request
      if default ~= nil then
        default:Dispose()
      end
      this.Request = nil
      this.isCancel = false
    end
    getProgress = function (this)
      if this.Request == nil then
        return 0
      end
      return this.Request:getdownloadProgress()
    end
    getByteDownloaded = function (this)
      if this.Request == nil then
        return 0
      end
      return this.Request:getdownloadedBytes()
    end
    Update = function (this)
      if this.isCancel then
        this.tcs:SetException(System.Exception("request error: " .. this.Request:geterror()))
        return
      end

      if not this.Request:getisDone() then
        return
      end
      if not System.String.IsNullOrEmpty(this.Request:geterror()) then
        this.tcs:SetException(System.Exception("request error: " .. this.Request:geterror()))
        return
      end

      this.tcs:SetResult(true)
    end
    DownloadAsync = function (this, url)
      this.tcs = System.TaskCompletionSource()

      url = url:Replace(" ", "%20")
      this.Request = UnityEngineNetworking.UnityWebRequest.Get(url)
      this.Request:setcertificateHandler(class.certificateHandler)
      this.Request:SendWebRequest()

      return this.tcs:getTask()
    end
    class = {
      base = function (out)
        return {
          out.DCET.Entity
        }
      end,
      isCancel = false,
      Dispose = Dispose,
      getProgress = getProgress,
      getByteDownloaded = getByteDownloaded,
      Update = Update,
      DownloadAsync = DownloadAsync,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
