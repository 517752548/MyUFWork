//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_FilterModeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.FilterMode));
		L.RegVar("Point", new LuaCSFunction(get_Point), null);
		L.RegVar("Bilinear", new LuaCSFunction(get_Bilinear), null);
		L.RegVar("Trilinear", new LuaCSFunction(get_Trilinear), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<UnityEngine.FilterMode>.Check = CheckType;
		StackTraits<UnityEngine.FilterMode>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.FilterMode arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_UnityEngine_FilterMode = typeof(UnityEngine.FilterMode);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_UnityEngine_FilterMode, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Point(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.FilterMode.Point);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bilinear(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.FilterMode.Bilinear);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Trilinear(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.FilterMode.Trilinear);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		UnityEngine.FilterMode o = (UnityEngine.FilterMode)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

