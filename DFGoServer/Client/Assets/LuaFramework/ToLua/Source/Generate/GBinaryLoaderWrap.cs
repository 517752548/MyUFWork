//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GBinaryLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GBinaryLoader), typeof(GBaseLoader));
		L.RegFunction("Load", new LuaCSFunction(Load));
		L.RegFunction("Close", new LuaCSFunction(Close));
		L.RegFunction("OnTick", new LuaCSFunction(OnTick));
		L.RegFunction("OnLateTick", new LuaCSFunction(OnLateTick));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("New", new LuaCSFunction(_CreateGBinaryLoader));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("Progress", new LuaCSFunction(get_Progress), null);
		L.RegVar("LoadedBytes", new LuaCSFunction(get_LoadedBytes), null);
		L.RegVar("IsHttpError", new LuaCSFunction(get_IsHttpError), null);
		L.RegVar("IsNetworkError", new LuaCSFunction(get_IsNetworkError), null);
		L.RegVar("Error", new LuaCSFunction(get_Error), null);
		L.RegVar("IsFinished", new LuaCSFunction(get_IsFinished), null);
		L.RegVar("Content", new LuaCSFunction(get_Content), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGBinaryLoader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GBinaryLoader obj = new GBinaryLoader();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GBinaryLoader.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GBinaryLoader obj = (GBinaryLoader)ToLua.CheckObject<GBinaryLoader>(L, 1);
				obj.Load();
				return 0;
			}
			else if (count == 3)
			{
				GBinaryLoader obj = (GBinaryLoader)ToLua.CheckObject<GBinaryLoader>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.WWWForm arg1 = (UnityEngine.WWWForm)ToLua.CheckObject<UnityEngine.WWWForm>(L, 3);
				obj.Load(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GBinaryLoader.Load");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GBinaryLoader obj = (GBinaryLoader)ToLua.CheckObject<GBinaryLoader>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GBinaryLoader obj = (GBinaryLoader)ToLua.CheckObject<GBinaryLoader>(L, 1);
			obj.OnTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLateTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GBinaryLoader obj = (GBinaryLoader)ToLua.CheckObject<GBinaryLoader>(L, 1);
			obj.OnLateTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GBinaryLoader obj = (GBinaryLoader)ToLua.CheckObject<GBinaryLoader>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBinaryLoader obj = (GBinaryLoader)o;
			float ret = obj.Progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadedBytes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBinaryLoader obj = (GBinaryLoader)o;
			ulong ret = obj.LoadedBytes;
			LuaDLL.tolua_pushuint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadedBytes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsHttpError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBinaryLoader obj = (GBinaryLoader)o;
			bool ret = obj.IsHttpError;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsHttpError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsNetworkError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBinaryLoader obj = (GBinaryLoader)o;
			bool ret = obj.IsNetworkError;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsNetworkError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Error(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBinaryLoader obj = (GBinaryLoader)o;
			string ret = obj.Error;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Error on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBinaryLoader obj = (GBinaryLoader)o;
			bool ret = obj.IsFinished;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFinished on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Content(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBinaryLoader obj = (GBinaryLoader)o;
			object ret = obj.Content;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Content on a nil value");
		}
	}
}

