//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LinkImageTextWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LinkImageText), typeof(UnityEngine.UI.Text));
		L.RegFunction("CreateImage", new LuaCSFunction(CreateImage));
		L.RegFunction("SetVerticesDirty", new LuaCSFunction(SetVerticesDirty));
		L.RegFunction("IsRaycastLocationValid", new LuaCSFunction(IsRaycastLocationValid));
		L.RegFunction("OnPointerClick", new LuaCSFunction(OnPointerClick));
		L.RegFunction("GetPreferredWidth", new LuaCSFunction(GetPreferredWidth));
		L.RegFunction("GetPreferredHeight", new LuaCSFunction(GetPreferredHeight));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("NoBreakingSpace", new LuaCSFunction(get_NoBreakingSpace), new LuaCSFunction(set_NoBreakingSpace));
		L.RegVar("OnHrefClick", new LuaCSFunction(get_OnHrefClick), new LuaCSFunction(set_OnHrefClick));
		L.RegVar("text", new LuaCSFunction(get_text), new LuaCSFunction(set_text));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LinkImageText obj = (LinkImageText)ToLua.CheckObject<LinkImageText>(L, 1);
			Gear.FaceAnimateSprite o = obj.CreateImage();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVerticesDirty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LinkImageText obj = (LinkImageText)ToLua.CheckObject<LinkImageText>(L, 1);
			obj.SetVerticesDirty();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRaycastLocationValid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LinkImageText obj = (LinkImageText)ToLua.CheckObject<LinkImageText>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 3);
			bool o = obj.IsRaycastLocationValid(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LinkImageText obj = (LinkImageText)ToLua.CheckObject<LinkImageText>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerClick(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPreferredWidth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LinkImageText obj = (LinkImageText)ToLua.CheckObject<LinkImageText>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			float o = obj.GetPreferredWidth(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPreferredHeight(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				LinkImageText obj = (LinkImageText)ToLua.CheckObject<LinkImageText>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float o = obj.GetPreferredHeight(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3)
			{
				LinkImageText obj = (LinkImageText)ToLua.CheckObject<LinkImageText>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float o = obj.GetPreferredHeight(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LinkImageText.GetPreferredHeight");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoBreakingSpace(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LinkImageText.NoBreakingSpace);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnHrefClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LinkImageText obj = (LinkImageText)o;
			LinkImageText.HrefClickEvent ret = obj.OnHrefClick;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnHrefClick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_text(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LinkImageText obj = (LinkImageText)o;
			string ret = obj.text;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index text on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NoBreakingSpace(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LinkImageText.NoBreakingSpace = arg0;
			LinkImageText.NoBreakingSpace = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnHrefClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LinkImageText obj = (LinkImageText)o;
			LinkImageText.HrefClickEvent arg0 = (LinkImageText.HrefClickEvent)ToLua.CheckObject<LinkImageText.HrefClickEvent>(L, 2);
			obj.OnHrefClick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnHrefClick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_text(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LinkImageText obj = (LinkImageText)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.text = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index text on a nil value");
		}
	}
}

