//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_AnimationCullingTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.AnimationCullingType));
		L.RegVar("AlwaysAnimate", new LuaCSFunction(get_AlwaysAnimate), null);
		L.RegVar("BasedOnRenderers", new LuaCSFunction(get_BasedOnRenderers), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<UnityEngine.AnimationCullingType>.Check = CheckType;
		StackTraits<UnityEngine.AnimationCullingType>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.AnimationCullingType arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_UnityEngine_AnimationCullingType = typeof(UnityEngine.AnimationCullingType);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_UnityEngine_AnimationCullingType, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AlwaysAnimate(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.AnimationCullingType.AlwaysAnimate);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BasedOnRenderers(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.AnimationCullingType.BasedOnRenderers);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		UnityEngine.AnimationCullingType o = (UnityEngine.AnimationCullingType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

