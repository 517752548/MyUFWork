//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PlatformUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PlatformUtil), typeof(System.Object));
		L.RegFunction("IsRunInEditor", new LuaCSFunction(IsRunInEditor));
		L.RegFunction("IsWindowsPlayer", new LuaCSFunction(IsWindowsPlayer));
		L.RegFunction("IsIPhonePlayer", new LuaCSFunction(IsIPhonePlayer));
		L.RegFunction("IsAndroidPlayer", new LuaCSFunction(IsAndroidPlayer));
		L.RegFunction("GetPlatformName", new LuaCSFunction(GetPlatformName));
		L.RegFunction("IsReleaseWindows", new LuaCSFunction(IsReleaseWindows));
		L.RegFunction("IsReleaseAndroid", new LuaCSFunction(IsReleaseAndroid));
		L.RegFunction("IsReleaseIOS", new LuaCSFunction(IsReleaseIOS));
		L.RegFunction("New", new LuaCSFunction(_CreatePlatformUtil));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePlatformUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PlatformUtil obj = new PlatformUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PlatformUtil.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRunInEditor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = PlatformUtil.IsRunInEditor();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsWindowsPlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = PlatformUtil.IsWindowsPlayer();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsIPhonePlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = PlatformUtil.IsIPhonePlayer();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAndroidPlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = PlatformUtil.IsAndroidPlayer();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlatformName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = PlatformUtil.GetPlatformName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsReleaseWindows(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = PlatformUtil.IsReleaseWindows();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsReleaseAndroid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = PlatformUtil.IsReleaseAndroid();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsReleaseIOS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = PlatformUtil.IsReleaseIOS();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

