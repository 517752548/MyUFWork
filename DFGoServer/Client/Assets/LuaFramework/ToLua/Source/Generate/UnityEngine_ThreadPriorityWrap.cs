//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ThreadPriorityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.ThreadPriority));
		L.RegVar("Low", new LuaCSFunction(get_Low), null);
		L.RegVar("BelowNormal", new LuaCSFunction(get_BelowNormal), null);
		L.RegVar("Normal", new LuaCSFunction(get_Normal), null);
		L.RegVar("High", new LuaCSFunction(get_High), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<UnityEngine.ThreadPriority>.Check = CheckType;
		StackTraits<UnityEngine.ThreadPriority>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.ThreadPriority arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_UnityEngine_ThreadPriority = typeof(UnityEngine.ThreadPriority);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_UnityEngine_ThreadPriority, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Low(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.ThreadPriority.Low);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BelowNormal(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.ThreadPriority.BelowNormal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Normal(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.ThreadPriority.Normal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_High(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.ThreadPriority.High);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		UnityEngine.ThreadPriority o = (UnityEngine.ThreadPriority)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

