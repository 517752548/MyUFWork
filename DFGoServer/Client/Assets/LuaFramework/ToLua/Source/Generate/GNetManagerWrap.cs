//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GNetManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GNetManager), typeof(System.Object));
		L.RegFunction("GetInstance", new LuaCSFunction(GetInstance));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("Connect", new LuaCSFunction(Connect));
		L.RegFunction("Disconnect", new LuaCSFunction(Disconnect));
		L.RegFunction("Send", new LuaCSFunction(Send));
		L.RegFunction("OnTick", new LuaCSFunction(OnTick));
		L.RegFunction("OnLateTick", new LuaCSFunction(OnLateTick));
		L.RegFunction("New", new LuaCSFunction(_CreateGNetManager));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("OnConnected", new LuaCSFunction(get_OnConnected), new LuaCSFunction(set_OnConnected));
		L.RegVar("OnDisconnected", new LuaCSFunction(get_OnDisconnected), new LuaCSFunction(set_OnDisconnected));
		L.RegVar("OnResponse", new LuaCSFunction(get_OnResponse), new LuaCSFunction(set_OnResponse));
		L.RegFunction("OnConnectedDelegate", new LuaCSFunction(GNetManager_OnConnectedDelegate));
		L.RegFunction("OnDisconnectDelegate", new LuaCSFunction(GNetManager_OnDisconnectDelegate));
		L.RegFunction("OnResponseDelegate", new LuaCSFunction(GNetManager_OnResponseDelegate));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGNetManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GNetManager obj = new GNetManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GNetManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GNetManager o = GNetManager.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GNetManager obj = (GNetManager)ToLua.CheckObject<GNetManager>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				GNetManager obj = (GNetManager)ToLua.CheckObject<GNetManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.Connect(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				GNetManager obj = (GNetManager)ToLua.CheckObject<GNetManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				GNetManager.OnConnectedDelegate arg2 = (GNetManager.OnConnectedDelegate)ToLua.CheckDelegate<GNetManager.OnConnectedDelegate>(L, 4);
				obj.Connect(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				GNetManager obj = (GNetManager)ToLua.CheckObject<GNetManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				GNetManager.OnConnectedDelegate arg2 = (GNetManager.OnConnectedDelegate)ToLua.CheckDelegate<GNetManager.OnConnectedDelegate>(L, 4);
				GNetManager.OnDisconnectDelegate arg3 = (GNetManager.OnDisconnectDelegate)ToLua.CheckDelegate<GNetManager.OnDisconnectDelegate>(L, 5);
				obj.Connect(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GNetManager.Connect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Disconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GNetManager obj = (GNetManager)ToLua.CheckObject<GNetManager>(L, 1);
			obj.Disconnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GNetManager obj = (GNetManager)ToLua.CheckObject<GNetManager>(L, 1);
			short arg0 = (short)LuaDLL.luaL_checkinteger(L, 2);
			GByteArray arg1 = (GByteArray)ToLua.CheckObject<GByteArray>(L, 3);
			obj.Send(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GNetManager obj = (GNetManager)ToLua.CheckObject<GNetManager>(L, 1);
			obj.OnTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLateTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GNetManager obj = (GNetManager)ToLua.CheckObject<GNetManager>(L, 1);
			obj.OnLateTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnConnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GNetManager obj = (GNetManager)o;
			GNetManager.OnConnectedDelegate ret = obj.OnConnected;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnConnected on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDisconnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GNetManager obj = (GNetManager)o;
			GNetManager.OnDisconnectDelegate ret = obj.OnDisconnected;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDisconnected on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnResponse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GNetManager obj = (GNetManager)o;
			GNetManager.OnResponseDelegate ret = obj.OnResponse;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnResponse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnConnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GNetManager obj = (GNetManager)o;
			GNetManager.OnConnectedDelegate arg0 = (GNetManager.OnConnectedDelegate)ToLua.CheckDelegate<GNetManager.OnConnectedDelegate>(L, 2);

			if (!object.ReferenceEquals(obj.OnConnected, arg0))
			{
				if (obj.OnConnected != null) obj.OnConnected.SubRef();
				obj.OnConnected = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnConnected on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDisconnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GNetManager obj = (GNetManager)o;
			GNetManager.OnDisconnectDelegate arg0 = (GNetManager.OnDisconnectDelegate)ToLua.CheckDelegate<GNetManager.OnDisconnectDelegate>(L, 2);

			if (!object.ReferenceEquals(obj.OnDisconnected, arg0))
			{
				if (obj.OnDisconnected != null) obj.OnDisconnected.SubRef();
				obj.OnDisconnected = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDisconnected on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnResponse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GNetManager obj = (GNetManager)o;
			GNetManager.OnResponseDelegate arg0 = (GNetManager.OnResponseDelegate)ToLua.CheckDelegate<GNetManager.OnResponseDelegate>(L, 2);

			if (!object.ReferenceEquals(obj.OnResponse, arg0))
			{
				if (obj.OnResponse != null) obj.OnResponse.SubRef();
				obj.OnResponse = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnResponse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GNetManager_OnConnectedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GNetManager.OnConnectedDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GNetManager.OnConnectedDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GNetManager_OnDisconnectDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GNetManager.OnDisconnectDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GNetManager.OnDisconnectDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GNetManager_OnResponseDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GNetManager.OnResponseDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GNetManager.OnResponseDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

