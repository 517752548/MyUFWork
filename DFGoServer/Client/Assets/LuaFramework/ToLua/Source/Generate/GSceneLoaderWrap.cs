//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GSceneLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GSceneLoader), typeof(GBaseLoader));
		L.RegFunction("Close", new LuaCSFunction(Close));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("Load", new LuaCSFunction(Load));
		L.RegFunction("OnTick", new LuaCSFunction(OnTick));
		L.RegFunction("OnLateTick", new LuaCSFunction(OnLateTick));
		L.RegFunction("New", new LuaCSFunction(_CreateGSceneLoader));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("Progress", new LuaCSFunction(get_Progress), null);
		L.RegVar("IsFinished", new LuaCSFunction(get_IsFinished), null);
		L.RegVar("SceneName", new LuaCSFunction(get_SceneName), new LuaCSFunction(set_SceneName));
		L.RegVar("LoadSceneMode", new LuaCSFunction(get_LoadSceneMode), new LuaCSFunction(set_LoadSceneMode));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGSceneLoader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GSceneLoader obj = new GSceneLoader();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GSceneLoader.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GSceneLoader obj = (GSceneLoader)ToLua.CheckObject<GSceneLoader>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GSceneLoader obj = (GSceneLoader)ToLua.CheckObject<GSceneLoader>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GSceneLoader obj = (GSceneLoader)ToLua.CheckObject<GSceneLoader>(L, 1);
			obj.Load();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GSceneLoader obj = (GSceneLoader)ToLua.CheckObject<GSceneLoader>(L, 1);
			obj.OnTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLateTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GSceneLoader obj = (GSceneLoader)ToLua.CheckObject<GSceneLoader>(L, 1);
			obj.OnLateTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GSceneLoader obj = (GSceneLoader)o;
			float ret = obj.Progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GSceneLoader obj = (GSceneLoader)o;
			bool ret = obj.IsFinished;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFinished on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SceneName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GSceneLoader obj = (GSceneLoader)o;
			string ret = obj.SceneName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SceneName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadSceneMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GSceneLoader obj = (GSceneLoader)o;
			UnityEngine.SceneManagement.LoadSceneMode ret = obj.LoadSceneMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadSceneMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SceneName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GSceneLoader obj = (GSceneLoader)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.SceneName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SceneName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadSceneMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GSceneLoader obj = (GSceneLoader)o;
			UnityEngine.SceneManagement.LoadSceneMode arg0 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.CheckObject(L, 2, TypeTraits<UnityEngine.SceneManagement.LoadSceneMode>.type);
			obj.LoadSceneMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadSceneMode on a nil value");
		}
	}
}

