//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_GizmosWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Gizmos), typeof(System.Object));
		L.RegFunction("DrawLine", new LuaCSFunction(DrawLine));
		L.RegFunction("DrawWireSphere", new LuaCSFunction(DrawWireSphere));
		L.RegFunction("DrawSphere", new LuaCSFunction(DrawSphere));
		L.RegFunction("DrawWireCube", new LuaCSFunction(DrawWireCube));
		L.RegFunction("DrawCube", new LuaCSFunction(DrawCube));
		L.RegFunction("DrawMesh", new LuaCSFunction(DrawMesh));
		L.RegFunction("DrawWireMesh", new LuaCSFunction(DrawWireMesh));
		L.RegFunction("DrawIcon", new LuaCSFunction(DrawIcon));
		L.RegFunction("DrawGUITexture", new LuaCSFunction(DrawGUITexture));
		L.RegFunction("DrawFrustum", new LuaCSFunction(DrawFrustum));
		L.RegFunction("DrawRay", new LuaCSFunction(DrawRay));
		L.RegFunction("New", new LuaCSFunction(_CreateUnityEngine_Gizmos));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("color", new LuaCSFunction(get_color), new LuaCSFunction(set_color));
		L.RegVar("matrix", new LuaCSFunction(get_matrix), new LuaCSFunction(set_matrix));
		L.RegVar("exposure", new LuaCSFunction(get_exposure), new LuaCSFunction(set_exposure));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Gizmos(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.Gizmos obj = new UnityEngine.Gizmos();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Gizmos.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Gizmos.DrawLine(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawWireSphere(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Gizmos.DrawWireSphere(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawSphere(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Gizmos.DrawSphere(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawWireCube(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Gizmos.DrawWireCube(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawCube(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Gizmos.DrawCube(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				UnityEngine.Gizmos.DrawMesh(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 2);
				UnityEngine.Gizmos.DrawMesh(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Gizmos.DrawMesh(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Vector3>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Gizmos.DrawMesh(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Quaternion>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
				UnityEngine.Gizmos.DrawMesh(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, UnityEngine.Vector3, UnityEngine.Quaternion>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
				UnityEngine.Gizmos.DrawMesh(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				UnityEngine.Gizmos.DrawMesh(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
				UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 5);
				UnityEngine.Gizmos.DrawMesh(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Gizmos.DrawMesh");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawWireMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				UnityEngine.Gizmos.DrawWireMesh(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 2);
				UnityEngine.Gizmos.DrawWireMesh(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Gizmos.DrawWireMesh(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Vector3>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Gizmos.DrawWireMesh(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Quaternion>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
				UnityEngine.Gizmos.DrawWireMesh(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, UnityEngine.Vector3, UnityEngine.Quaternion>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
				UnityEngine.Gizmos.DrawWireMesh(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3>(L, 2))
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				UnityEngine.Gizmos.DrawWireMesh(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
				UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 5);
				UnityEngine.Gizmos.DrawWireMesh(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Gizmos.DrawWireMesh");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawIcon(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Gizmos.DrawIcon(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Gizmos.DrawIcon(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Color arg3 = ToLua.ToColor(L, 4);
				UnityEngine.Gizmos.DrawIcon(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Gizmos.DrawIcon");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawGUITexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.Gizmos.DrawGUITexture(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.Material arg2 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 3);
				UnityEngine.Gizmos.DrawGUITexture(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 6)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg3 = (int)LuaDLL.luaL_checkinteger(L, 4);
				int arg4 = (int)LuaDLL.luaL_checkinteger(L, 5);
				int arg5 = (int)LuaDLL.luaL_checkinteger(L, 6);
				UnityEngine.Gizmos.DrawGUITexture(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 7)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg3 = (int)LuaDLL.luaL_checkinteger(L, 4);
				int arg4 = (int)LuaDLL.luaL_checkinteger(L, 5);
				int arg5 = (int)LuaDLL.luaL_checkinteger(L, 6);
				UnityEngine.Material arg6 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 7);
				UnityEngine.Gizmos.DrawGUITexture(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Gizmos.DrawGUITexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawFrustum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
			UnityEngine.Gizmos.DrawFrustum(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawRay(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				UnityEngine.Gizmos.DrawRay(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Gizmos.DrawRay(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Gizmos.DrawRay");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Gizmos.color);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_matrix(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, UnityEngine.Gizmos.matrix);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_exposure(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Gizmos.exposure);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			UnityEngine.Gizmos.color = arg0;
			UnityEngine.Gizmos.color = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_matrix(IntPtr L)
	{
		try
		{
			UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 2);
			UnityEngine.Gizmos.matrix = arg0;
			UnityEngine.Gizmos.matrix = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_exposure(IntPtr L)
	{
		try
		{
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			UnityEngine.Gizmos.exposure = arg0;
			UnityEngine.Gizmos.exposure = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

