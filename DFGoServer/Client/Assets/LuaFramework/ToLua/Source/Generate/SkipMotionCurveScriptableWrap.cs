//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SkipMotionCurveScriptableWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SkipMotionCurveScriptable), typeof(UnityEngine.ScriptableObject));
		L.RegFunction("AddCurveData", new LuaCSFunction(AddCurveData));
		L.RegFunction("GetCurveData", new LuaCSFunction(GetCurveData));
		L.RegFunction("New", new LuaCSFunction(_CreateSkipMotionCurveScriptable));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("curveDataList", new LuaCSFunction(get_curveDataList), new LuaCSFunction(set_curveDataList));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSkipMotionCurveScriptable(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SkipMotionCurveScriptable obj = new SkipMotionCurveScriptable();
				ToLua.Push(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SkipMotionCurveScriptable.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCurveData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SkipMotionCurveScriptable obj = (SkipMotionCurveScriptable)ToLua.CheckObject<SkipMotionCurveScriptable>(L, 1);
			SkipMotionCurveData arg0 = (SkipMotionCurveData)ToLua.CheckObject<SkipMotionCurveData>(L, 2);
			obj.AddCurveData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurveData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SkipMotionCurveScriptable obj = (SkipMotionCurveScriptable)ToLua.CheckObject<SkipMotionCurveScriptable>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			SkipMotionCurveData o = obj.GetCurveData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curveDataList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkipMotionCurveScriptable obj = (SkipMotionCurveScriptable)o;
			System.Collections.Generic.List<SkipMotionCurveData> ret = obj.curveDataList;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index curveDataList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curveDataList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkipMotionCurveScriptable obj = (SkipMotionCurveScriptable)o;
			System.Collections.Generic.List<SkipMotionCurveData> arg0 = (System.Collections.Generic.List<SkipMotionCurveData>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<SkipMotionCurveData>>.type);
			obj.curveDataList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index curveDataList on a nil value");
		}
	}
}

