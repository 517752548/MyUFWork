//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaConstWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("LuaConst");
		L.RegVar("luaDir", new LuaCSFunction(get_luaDir), new LuaCSFunction(set_luaDir));
		L.RegVar("toluaDir", new LuaCSFunction(get_toluaDir), new LuaCSFunction(set_toluaDir));
		L.RegVar("osDir", new LuaCSFunction(get_osDir), new LuaCSFunction(set_osDir));
		L.RegVar("luaResDir", new LuaCSFunction(get_luaResDir), new LuaCSFunction(set_luaResDir));
		L.RegVar("zbsDir", new LuaCSFunction(get_zbsDir), new LuaCSFunction(set_zbsDir));
		L.RegVar("openLuaSocket", new LuaCSFunction(get_openLuaSocket), new LuaCSFunction(set_openLuaSocket));
		L.RegVar("openLuaDebugger", new LuaCSFunction(get_openLuaDebugger), new LuaCSFunction(set_openLuaDebugger));
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaConst.luaDir);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_toluaDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaConst.toluaDir);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_osDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaConst.osDir);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaResDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaConst.luaResDir);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zbsDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaConst.zbsDir);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_openLuaSocket(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, LuaConst.openLuaSocket);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_openLuaDebugger(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, LuaConst.openLuaDebugger);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaConst.luaDir = arg0;
			LuaConst.luaDir = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_toluaDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaConst.toluaDir = arg0;
			LuaConst.toluaDir = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_osDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaConst.osDir = arg0;
			LuaConst.osDir = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaResDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaConst.luaResDir = arg0;
			LuaConst.luaResDir = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zbsDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaConst.zbsDir = arg0;
			LuaConst.zbsDir = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_openLuaSocket(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LuaConst.openLuaSocket = arg0;
			LuaConst.openLuaSocket = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_openLuaDebugger(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LuaConst.openLuaDebugger = arg0;
			LuaConst.openLuaDebugger = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

