//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HUDBaseMeshWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HUDBaseMesh), typeof(System.Object));
		L.RegFunction("AddMeshRenderer", new LuaCSFunction(AddMeshRenderer));
		L.RegFunction("GetSkipTemporary", new LuaCSFunction(GetSkipTemporary));
		L.RegFunction("GetBloodTemporary", new LuaCSFunction(GetBloodTemporary));
		L.RegFunction("GetTextTemporary", new LuaCSFunction(GetTextTemporary));
		L.RegFunction("GetSpriteTemporary", new LuaCSFunction(GetSpriteTemporary));
		L.RegFunction("ReleaseTemporary", new LuaCSFunction(ReleaseTemporary));
		L.RegFunction("AppendContent", new LuaCSFunction(AppendContent));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("Destroy", new LuaCSFunction(Destroy));
		L.RegFunction("New", new LuaCSFunction(_CreateHUDBaseMesh));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("sceneCamera", new LuaCSFunction(get_sceneCamera), new LuaCSFunction(set_sceneCamera));
		L.RegVar("camera", new LuaCSFunction(get_camera), new LuaCSFunction(set_camera));
		L.RegVar("font", new LuaCSFunction(get_font), new LuaCSFunction(set_font));
		L.RegVar("color32", new LuaCSFunction(get_color32), new LuaCSFunction(set_color32));
		L.RegVar("allSprite", new LuaCSFunction(get_allSprite), new LuaCSFunction(set_allSprite));
		L.RegVar("contentList", new LuaCSFunction(get_contentList), new LuaCSFunction(set_contentList));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHUDBaseMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject<UnityEngine.GameObject>(L, 1);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 2);
				UnityEngine.Camera arg2 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				HUDBaseMesh obj = new HUDBaseMesh(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject<UnityEngine.GameObject>(L, 1);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 2);
				UnityEngine.Camera arg2 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				int arg4 = (int)LuaDLL.luaL_checkinteger(L, 5);
				HUDBaseMesh obj = new HUDBaseMesh(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HUDBaseMesh.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddMeshRenderer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Texture2D, int>(L, 2))
			{
				HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
				UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				obj.AddMeshRenderer(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Font, int>(L, 2))
			{
				HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
				UnityEngine.Font arg0 = (UnityEngine.Font)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				obj.AddMeshRenderer(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HUDBaseMesh.AddMeshRenderer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkipTemporary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
			HUDSkipContent o = obj.GetSkipTemporary();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBloodTemporary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
			HUDBloodContent o = obj.GetBloodTemporary();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextTemporary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
			HUDTextContent o = obj.GetTextTemporary();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSpriteTemporary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
			HUDSpriteContent o = obj.GetSpriteTemporary();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseTemporary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
			HUDBaseContent arg0 = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 2);
			obj.ReleaseTemporary(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AppendContent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
			HUDBaseContent arg0 = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 2);
			obj.AppendContent(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sceneCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			UnityEngine.Camera ret = obj.sceneCamera;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sceneCamera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_camera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			UnityEngine.Camera ret = obj.camera;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index camera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_font(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			UnityEngine.Font ret = obj.font;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index font on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color32(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			UnityEngine.Color32[] ret = obj.color32;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color32 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_allSprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			System.Collections.Generic.Dictionary<string,UnityEngine.Sprite> ret = obj.allSprite;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index allSprite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_contentList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			System.Collections.Generic.List<HUDBaseContent> ret = obj.contentList;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index contentList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sceneCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 2);
			obj.sceneCamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sceneCamera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_camera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 2);
			obj.camera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index camera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_font(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			UnityEngine.Font arg0 = (UnityEngine.Font)ToLua.CheckObject<UnityEngine.Font>(L, 2);
			obj.font = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index font on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color32(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			UnityEngine.Color32[] arg0 = ToLua.CheckStructArray<UnityEngine.Color32>(L, 2);
			obj.color32 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color32 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_allSprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			System.Collections.Generic.Dictionary<string,UnityEngine.Sprite> arg0 = (System.Collections.Generic.Dictionary<string,UnityEngine.Sprite>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.Dictionary<string,UnityEngine.Sprite>>.type);
			obj.allSprite = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index allSprite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_contentList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseMesh obj = (HUDBaseMesh)o;
			System.Collections.Generic.List<HUDBaseContent> arg0 = (System.Collections.Generic.List<HUDBaseContent>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<HUDBaseContent>>.type);
			obj.contentList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index contentList on a nil value");
		}
	}
}

