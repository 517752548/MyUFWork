//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GBaseLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GBaseLoader), typeof(System.Object));
		L.RegFunction("Load", new LuaCSFunction(Load));
		L.RegFunction("Close", new LuaCSFunction(Close));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("OnTick", new LuaCSFunction(OnTick));
		L.RegFunction("OnLateTick", new LuaCSFunction(OnLateTick));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("OnLoadProgress", new LuaCSFunction(get_OnLoadProgress), new LuaCSFunction(set_OnLoadProgress));
		L.RegVar("OnLoadComplete", new LuaCSFunction(get_OnLoadComplete), new LuaCSFunction(set_OnLoadComplete));
		L.RegVar("OnLoadError", new LuaCSFunction(get_OnLoadError), new LuaCSFunction(set_OnLoadError));
		L.RegVar("Url", new LuaCSFunction(get_Url), new LuaCSFunction(set_Url));
		L.RegVar("Name", new LuaCSFunction(get_Name), new LuaCSFunction(set_Name));
		L.RegVar("Progress", new LuaCSFunction(get_Progress), null);
		L.RegVar("LoadedBytes", new LuaCSFunction(get_LoadedBytes), null);
		L.RegVar("LoadRate", new LuaCSFunction(get_LoadRate), null);
		L.RegVar("LoadTime", new LuaCSFunction(get_LoadTime), null);
		L.RegVar("IsLoading", new LuaCSFunction(get_IsLoading), null);
		L.RegVar("AutoDispose", new LuaCSFunction(get_AutoDispose), new LuaCSFunction(set_AutoDispose));
		L.RegVar("AssetBundle", new LuaCSFunction(get_AssetBundle), null);
		L.RegVar("IsAsync", new LuaCSFunction(get_IsAsync), new LuaCSFunction(set_IsAsync));
		L.RegVar("IsFinished", new LuaCSFunction(get_IsFinished), null);
		L.RegVar("Content", new LuaCSFunction(get_Content), null);
		L.RegFunction("OnLoadErrorDelegate", new LuaCSFunction(GBaseLoader_OnLoadErrorDelegate));
		L.RegFunction("OnLoadCompleteDelegate", new LuaCSFunction(GBaseLoader_OnLoadCompleteDelegate));
		L.RegFunction("OnLoadProgressDelegate", new LuaCSFunction(GBaseLoader_OnLoadProgressDelegate));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GBaseLoader obj = (GBaseLoader)ToLua.CheckObject<GBaseLoader>(L, 1);
			obj.Load();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GBaseLoader obj = (GBaseLoader)ToLua.CheckObject<GBaseLoader>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GBaseLoader obj = (GBaseLoader)ToLua.CheckObject<GBaseLoader>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GBaseLoader obj = (GBaseLoader)ToLua.CheckObject<GBaseLoader>(L, 1);
			obj.OnTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLateTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GBaseLoader obj = (GBaseLoader)ToLua.CheckObject<GBaseLoader>(L, 1);
			obj.OnLateTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoadProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			GBaseLoader.OnLoadProgressDelegate ret = obj.OnLoadProgress;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoadComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			GBaseLoader.OnLoadCompleteDelegate ret = obj.OnLoadComplete;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoadError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			GBaseLoader.OnLoadErrorDelegate ret = obj.OnLoadError;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			string ret = obj.Url;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Url on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			float ret = obj.Progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadedBytes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			ulong ret = obj.LoadedBytes;
			LuaDLL.tolua_pushuint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadedBytes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			float ret = obj.LoadRate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadRate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			float ret = obj.LoadTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLoading(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			bool ret = obj.IsLoading;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsLoading on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoDispose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			bool ret = obj.AutoDispose;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AutoDispose on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			UnityEngine.AssetBundle ret = obj.AssetBundle;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetBundle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAsync(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			bool ret = obj.IsAsync;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAsync on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			bool ret = obj.IsFinished;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFinished on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Content(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			object ret = obj.Content;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Content on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoadProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			GBaseLoader.OnLoadProgressDelegate arg0 = (GBaseLoader.OnLoadProgressDelegate)ToLua.CheckDelegate<GBaseLoader.OnLoadProgressDelegate>(L, 2);

			if (!object.ReferenceEquals(obj.OnLoadProgress, arg0))
			{
				if (obj.OnLoadProgress != null) obj.OnLoadProgress.SubRef();
				obj.OnLoadProgress = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoadComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			GBaseLoader.OnLoadCompleteDelegate arg0 = (GBaseLoader.OnLoadCompleteDelegate)ToLua.CheckDelegate<GBaseLoader.OnLoadCompleteDelegate>(L, 2);

			if (!object.ReferenceEquals(obj.OnLoadComplete, arg0))
			{
				if (obj.OnLoadComplete != null) obj.OnLoadComplete.SubRef();
				obj.OnLoadComplete = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoadError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			GBaseLoader.OnLoadErrorDelegate arg0 = (GBaseLoader.OnLoadErrorDelegate)ToLua.CheckDelegate<GBaseLoader.OnLoadErrorDelegate>(L, 2);

			if (!object.ReferenceEquals(obj.OnLoadError, arg0))
			{
				if (obj.OnLoadError != null) obj.OnLoadError.SubRef();
				obj.OnLoadError = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Url = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Url on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AutoDispose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AutoDispose = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AutoDispose on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsAsync(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GBaseLoader obj = (GBaseLoader)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsAsync = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAsync on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GBaseLoader_OnLoadErrorDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GBaseLoader.OnLoadErrorDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GBaseLoader.OnLoadErrorDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GBaseLoader_OnLoadCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GBaseLoader.OnLoadCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GBaseLoader.OnLoadCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GBaseLoader_OnLoadProgressDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GBaseLoader.OnLoadProgressDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GBaseLoader.OnLoadProgressDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

