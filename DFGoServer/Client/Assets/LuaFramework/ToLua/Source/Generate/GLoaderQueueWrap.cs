//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GLoaderQueueWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GLoaderQueue), typeof(System.Object));
		L.RegFunction("AddLoader", new LuaCSFunction(AddLoader));
		L.RegFunction("AddLoaderAndLoad", new LuaCSFunction(AddLoaderAndLoad));
		L.RegFunction("Load", new LuaCSFunction(Load));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("New", new LuaCSFunction(_CreateGLoaderQueue));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("maxConnection", new LuaCSFunction(get_maxConnection), new LuaCSFunction(set_maxConnection));
		L.RegVar("OnLoadComplete", new LuaCSFunction(get_OnLoadComplete), new LuaCSFunction(set_OnLoadComplete));
		L.RegVar("OnLoadProgress", new LuaCSFunction(get_OnLoadProgress), new LuaCSFunction(set_OnLoadProgress));
		L.RegVar("OnLoadError", new LuaCSFunction(get_OnLoadError), new LuaCSFunction(set_OnLoadError));
		L.RegVar("LoadRate", new LuaCSFunction(get_LoadRate), null);
		L.RegVar("Progress", new LuaCSFunction(get_Progress), null);
		L.RegVar("ProgressByteSize", new LuaCSFunction(get_ProgressByteSize), null);
		L.RegVar("CurrentLoadedCount", new LuaCSFunction(get_CurrentLoadedCount), null);
		L.RegVar("TotalLoadCount", new LuaCSFunction(get_TotalLoadCount), null);
		L.RegFunction("OnLoadErrorDelegate", new LuaCSFunction(GLoaderQueue_OnLoadErrorDelegate));
		L.RegFunction("OnLoadProgressDelegate", new LuaCSFunction(GLoaderQueue_OnLoadProgressDelegate));
		L.RegFunction("OnLoadCompleteDelegate", new LuaCSFunction(GLoaderQueue_OnLoadCompleteDelegate));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGLoaderQueue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GLoaderQueue obj = new GLoaderQueue();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GLoaderQueue.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLoader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GLoaderQueue obj = (GLoaderQueue)ToLua.CheckObject<GLoaderQueue>(L, 1);
			GBaseLoader arg0 = (GBaseLoader)ToLua.CheckObject<GBaseLoader>(L, 2);
			obj.AddLoader(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLoaderAndLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GLoaderQueue obj = (GLoaderQueue)ToLua.CheckObject<GLoaderQueue>(L, 1);
			GBaseLoader arg0 = (GBaseLoader)ToLua.CheckObject<GBaseLoader>(L, 2);
			obj.AddLoaderAndLoad(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GLoaderQueue obj = (GLoaderQueue)ToLua.CheckObject<GLoaderQueue>(L, 1);
			obj.Load();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GLoaderQueue obj = (GLoaderQueue)ToLua.CheckObject<GLoaderQueue>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxConnection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			int ret = obj.maxConnection;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxConnection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoadComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			GLoaderQueue.OnLoadCompleteDelegate ret = obj.OnLoadComplete;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoadProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			GLoaderQueue.OnLoadProgressDelegate ret = obj.OnLoadProgress;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLoadError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			GLoaderQueue.OnLoadErrorDelegate ret = obj.OnLoadError;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			float ret = obj.LoadRate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadRate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			float ret = obj.Progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProgressByteSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			float ret = obj.ProgressByteSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProgressByteSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentLoadedCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			int ret = obj.CurrentLoadedCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentLoadedCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalLoadCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			int ret = obj.TotalLoadCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalLoadCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxConnection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.maxConnection = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxConnection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoadComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			GLoaderQueue.OnLoadCompleteDelegate arg0 = (GLoaderQueue.OnLoadCompleteDelegate)ToLua.CheckDelegate<GLoaderQueue.OnLoadCompleteDelegate>(L, 2);

			if (!object.ReferenceEquals(obj.OnLoadComplete, arg0))
			{
				if (obj.OnLoadComplete != null) obj.OnLoadComplete.SubRef();
				obj.OnLoadComplete = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoadProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			GLoaderQueue.OnLoadProgressDelegate arg0 = (GLoaderQueue.OnLoadProgressDelegate)ToLua.CheckDelegate<GLoaderQueue.OnLoadProgressDelegate>(L, 2);

			if (!object.ReferenceEquals(obj.OnLoadProgress, arg0))
			{
				if (obj.OnLoadProgress != null) obj.OnLoadProgress.SubRef();
				obj.OnLoadProgress = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLoadError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GLoaderQueue obj = (GLoaderQueue)o;
			GLoaderQueue.OnLoadErrorDelegate arg0 = (GLoaderQueue.OnLoadErrorDelegate)ToLua.CheckDelegate<GLoaderQueue.OnLoadErrorDelegate>(L, 2);

			if (!object.ReferenceEquals(obj.OnLoadError, arg0))
			{
				if (obj.OnLoadError != null) obj.OnLoadError.SubRef();
				obj.OnLoadError = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnLoadError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GLoaderQueue_OnLoadErrorDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GLoaderQueue.OnLoadErrorDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GLoaderQueue.OnLoadErrorDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GLoaderQueue_OnLoadProgressDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GLoaderQueue.OnLoadProgressDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GLoaderQueue.OnLoadProgressDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GLoaderQueue_OnLoadCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GLoaderQueue.OnLoadCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GLoaderQueue.OnLoadCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

