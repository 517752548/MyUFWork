//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Gear_GWebManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Gear.GWebManager), typeof(System.Object));
		L.RegFunction("GetInstance", new LuaCSFunction(GetInstance));
		L.RegFunction("RequestTextAsyncByPost", new LuaCSFunction(RequestTextAsyncByPost));
		L.RegFunction("RequestTextAsync", new LuaCSFunction(RequestTextAsync));
		L.RegFunction("New", new LuaCSFunction(_CreateGear_GWebManager));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegFunction("OnRequestTextCompleteDelegate", new LuaCSFunction(Gear_GWebManager_OnRequestTextCompleteDelegate));
		L.RegFunction("OnRequestTextErrorDelegate", new LuaCSFunction(Gear_GWebManager_OnRequestTextErrorDelegate));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGear_GWebManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Gear.GWebManager obj = new Gear.GWebManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Gear.GWebManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Gear.GWebManager o = Gear.GWebManager.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestTextAsyncByPost(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Gear.GWebManager obj = (Gear.GWebManager)ToLua.CheckObject<Gear.GWebManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.WWWForm arg1 = (UnityEngine.WWWForm)ToLua.CheckObject<UnityEngine.WWWForm>(L, 3);
				obj.RequestTextAsyncByPost(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Gear.GWebManager obj = (Gear.GWebManager)ToLua.CheckObject<Gear.GWebManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.WWWForm arg1 = (UnityEngine.WWWForm)ToLua.CheckObject<UnityEngine.WWWForm>(L, 3);
				Gear.GWebManager.OnRequestTextCompleteDelegate arg2 = (Gear.GWebManager.OnRequestTextCompleteDelegate)ToLua.CheckDelegate<Gear.GWebManager.OnRequestTextCompleteDelegate>(L, 4);
				obj.RequestTextAsyncByPost(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Gear.GWebManager obj = (Gear.GWebManager)ToLua.CheckObject<Gear.GWebManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.WWWForm arg1 = (UnityEngine.WWWForm)ToLua.CheckObject<UnityEngine.WWWForm>(L, 3);
				Gear.GWebManager.OnRequestTextCompleteDelegate arg2 = (Gear.GWebManager.OnRequestTextCompleteDelegate)ToLua.CheckDelegate<Gear.GWebManager.OnRequestTextCompleteDelegate>(L, 4);
				Gear.GWebManager.OnRequestTextErrorDelegate arg3 = (Gear.GWebManager.OnRequestTextErrorDelegate)ToLua.CheckDelegate<Gear.GWebManager.OnRequestTextErrorDelegate>(L, 5);
				obj.RequestTextAsyncByPost(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Gear.GWebManager.RequestTextAsyncByPost");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestTextAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Gear.GWebManager obj = (Gear.GWebManager)ToLua.CheckObject<Gear.GWebManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.RequestTextAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Gear.GWebManager obj = (Gear.GWebManager)ToLua.CheckObject<Gear.GWebManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				Gear.GWebManager.OnRequestTextCompleteDelegate arg1 = (Gear.GWebManager.OnRequestTextCompleteDelegate)ToLua.CheckDelegate<Gear.GWebManager.OnRequestTextCompleteDelegate>(L, 3);
				obj.RequestTextAsync(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Gear.GWebManager obj = (Gear.GWebManager)ToLua.CheckObject<Gear.GWebManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				Gear.GWebManager.OnRequestTextCompleteDelegate arg1 = (Gear.GWebManager.OnRequestTextCompleteDelegate)ToLua.CheckDelegate<Gear.GWebManager.OnRequestTextCompleteDelegate>(L, 3);
				Gear.GWebManager.OnRequestTextErrorDelegate arg2 = (Gear.GWebManager.OnRequestTextErrorDelegate)ToLua.CheckDelegate<Gear.GWebManager.OnRequestTextErrorDelegate>(L, 4);
				obj.RequestTextAsync(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Gear.GWebManager.RequestTextAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Gear_GWebManager_OnRequestTextCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Gear.GWebManager.OnRequestTextCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Gear.GWebManager.OnRequestTextCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Gear_GWebManager_OnRequestTextErrorDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Gear.GWebManager.OnRequestTextErrorDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Gear.GWebManager.OnRequestTextErrorDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

