//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HUDTextContentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HUDTextContent), typeof(HUDBaseContent));
		L.RegFunction("SetSyncPosition", new LuaCSFunction(SetSyncPosition));
		L.RegFunction("SetText", new LuaCSFunction(SetText));
		L.RegFunction("RecoverRender", new LuaCSFunction(RecoverRender));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("Destroy", new LuaCSFunction(Destroy));
		L.RegFunction("New", new LuaCSFunction(_CreateHUDTextContent));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHUDTextContent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				HUDTextContent obj = new HUDTextContent();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HUDTextContent.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSyncPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDTextContent obj = (HUDTextContent)ToLua.CheckObject<HUDTextContent>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SetSyncPosition(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				HUDTextContent obj = (HUDTextContent)ToLua.CheckObject<HUDTextContent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				obj.SetText(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				HUDTextContent obj = (HUDTextContent)ToLua.CheckObject<HUDTextContent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				obj.SetText(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				HUDTextContent obj = (HUDTextContent)ToLua.CheckObject<HUDTextContent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				UnityEngine.FontStyle arg3 = (UnityEngine.FontStyle)ToLua.CheckObject(L, 5, TypeTraits<UnityEngine.FontStyle>.type);
				obj.SetText(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HUDTextContent.SetText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecoverRender(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDTextContent obj = (HUDTextContent)ToLua.CheckObject<HUDTextContent>(L, 1);
			obj.RecoverRender();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDTextContent obj = (HUDTextContent)ToLua.CheckObject<HUDTextContent>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDTextContent obj = (HUDTextContent)ToLua.CheckObject<HUDTextContent>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDTextContent obj = (HUDTextContent)ToLua.CheckObject<HUDTextContent>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

