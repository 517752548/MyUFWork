//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GResManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GResManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetInstance", new LuaCSFunction(GetInstance));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("LoadBundlesTable", new LuaCSFunction(LoadBundlesTable));
		L.RegFunction("LoadManifest", new LuaCSFunction(LoadManifest));
		L.RegFunction("InitAppConfigJSON", new LuaCSFunction(InitAppConfigJSON));
		L.RegFunction("GetHotUpdateEnabled", new LuaCSFunction(GetHotUpdateEnabled));
		L.RegFunction("OnTick", new LuaCSFunction(OnTick));
		L.RegFunction("OnLateTick", new LuaCSFunction(OnLateTick));
		L.RegFunction("LoadAssetBundle", new LuaCSFunction(LoadAssetBundle));
		L.RegFunction("LoadAssetBundleAsync", new LuaCSFunction(LoadAssetBundleAsync));
		L.RegFunction("UnloadAssetBundle", new LuaCSFunction(UnloadAssetBundle));
		L.RegFunction("LoadAssetAsync", new LuaCSFunction(LoadAssetAsync));
		L.RegFunction("LoadAsset", new LuaCSFunction(LoadAsset));
		L.RegFunction("LoadAllAssetAsync", new LuaCSFunction(LoadAllAssetAsync));
		L.RegFunction("LoadAllAsset", new LuaCSFunction(LoadAllAsset));
		L.RegFunction("LoadShaderVariantCollection", new LuaCSFunction(LoadShaderVariantCollection));
		L.RegFunction("LoadPrefabAsync", new LuaCSFunction(LoadPrefabAsync));
		L.RegFunction("LoadPrefab", new LuaCSFunction(LoadPrefab));
		L.RegFunction("LoadSprite", new LuaCSFunction(LoadSprite));
		L.RegFunction("LoadSpriteWithBorder", new LuaCSFunction(LoadSpriteWithBorder));
		L.RegFunction("LoadSpriteAsync", new LuaCSFunction(LoadSpriteAsync));
		L.RegFunction("LoadSpriteAsyncWithBorder", new LuaCSFunction(LoadSpriteAsyncWithBorder));
		L.RegFunction("LoadSpriteInAtlas", new LuaCSFunction(LoadSpriteInAtlas));
		L.RegFunction("LoadSpriteInAtlasAsync", new LuaCSFunction(LoadSpriteInAtlasAsync));
		L.RegFunction("LoadAllSpriteInAtlas", new LuaCSFunction(LoadAllSpriteInAtlas));
		L.RegFunction("LoadAllSpriteInAtlasAsync", new LuaCSFunction(LoadAllSpriteInAtlasAsync));
		L.RegFunction("LoadTexture2DAsync", new LuaCSFunction(LoadTexture2DAsync));
		L.RegFunction("LoadTexture2D", new LuaCSFunction(LoadTexture2D));
		L.RegFunction("LoadAnimationClipAsync", new LuaCSFunction(LoadAnimationClipAsync));
		L.RegFunction("LoadAnimationClip", new LuaCSFunction(LoadAnimationClip));
		L.RegFunction("LoadScriptableObject", new LuaCSFunction(LoadScriptableObject));
		L.RegFunction("LoadScriptableObjectAsync", new LuaCSFunction(LoadScriptableObjectAsync));
		L.RegFunction("LoadMeshAsync", new LuaCSFunction(LoadMeshAsync));
		L.RegFunction("LoadMaterialAsync", new LuaCSFunction(LoadMaterialAsync));
		L.RegFunction("LoadMaterial", new LuaCSFunction(LoadMaterial));
		L.RegFunction("LoadAudioClipAsync", new LuaCSFunction(LoadAudioClipAsync));
		L.RegFunction("LoadFontAsync", new LuaCSFunction(LoadFontAsync));
		L.RegFunction("GetAssetBundleStreamingAssetsPath", new LuaCSFunction(GetAssetBundleStreamingAssetsPath));
		L.RegFunction("GetAssetBundleStoragePath", new LuaCSFunction(GetAssetBundleStoragePath));
		L.RegFunction("GetAssetBundlesCDNPath", new LuaCSFunction(GetAssetBundlesCDNPath));
		L.RegFunction("GetAssetBundleLoader", new LuaCSFunction(GetAssetBundleLoader));
		L.RegFunction("GetAssetBundlePath", new LuaCSFunction(GetAssetBundlePath));
		L.RegFunction("GetAssetBundleNameByAssetPath", new LuaCSFunction(GetAssetBundleNameByAssetPath));
		L.RegFunction("AddLoadedAssetBundleReference", new LuaCSFunction(AddLoadedAssetBundleReference));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("ASSETBUNDLE_FOLDER", new LuaCSFunction(get_ASSETBUNDLE_FOLDER), null);
		L.RegVar("VARIANT", new LuaCSFunction(get_VARIANT), null);
		L.RegVar("ASSET_PATH_PREFIX", new LuaCSFunction(get_ASSET_PATH_PREFIX), null);
		L.RegFunction("OnCompleteDelegate", new LuaCSFunction(GResManager_OnCompleteDelegate));
		L.RegFunction("OnLoadItemCompleteDelegate", new LuaCSFunction(GResManager_OnLoadItemCompleteDelegate));
		L.RegFunction("OnLoadAssetCompleteDelegate", new LuaCSFunction(GResManager_OnLoadAssetCompleteDelegate));
		L.RegFunction("OnLoadAllAssetCompleteDelegate", new LuaCSFunction(GResManager_OnLoadAllAssetCompleteDelegate));
		L.RegFunction("OnLoadPrefabCompleteDelegate", new LuaCSFunction(GResManager_OnLoadPrefabCompleteDelegate));
		L.RegFunction("OnLoadSpriteCompleteDelegate", new LuaCSFunction(GResManager_OnLoadSpriteCompleteDelegate));
		L.RegFunction("OnLoadAllSpriteInAtlasCompleteDelegate", new LuaCSFunction(GResManager_OnLoadAllSpriteInAtlasCompleteDelegate));
		L.RegFunction("OnLoadTexture2DCompleteDelegate", new LuaCSFunction(GResManager_OnLoadTexture2DCompleteDelegate));
		L.RegFunction("OnLoadAnimationClipCompleteDelegate", new LuaCSFunction(GResManager_OnLoadAnimationClipCompleteDelegate));
		L.RegFunction("OnLoadScriptableObjectCompleteDelegate", new LuaCSFunction(GResManager_OnLoadScriptableObjectCompleteDelegate));
		L.RegFunction("OnLoadMeshCompleteDelegate", new LuaCSFunction(GResManager_OnLoadMeshCompleteDelegate));
		L.RegFunction("OnLoadMaterialCompleteDelegate", new LuaCSFunction(GResManager_OnLoadMaterialCompleteDelegate));
		L.RegFunction("OnLoadAudioClipCompleteDelegate", new LuaCSFunction(GResManager_OnLoadAudioClipCompleteDelegate));
		L.RegFunction("OnLoadFontCompleteDelegate", new LuaCSFunction(GResManager_OnLoadFontCompleteDelegate));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GResManager o = GResManager.GetInstance();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBundlesTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			obj.LoadBundlesTable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadManifest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			obj.LoadManifest();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitAppConfigJSON(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			GResManager.OnCompleteDelegate arg0 = (GResManager.OnCompleteDelegate)ToLua.CheckDelegate<GResManager.OnCompleteDelegate>(L, 2);
			obj.InitAppConfigJSON(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHotUpdateEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			bool o = obj.GetHotUpdateEnabled();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			obj.OnTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLateTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			obj.OnLateTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.AssetBundle o = obj.LoadAssetBundle(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetBundleAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadAssetBundleAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadItemCompleteDelegate arg1 = (GResManager.OnLoadItemCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadItemCompleteDelegate>(L, 3);
				obj.LoadAssetBundleAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadAssetBundleAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnloadAssetBundle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadAssetAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadAssetCompleteDelegate arg1 = (GResManager.OnLoadAssetCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadAssetCompleteDelegate>(L, 3);
				obj.LoadAssetAsync(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadAssetCompleteDelegate arg1 = (GResManager.OnLoadAssetCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadAssetCompleteDelegate>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.LoadAssetAsync(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadAssetAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Object o = obj.LoadAsset(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Object o = obj.LoadAsset(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadAsset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllAssetAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadAllAssetAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadAllAssetCompleteDelegate arg1 = (GResManager.OnLoadAllAssetCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadAllAssetCompleteDelegate>(L, 3);
				obj.LoadAllAssetAsync(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadAllAssetCompleteDelegate arg1 = (GResManager.OnLoadAllAssetCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadAllAssetCompleteDelegate>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.LoadAllAssetAsync(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadAllAssetAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllAsset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Object[] o = obj.LoadAllAsset(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Object[] o = obj.LoadAllAsset(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadAllAsset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadShaderVariantCollection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.ShaderVariantCollection o = obj.LoadShaderVariantCollection(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefabAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadPrefabAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadPrefabCompleteDelegate arg1 = (GResManager.OnLoadPrefabCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadPrefabCompleteDelegate>(L, 3);
				obj.LoadPrefabAsync(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadPrefabCompleteDelegate arg1 = (GResManager.OnLoadPrefabCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadPrefabCompleteDelegate>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.LoadPrefabAsync(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadPrefabAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.LoadPrefab(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Sprite o = obj.LoadSprite(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSpriteWithBorder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Vector4 arg1 = ToLua.ToVector4(L, 3);
			UnityEngine.Sprite o = obj.LoadSpriteWithBorder(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSpriteAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadSpriteAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadSpriteCompleteDelegate arg1 = (GResManager.OnLoadSpriteCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadSpriteCompleteDelegate>(L, 3);
				obj.LoadSpriteAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadSpriteAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSpriteAsyncWithBorder(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Vector4 arg1 = ToLua.ToVector4(L, 3);
				obj.LoadSpriteAsyncWithBorder(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Vector4 arg1 = ToLua.ToVector4(L, 3);
				GResManager.OnLoadSpriteCompleteDelegate arg2 = (GResManager.OnLoadSpriteCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadSpriteCompleteDelegate>(L, 4);
				obj.LoadSpriteAsyncWithBorder(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadSpriteAsyncWithBorder");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSpriteInAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			UnityEngine.Sprite o = obj.LoadSpriteInAtlas(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSpriteInAtlasAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.LoadSpriteInAtlasAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				GResManager.OnLoadSpriteCompleteDelegate arg3 = (GResManager.OnLoadSpriteCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadSpriteCompleteDelegate>(L, 5);
				obj.LoadSpriteInAtlasAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadSpriteInAtlasAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllSpriteInAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			AtlasInfo o = obj.LoadAllSpriteInAtlas(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllSpriteInAtlasAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadAllSpriteInAtlasAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadAllSpriteInAtlasCompleteDelegate arg1 = (GResManager.OnLoadAllSpriteInAtlasCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadAllSpriteInAtlasCompleteDelegate>(L, 3);
				obj.LoadAllSpriteInAtlasAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadAllSpriteInAtlasAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTexture2DAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadTexture2DAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadTexture2DCompleteDelegate arg1 = (GResManager.OnLoadTexture2DCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadTexture2DCompleteDelegate>(L, 3);
				obj.LoadTexture2DAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadTexture2DAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTexture2D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Texture2D o = obj.LoadTexture2D(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAnimationClipAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadAnimationClipAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadAnimationClipCompleteDelegate arg1 = (GResManager.OnLoadAnimationClipCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadAnimationClipCompleteDelegate>(L, 3);
				obj.LoadAnimationClipAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadAnimationClipAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAnimationClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.AnimationClip o = obj.LoadAnimationClip(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScriptableObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.ScriptableObject o = obj.LoadScriptableObject(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScriptableObjectAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadScriptableObjectAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadScriptableObjectCompleteDelegate arg1 = (GResManager.OnLoadScriptableObjectCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadScriptableObjectCompleteDelegate>(L, 3);
				obj.LoadScriptableObjectAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadScriptableObjectAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMeshAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadMeshAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadMeshCompleteDelegate arg1 = (GResManager.OnLoadMeshCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadMeshCompleteDelegate>(L, 3);
				obj.LoadMeshAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadMeshAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMaterialAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadMaterialAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadMaterialCompleteDelegate arg1 = (GResManager.OnLoadMaterialCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadMaterialCompleteDelegate>(L, 3);
				obj.LoadMaterialAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadMaterialAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Material o = obj.LoadMaterial(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAudioClipAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadAudioClipAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadAudioClipCompleteDelegate arg1 = (GResManager.OnLoadAudioClipCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadAudioClipCompleteDelegate>(L, 3);
				obj.LoadAudioClipAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadAudioClipAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFontAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadFontAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GResManager.OnLoadFontCompleteDelegate arg1 = (GResManager.OnLoadFontCompleteDelegate)ToLua.CheckDelegate<GResManager.OnLoadFontCompleteDelegate>(L, 3);
				obj.LoadFontAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.LoadFontAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetBundleStreamingAssetsPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string o = obj.GetAssetBundleStreamingAssetsPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetBundleStoragePath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string o = obj.GetAssetBundleStoragePath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetBundlesCDNPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string o = obj.GetAssetBundlesCDNPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetBundleLoader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			GBaseLoader o = obj.GetAssetBundleLoader(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetBundlePath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string o = obj.GetAssetBundlePath(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				string o = obj.GetAssetBundlePath(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GResManager.GetAssetBundlePath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetBundleNameByAssetPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetAssetBundleNameByAssetPath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLoadedAssetBundleReference(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GResManager obj = (GResManager)ToLua.CheckObject<GResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddLoadedAssetBundleReference(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ASSETBUNDLE_FOLDER(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GResManager.ASSETBUNDLE_FOLDER);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VARIANT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GResManager.VARIANT);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ASSET_PATH_PREFIX(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GResManager.ASSET_PATH_PREFIX);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadItemCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadItemCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadItemCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadAssetCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAssetCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAssetCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadAllAssetCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAllAssetCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAllAssetCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadPrefabCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadPrefabCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadPrefabCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadSpriteCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadSpriteCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadSpriteCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadAllSpriteInAtlasCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAllSpriteInAtlasCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAllSpriteInAtlasCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadTexture2DCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadTexture2DCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadTexture2DCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadAnimationClipCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAnimationClipCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAnimationClipCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadScriptableObjectCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadScriptableObjectCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadScriptableObjectCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadMeshCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadMeshCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadMeshCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadMaterialCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadMaterialCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadMaterialCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadAudioClipCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAudioClipCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadAudioClipCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GResManager_OnLoadFontCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GResManager.OnLoadFontCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GResManager.OnLoadFontCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

