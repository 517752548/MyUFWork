//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AtlasManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AtlasManager), typeof(System.Object));
		L.RegFunction("GetInstance", new LuaCSFunction(GetInstance));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("AddAtlas", new LuaCSFunction(AddAtlas));
		L.RegFunction("GetAtlas", new LuaCSFunction(GetAtlas));
		L.RegFunction("LoadAtlas", new LuaCSFunction(LoadAtlas));
		L.RegFunction("LoadAtlasAsync", new LuaCSFunction(LoadAtlasAsync));
		L.RegFunction("RemoveAtlas", new LuaCSFunction(RemoveAtlas));
		L.RegFunction("LoadTextureWithAtlasInfo", new LuaCSFunction(LoadTextureWithAtlasInfo));
		L.RegFunction("New", new LuaCSFunction(_CreateAtlasManager));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegFunction("OnGetAtlasComplete", new LuaCSFunction(AtlasManager_OnGetAtlasComplete));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAtlasManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				AtlasManager obj = new AtlasManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: AtlasManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AtlasManager o = AtlasManager.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AtlasManager obj = (AtlasManager)ToLua.CheckObject<AtlasManager>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AtlasManager obj = (AtlasManager)ToLua.CheckObject<AtlasManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			AtlasInfo arg1 = (AtlasInfo)ToLua.CheckObject<AtlasInfo>(L, 3);
			obj.AddAtlas(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AtlasManager obj = (AtlasManager)ToLua.CheckObject<AtlasManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			AtlasInfo o = obj.GetAtlas(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AtlasManager obj = (AtlasManager)ToLua.CheckObject<AtlasManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			AtlasInfo o = obj.LoadAtlas(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAtlasAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				AtlasManager obj = (AtlasManager)ToLua.CheckObject<AtlasManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadAtlasAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				AtlasManager obj = (AtlasManager)ToLua.CheckObject<AtlasManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				AtlasManager.OnGetAtlasComplete arg1 = (AtlasManager.OnGetAtlasComplete)ToLua.CheckDelegate<AtlasManager.OnGetAtlasComplete>(L, 3);
				obj.LoadAtlasAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AtlasManager.LoadAtlasAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AtlasManager obj = (AtlasManager)ToLua.CheckObject<AtlasManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveAtlas(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTextureWithAtlasInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AtlasManager obj = (AtlasManager)ToLua.CheckObject<AtlasManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			AtlasInfo o = obj.LoadTextureWithAtlasInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AtlasManager_OnGetAtlasComplete(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<AtlasManager.OnGetAtlasComplete>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<AtlasManager.OnGetAtlasComplete>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

