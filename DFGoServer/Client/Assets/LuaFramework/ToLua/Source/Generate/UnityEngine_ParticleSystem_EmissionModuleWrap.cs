//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ParticleSystem_EmissionModuleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.ParticleSystem.EmissionModule), null);
		L.RegFunction("SetBursts", new LuaCSFunction(SetBursts));
		L.RegFunction("GetBursts", new LuaCSFunction(GetBursts));
		L.RegFunction("SetBurst", new LuaCSFunction(SetBurst));
		L.RegFunction("GetBurst", new LuaCSFunction(GetBurst));
		L.RegFunction("New", new LuaCSFunction(_CreateUnityEngine_ParticleSystem_EmissionModule));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("enabled", new LuaCSFunction(get_enabled), new LuaCSFunction(set_enabled));
		L.RegVar("rateOverTime", new LuaCSFunction(get_rateOverTime), new LuaCSFunction(set_rateOverTime));
		L.RegVar("rateOverTimeMultiplier", new LuaCSFunction(get_rateOverTimeMultiplier), new LuaCSFunction(set_rateOverTimeMultiplier));
		L.RegVar("rateOverDistance", new LuaCSFunction(get_rateOverDistance), new LuaCSFunction(set_rateOverDistance));
		L.RegVar("rateOverDistanceMultiplier", new LuaCSFunction(get_rateOverDistanceMultiplier), new LuaCSFunction(set_rateOverDistanceMultiplier));
		L.RegVar("burstCount", new LuaCSFunction(get_burstCount), new LuaCSFunction(set_burstCount));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_ParticleSystem_EmissionModule(IntPtr L)
	{
		UnityEngine.ParticleSystem.EmissionModule obj = new UnityEngine.ParticleSystem.EmissionModule();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBursts(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)ToLua.CheckObject(L, 1, TypeTraits<UnityEngine.ParticleSystem.EmissionModule>.type);
				UnityEngine.ParticleSystem.Burst[] arg0 = ToLua.CheckStructArray<UnityEngine.ParticleSystem.Burst>(L, 2);
				obj.SetBursts(arg0);
				ToLua.SetBack(L, 1, obj);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)ToLua.CheckObject(L, 1, TypeTraits<UnityEngine.ParticleSystem.EmissionModule>.type);
				UnityEngine.ParticleSystem.Burst[] arg0 = ToLua.CheckStructArray<UnityEngine.ParticleSystem.Burst>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.SetBursts(arg0, arg1);
				ToLua.SetBack(L, 1, obj);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.ParticleSystem.EmissionModule.SetBursts");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBursts(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)ToLua.CheckObject(L, 1, TypeTraits<UnityEngine.ParticleSystem.EmissionModule>.type);
			UnityEngine.ParticleSystem.Burst[] arg0 = ToLua.CheckStructArray<UnityEngine.ParticleSystem.Burst>(L, 2);
			int o = obj.GetBursts(arg0);
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBurst(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)ToLua.CheckObject(L, 1, TypeTraits<UnityEngine.ParticleSystem.EmissionModule>.type);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			UnityEngine.ParticleSystem.Burst arg1 = StackTraits<UnityEngine.ParticleSystem.Burst>.Check(L, 3);
			obj.SetBurst(arg0, arg1);
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBurst(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)ToLua.CheckObject(L, 1, TypeTraits<UnityEngine.ParticleSystem.EmissionModule>.type);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			UnityEngine.ParticleSystem.Burst o = obj.GetBurst(arg0);
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			bool ret = obj.enabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rateOverTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.rateOverTime;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rateOverTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rateOverTimeMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			float ret = obj.rateOverTimeMultiplier;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rateOverTimeMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rateOverDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.rateOverDistance;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rateOverDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rateOverDistanceMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			float ret = obj.rateOverDistanceMultiplier;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rateOverDistanceMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_burstCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			int ret = obj.burstCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index burstCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enabled = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rateOverTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = StackTraits<UnityEngine.ParticleSystem.MinMaxCurve>.Check(L, 2);
			obj.rateOverTime = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rateOverTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rateOverTimeMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.rateOverTimeMultiplier = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rateOverTimeMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rateOverDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = StackTraits<UnityEngine.ParticleSystem.MinMaxCurve>.Check(L, 2);
			obj.rateOverDistance = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rateOverDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rateOverDistanceMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.rateOverDistanceMultiplier = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rateOverDistanceMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_burstCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.burstCount = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index burstCount on a nil value");
		}
	}
}

