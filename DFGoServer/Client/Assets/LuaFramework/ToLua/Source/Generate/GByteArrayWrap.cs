//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GByteArrayWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GByteArray), typeof(System.Object));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("GetBuffer", new LuaCSFunction(GetBuffer));
		L.RegFunction("ToArray", new LuaCSFunction(ToArray));
		L.RegFunction("ReadBoolean", new LuaCSFunction(ReadBoolean));
		L.RegFunction("ReadByte", new LuaCSFunction(ReadByte));
		L.RegFunction("ReadBytes", new LuaCSFunction(ReadBytes));
		L.RegFunction("ReadDouble", new LuaCSFunction(ReadDouble));
		L.RegFunction("ReadFloat", new LuaCSFunction(ReadFloat));
		L.RegFunction("ReadInt", new LuaCSFunction(ReadInt));
		L.RegFunction("ReadShort", new LuaCSFunction(ReadShort));
		L.RegFunction("ReadLong", new LuaCSFunction(ReadLong));
		L.RegFunction("ReadUTF", new LuaCSFunction(ReadUTF));
		L.RegFunction("ReadString", new LuaCSFunction(ReadString));
		L.RegFunction("ReadLongToString", new LuaCSFunction(ReadLongToString));
		L.RegFunction("WriteBoolean", new LuaCSFunction(WriteBoolean));
		L.RegFunction("WriteByte", new LuaCSFunction(WriteByte));
		L.RegFunction("WriteBytes", new LuaCSFunction(WriteBytes));
		L.RegFunction("WriteDouble", new LuaCSFunction(WriteDouble));
		L.RegFunction("WriteFloat", new LuaCSFunction(WriteFloat));
		L.RegFunction("WriteInt", new LuaCSFunction(WriteInt));
		L.RegFunction("WriteShort", new LuaCSFunction(WriteShort));
		L.RegFunction("WriteLong", new LuaCSFunction(WriteLong));
		L.RegFunction("WriteUTF", new LuaCSFunction(WriteUTF));
		L.RegFunction("WriteString", new LuaCSFunction(WriteString));
		L.RegFunction("WriteStringToLong", new LuaCSFunction(WriteStringToLong));
		L.RegFunction("New", new LuaCSFunction(_CreateGByteArray));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("BIG_ENDIAN", new LuaCSFunction(get_BIG_ENDIAN), null);
		L.RegVar("LITTLE_ENDIAN", new LuaCSFunction(get_LITTLE_ENDIAN), null);
		L.RegVar("endian", new LuaCSFunction(get_endian), new LuaCSFunction(set_endian));
		L.RegVar("Length", new LuaCSFunction(get_Length), null);
		L.RegVar("Position", new LuaCSFunction(get_Position), new LuaCSFunction(set_Position));
		L.RegVar("BytesAvailable", new LuaCSFunction(get_BytesAvailable), null);
		L.RegVar("MemoryStream", new LuaCSFunction(get_MemoryStream), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGByteArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GByteArray obj = new GByteArray();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				System.IO.MemoryStream arg0 = (System.IO.MemoryStream)ToLua.CheckObject<System.IO.MemoryStream>(L, 1);
				GByteArray obj = new GByteArray(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GByteArray.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			byte[] o = obj.GetBuffer();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			byte[] o = obj.ToArray();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			bool o = obj.ReadBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			byte o = obj.ReadByte();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<byte[], int, int>(L, 2))
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				obj.ReadBytes(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<GByteArray, int, int>(L, 2))
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				GByteArray arg0 = (GByteArray)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				obj.ReadBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GByteArray.ReadBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			float o = obj.ReadFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			int o = obj.ReadInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			short o = obj.ReadShort();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			long o = obj.ReadLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUTF(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				string o = obj.ReadUTF();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				string o = obj.ReadUTF(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GByteArray.ReadUTF");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				string o = obj.ReadString();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				string o = obj.ReadString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GByteArray.ReadString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadLongToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			string o = obj.ReadLongToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WriteBoolean(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<byte[], int, int>(L, 2))
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				obj.WriteBytes(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<GByteArray, int, int>(L, 2))
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				GByteArray arg0 = (GByteArray)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				obj.WriteBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GByteArray.WriteBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFloat(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			short arg0 = (short)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteShort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteLong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUTF(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.WriteUTF(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.WriteUTF(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GByteArray.WriteUTF");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.WriteString(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.WriteString(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GByteArray.WriteString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteStringToLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GByteArray obj = (GByteArray)ToLua.CheckObject<GByteArray>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteStringToLong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BIG_ENDIAN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GByteArray.BIG_ENDIAN);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LITTLE_ENDIAN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GByteArray.LITTLE_ENDIAN);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_endian(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GByteArray obj = (GByteArray)o;
			string ret = obj.endian;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index endian on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GByteArray obj = (GByteArray)o;
			int ret = obj.Length;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GByteArray obj = (GByteArray)o;
			int ret = obj.Position;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BytesAvailable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GByteArray obj = (GByteArray)o;
			int ret = obj.BytesAvailable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BytesAvailable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MemoryStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GByteArray obj = (GByteArray)o;
			System.IO.MemoryStream ret = obj.MemoryStream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemoryStream on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_endian(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GByteArray obj = (GByteArray)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.endian = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index endian on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GByteArray obj = (GByteArray)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.Position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}
}

