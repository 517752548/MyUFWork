//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HUDBloodContentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HUDBloodContent), typeof(HUDBaseContent));
		L.RegFunction("SetSyncPosition", new LuaCSFunction(SetSyncPosition));
		L.RegFunction("AddBottom", new LuaCSFunction(AddBottom));
		L.RegFunction("AddMiddle", new LuaCSFunction(AddMiddle));
		L.RegFunction("AddTop", new LuaCSFunction(AddTop));
		L.RegFunction("SetProgress", new LuaCSFunction(SetProgress));
		L.RegFunction("CalcQuadsVert", new LuaCSFunction(CalcQuadsVert));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("Destroy", new LuaCSFunction(Destroy));
		L.RegFunction("New", new LuaCSFunction(_CreateHUDBloodContent));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("bottomQuad", new LuaCSFunction(get_bottomQuad), new LuaCSFunction(set_bottomQuad));
		L.RegVar("middleQuad", new LuaCSFunction(get_middleQuad), new LuaCSFunction(set_middleQuad));
		L.RegVar("topQuad", new LuaCSFunction(get_topQuad), new LuaCSFunction(set_topQuad));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHUDBloodContent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				HUDBloodContent obj = new HUDBloodContent();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HUDBloodContent.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSyncPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SetSyncPosition(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBottom(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddBottom(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddMiddle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddMiddle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddTop(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetProgress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				obj.SetProgress(arg0);
				return 0;
			}
			else if (count == 3)
			{
				HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetProgress(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HUDBloodContent.SetProgress");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalcQuadsVert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
			obj.CalcQuadsVert();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBloodContent obj = (HUDBloodContent)ToLua.CheckObject<HUDBloodContent>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bottomQuad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBloodContent obj = (HUDBloodContent)o;
			HUDBloodQuad ret = obj.bottomQuad;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bottomQuad on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_middleQuad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBloodContent obj = (HUDBloodContent)o;
			HUDBloodQuad ret = obj.middleQuad;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index middleQuad on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_topQuad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBloodContent obj = (HUDBloodContent)o;
			HUDBloodQuad ret = obj.topQuad;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index topQuad on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bottomQuad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBloodContent obj = (HUDBloodContent)o;
			HUDBloodQuad arg0 = (HUDBloodQuad)ToLua.CheckObject<HUDBloodQuad>(L, 2);
			obj.bottomQuad = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bottomQuad on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_middleQuad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBloodContent obj = (HUDBloodContent)o;
			HUDBloodQuad arg0 = (HUDBloodQuad)ToLua.CheckObject<HUDBloodQuad>(L, 2);
			obj.middleQuad = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index middleQuad on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_topQuad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBloodContent obj = (HUDBloodContent)o;
			HUDBloodQuad arg0 = (HUDBloodQuad)ToLua.CheckObject<HUDBloodQuad>(L, 2);
			obj.topQuad = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index topQuad on a nil value");
		}
	}
}

