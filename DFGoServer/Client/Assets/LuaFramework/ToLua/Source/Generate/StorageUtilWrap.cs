//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class StorageUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(StorageUtil), typeof(System.Object));
		L.RegFunction("GetStorageFilePath", new LuaCSFunction(GetStorageFilePath));
		L.RegFunction("HasStorageFile", new LuaCSFunction(HasStorageFile));
		L.RegFunction("LoadStorageFile", new LuaCSFunction(LoadStorageFile));
		L.RegFunction("SaveStorageFile", new LuaCSFunction(SaveStorageFile));
		L.RegFunction("CompareRevision", new LuaCSFunction(CompareRevision));
		L.RegFunction("New", new LuaCSFunction(_CreateStorageUtil));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("STORAGE_FILE_NAME", new LuaCSFunction(get_STORAGE_FILE_NAME), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateStorageUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				StorageUtil obj = new StorageUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: StorageUtil.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStorageFilePath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = StorageUtil.GetStorageFilePath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasStorageFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = StorageUtil.HasStorageFile();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadStorageFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = StorageUtil.LoadStorageFile();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveStorageFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			StorageUtil.SaveStorageFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareRevision(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			int o = StorageUtil.CompareRevision(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_STORAGE_FILE_NAME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, StorageUtil.STORAGE_FILE_NAME);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

