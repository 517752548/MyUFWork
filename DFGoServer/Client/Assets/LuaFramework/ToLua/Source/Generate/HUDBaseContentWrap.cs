//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HUDBaseContentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HUDBaseContent), typeof(System.Object));
		L.RegFunction("GetRect", new LuaCSFunction(GetRect));
		L.RegFunction("SetParentMesh", new LuaCSFunction(SetParentMesh));
		L.RegFunction("SetStartVertPos", new LuaCSFunction(SetStartVertPos));
		L.RegFunction("SetCurveData", new LuaCSFunction(SetCurveData));
		L.RegFunction("ReleaseTemporary", new LuaCSFunction(ReleaseTemporary));
		L.RegFunction("Append", new LuaCSFunction(Append));
		L.RegFunction("InsertNewLine", new LuaCSFunction(InsertNewLine));
		L.RegFunction("CalcQuadsVert", new LuaCSFunction(CalcQuadsVert));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("DrawBuffer", new LuaCSFunction(DrawBuffer));
		L.RegFunction("CleanUpBuffer", new LuaCSFunction(CleanUpBuffer));
		L.RegFunction("StopRender", new LuaCSFunction(StopRender));
		L.RegFunction("RecoverRender", new LuaCSFunction(RecoverRender));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("Destroy", new LuaCSFunction(Destroy));
		L.RegFunction("New", new LuaCSFunction(_CreateHUDBaseContent));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("quads", new LuaCSFunction(get_quads), new LuaCSFunction(set_quads));
		L.RegVar("verts", new LuaCSFunction(get_verts), new LuaCSFunction(set_verts));
		L.RegVar("uvs", new LuaCSFunction(get_uvs), new LuaCSFunction(set_uvs));
		L.RegVar("color32", new LuaCSFunction(get_color32), new LuaCSFunction(set_color32));
		L.RegVar("triangles", new LuaCSFunction(get_triangles), new LuaCSFunction(set_triangles));
		L.RegVar("VertUsedNum", new LuaCSFunction(get_VertUsedNum), new LuaCSFunction(set_VertUsedNum));
		L.RegVar("UvUsedNum", new LuaCSFunction(get_UvUsedNum), new LuaCSFunction(set_UvUsedNum));
		L.RegVar("Color32UsedNum", new LuaCSFunction(get_Color32UsedNum), new LuaCSFunction(set_Color32UsedNum));
		L.RegVar("TrianglesUsedNum", new LuaCSFunction(get_TrianglesUsedNum), new LuaCSFunction(set_TrianglesUsedNum));
		L.RegVar("RenderVertBeginIndex", new LuaCSFunction(get_RenderVertBeginIndex), new LuaCSFunction(set_RenderVertBeginIndex));
		L.RegVar("IsStop", new LuaCSFunction(get_IsStop), new LuaCSFunction(set_IsStop));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHUDBaseContent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				HUDBaseContent obj = new HUDBaseContent();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HUDBaseContent.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			UnityEngine.Rect o = obj.GetRect();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetParentMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			HUDBaseMesh arg0 = (HUDBaseMesh)ToLua.CheckObject<HUDBaseMesh>(L, 2);
			obj.SetParentMesh(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetStartVertPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetStartVertPos(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCurveData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			SkipMotionCurveData arg0 = (SkipMotionCurveData)ToLua.CheckObject<SkipMotionCurveData>(L, 2);
			obj.SetCurveData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseTemporary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			HUDQuad arg0 = (HUDQuad)ToLua.CheckObject<HUDQuad>(L, 2);
			obj.ReleaseTemporary(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Append(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Append(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InsertNewLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			obj.InsertNewLine();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalcQuadsVert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			obj.CalcQuadsVert();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			obj.DrawBuffer();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanUpBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			obj.CleanUpBuffer();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopRender(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			obj.StopRender();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecoverRender(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			obj.RecoverRender();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDBaseContent obj = (HUDBaseContent)ToLua.CheckObject<HUDBaseContent>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_quads(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			System.Collections.Generic.List<HUDQuad> ret = obj.quads;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index quads on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_verts(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			UnityEngine.Vector3[] ret = obj.verts;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index verts on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uvs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			UnityEngine.Vector2[] ret = obj.uvs;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uvs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color32(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			UnityEngine.Color32[] ret = obj.color32;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color32 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_triangles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int[] ret = obj.triangles;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index triangles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VertUsedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int ret = obj.VertUsedNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index VertUsedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UvUsedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int ret = obj.UvUsedNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UvUsedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Color32UsedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int ret = obj.Color32UsedNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Color32UsedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TrianglesUsedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int ret = obj.TrianglesUsedNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TrianglesUsedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RenderVertBeginIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int ret = obj.RenderVertBeginIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RenderVertBeginIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsStop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			bool ret = obj.IsStop;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsStop on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_quads(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			System.Collections.Generic.List<HUDQuad> arg0 = (System.Collections.Generic.List<HUDQuad>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<HUDQuad>>.type);
			obj.quads = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index quads on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_verts(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 2);
			obj.verts = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index verts on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uvs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			UnityEngine.Vector2[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 2);
			obj.uvs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uvs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color32(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			UnityEngine.Color32[] arg0 = ToLua.CheckStructArray<UnityEngine.Color32>(L, 2);
			obj.color32 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color32 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_triangles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.triangles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index triangles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VertUsedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.VertUsedNum = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index VertUsedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UvUsedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.UvUsedNum = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UvUsedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Color32UsedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.Color32UsedNum = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Color32UsedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TrianglesUsedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.TrianglesUsedNum = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TrianglesUsedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RenderVertBeginIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.RenderVertBeginIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RenderVertBeginIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsStop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDBaseContent obj = (HUDBaseContent)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsStop = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsStop on a nil value");
		}
	}
}

