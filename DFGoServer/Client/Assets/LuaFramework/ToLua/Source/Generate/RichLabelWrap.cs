//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class RichLabelWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(RichLabel), typeof(UnityEngine.UI.BaseMeshEffect));
		L.RegFunction("GetPreferredWidth", new LuaCSFunction(GetPreferredWidth));
		L.RegFunction("GetPreferredHeight", new LuaCSFunction(GetPreferredHeight));
		L.RegFunction("ModifyMesh", new LuaCSFunction(ModifyMesh));
		L.RegFunction("Rebuild", new LuaCSFunction(Rebuild));
		L.RegFunction("GetParamStr", new LuaCSFunction(GetParamStr));
		L.RegFunction("ParseColor", new LuaCSFunction(ParseColor));
		L.RegFunction("ParseHref", new LuaCSFunction(ParseHref));
		L.RegFunction("ParseImage", new LuaCSFunction(ParseImage));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("NoBreakingSpace", new LuaCSFunction(get_NoBreakingSpace), new LuaCSFunction(set_NoBreakingSpace));
		L.RegVar("text", new LuaCSFunction(get_text), new LuaCSFunction(set_text));
		L.RegVar("OnHrefClick", new LuaCSFunction(get_OnHrefClick), new LuaCSFunction(set_OnHrefClick));
		L.RegVar("ImageHolder", new LuaCSFunction(get_ImageHolder), null);
		L.RegVar("TextWidth", new LuaCSFunction(get_TextWidth), null);
		L.RegVar("TextHeight", new LuaCSFunction(get_TextHeight), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPreferredWidth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			float o = obj.GetPreferredWidth(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPreferredHeight(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float o = obj.GetPreferredHeight(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3)
			{
				RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float o = obj.GetPreferredHeight(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: RichLabel.GetPreferredHeight");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ModifyMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.UI.VertexHelper>(L, 2))
			{
				RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
				UnityEngine.UI.VertexHelper arg0 = (UnityEngine.UI.VertexHelper)ToLua.ToObject(L, 2);
				obj.ModifyMesh(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Mesh>(L, 2))
			{
				RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
				UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.ToObject(L, 2);
				obj.ModifyMesh(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: RichLabel.ModifyMesh");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Rebuild(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
			obj.Rebuild();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetParamStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetParamStr(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.ParseColor(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseHref(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.ParseHref(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RichLabel obj = (RichLabel)ToLua.CheckObject<RichLabel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.ParseImage(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoBreakingSpace(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, RichLabel.NoBreakingSpace);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_text(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RichLabel obj = (RichLabel)o;
			string ret = obj.text;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index text on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnHrefClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RichLabel obj = (RichLabel)o;
			RichLabel.HrefClickEvent ret = obj.OnHrefClick;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnHrefClick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImageHolder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RichLabel obj = (RichLabel)o;
			UnityEngine.RectTransform ret = obj.ImageHolder;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ImageHolder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TextWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RichLabel obj = (RichLabel)o;
			float ret = obj.TextWidth;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TextWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TextHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RichLabel obj = (RichLabel)o;
			float ret = obj.TextHeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TextHeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NoBreakingSpace(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			RichLabel.NoBreakingSpace = arg0;
			RichLabel.NoBreakingSpace = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_text(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RichLabel obj = (RichLabel)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.text = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index text on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnHrefClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RichLabel obj = (RichLabel)o;
			RichLabel.HrefClickEvent arg0 = (RichLabel.HrefClickEvent)ToLua.CheckObject<RichLabel.HrefClickEvent>(L, 2);
			obj.OnHrefClick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnHrefClick on a nil value");
		}
	}
}

