//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Dict4LuaWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Dict4Lua), typeof(System.Object));
		L.RegFunction("Add", new LuaCSFunction(Add));
		L.RegFunction("Get", new LuaCSFunction(Get));
		L.RegFunction("New", new LuaCSFunction(_CreateDict4Lua));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDict4Lua(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Dict4Lua obj = new Dict4Lua();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Dict4Lua.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Dict4Lua obj = (Dict4Lua)ToLua.CheckObject<Dict4Lua>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.Add(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Dict4Lua obj = (Dict4Lua)ToLua.CheckObject<Dict4Lua>(L, 1);
			System.Collections.Generic.Dictionary<string,object> o = obj.Get();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

