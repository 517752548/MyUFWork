//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Gear_GFileManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Gear.GFileManager), typeof(System.Object));
		L.RegFunction("GetInstance", new LuaCSFunction(GetInstance));
		L.RegFunction("GetBundlesInfoConfigStreamingAssetsPath", new LuaCSFunction(GetBundlesInfoConfigStreamingAssetsPath));
		L.RegFunction("GetBundlesInfoConfigPersistentDataPath", new LuaCSFunction(GetBundlesInfoConfigPersistentDataPath));
		L.RegFunction("GetBuildVersionConfigStreamingAssetsPath", new LuaCSFunction(GetBuildVersionConfigStreamingAssetsPath));
		L.RegFunction("GetBuildVersionConfigPersistentDataPath", new LuaCSFunction(GetBuildVersionConfigPersistentDataPath));
		L.RegFunction("GetBundlesTableConfigStreamingAssetsPath", new LuaCSFunction(GetBundlesTableConfigStreamingAssetsPath));
		L.RegFunction("GetBundlesTableConfigPersistentDataPath", new LuaCSFunction(GetBundlesTableConfigPersistentDataPath));
		L.RegFunction("GetAppConfigJSONPath", new LuaCSFunction(GetAppConfigJSONPath));
		L.RegFunction("LoadBundlesInfo", new LuaCSFunction(LoadBundlesInfo));
		L.RegFunction("UpdateStorageBundleInfo", new LuaCSFunction(UpdateStorageBundleInfo));
		L.RegFunction("UpdateCDNBundleInfo", new LuaCSFunction(UpdateCDNBundleInfo));
		L.RegFunction("CompareCDNBuildVersion", new LuaCSFunction(CompareCDNBuildVersion));
		L.RegFunction("CompareFiles", new LuaCSFunction(CompareFiles));
		L.RegFunction("DownloadFilesByBundleInfo", new LuaCSFunction(DownloadFilesByBundleInfo));
		L.RegFunction("GetBundleInfo", new LuaCSFunction(GetBundleInfo));
		L.RegFunction("HasBundleInfoOnStorage", new LuaCSFunction(HasBundleInfoOnStorage));
		L.RegFunction("WriteBundlesInfoToFilesTxt", new LuaCSFunction(WriteBundlesInfoToFilesTxt));
		L.RegFunction("OnTick", new LuaCSFunction(OnTick));
		L.RegFunction("OnLateTick", new LuaCSFunction(OnLateTick));
		L.RegFunction("SetWriteBundleInfoDirty", new LuaCSFunction(SetWriteBundleInfoDirty));
		L.RegFunction("WriteBundleToStorageAndUpdateBundleInfo", new LuaCSFunction(WriteBundleToStorageAndUpdateBundleInfo));
		L.RegFunction("CopyFile", new LuaCSFunction(CopyFile));
		L.RegFunction("CopyFiles", new LuaCSFunction(CopyFiles));
		L.RegFunction("New", new LuaCSFunction(_CreateGear_GFileManager));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("cdnBuildVersion", new LuaCSFunction(get_cdnBuildVersion), new LuaCSFunction(set_cdnBuildVersion));
		L.RegVar("FILENAME_FILES_TXT", new LuaCSFunction(get_FILENAME_FILES_TXT), null);
		L.RegVar("FILENAME_BUILDVERSION_TXT", new LuaCSFunction(get_FILENAME_BUILDVERSION_TXT), null);
		L.RegVar("FILENAME_BUNDLESTABLE_TXT", new LuaCSFunction(get_FILENAME_BUNDLESTABLE_TXT), null);
		L.RegVar("FILENAME_APPCONFIG_JSON", new LuaCSFunction(get_FILENAME_APPCONFIG_JSON), null);
		L.RegVar("StorageBundlesInfo", new LuaCSFunction(get_StorageBundlesInfo), new LuaCSFunction(set_StorageBundlesInfo));
		L.RegVar("CDNBundlesInfo", new LuaCSFunction(get_CDNBundlesInfo), new LuaCSFunction(set_CDNBundlesInfo));
		L.RegFunction("OnCompareCDNBuildVersionResult", new LuaCSFunction(Gear_GFileManager_OnCompareCDNBuildVersionResult));
		L.RegFunction("OnErrorDelegate", new LuaCSFunction(Gear_GFileManager_OnErrorDelegate));
		L.RegFunction("OnCompareCDNResult", new LuaCSFunction(Gear_GFileManager_OnCompareCDNResult));
		L.RegFunction("OnLoadQueueProgressDelegate", new LuaCSFunction(Gear_GFileManager_OnLoadQueueProgressDelegate));
		L.RegFunction("OnLoadQueueCompleteDelegate", new LuaCSFunction(Gear_GFileManager_OnLoadQueueCompleteDelegate));
		L.RegFunction("OnCompleteDelegate", new LuaCSFunction(Gear_GFileManager_OnCompleteDelegate));
		L.RegFunction("OnItemCompleteDelegate", new LuaCSFunction(Gear_GFileManager_OnItemCompleteDelegate));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGear_GFileManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Gear.GFileManager obj = new Gear.GFileManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Gear.GFileManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Gear.GFileManager o = Gear.GFileManager.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBundlesInfoConfigStreamingAssetsPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string o = obj.GetBundlesInfoConfigStreamingAssetsPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBundlesInfoConfigPersistentDataPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string o = obj.GetBundlesInfoConfigPersistentDataPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuildVersionConfigStreamingAssetsPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string o = obj.GetBuildVersionConfigStreamingAssetsPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuildVersionConfigPersistentDataPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string o = obj.GetBuildVersionConfigPersistentDataPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBundlesTableConfigStreamingAssetsPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string o = obj.GetBundlesTableConfigStreamingAssetsPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBundlesTableConfigPersistentDataPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string o = obj.GetBundlesTableConfigPersistentDataPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAppConfigJSONPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string o = obj.GetAppConfigJSONPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBundlesInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			obj.LoadBundlesInfo();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateStorageBundleInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			Gear.GFileBundleInfo arg0 = (Gear.GFileBundleInfo)ToLua.CheckObject<Gear.GFileBundleInfo>(L, 2);
			obj.UpdateStorageBundleInfo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateCDNBundleInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			Gear.GFileBundleInfo arg0 = (Gear.GFileBundleInfo)ToLua.CheckObject<Gear.GFileBundleInfo>(L, 2);
			obj.UpdateCDNBundleInfo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareCDNBuildVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Gear.GFileManager.OnCompareCDNBuildVersionResult arg1 = (Gear.GFileManager.OnCompareCDNBuildVersionResult)ToLua.CheckDelegate<Gear.GFileManager.OnCompareCDNBuildVersionResult>(L, 3);
			Gear.GFileManager.OnErrorDelegate arg2 = (Gear.GFileManager.OnErrorDelegate)ToLua.CheckDelegate<Gear.GFileManager.OnErrorDelegate>(L, 4);
			obj.CompareCDNBuildVersion(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareFiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			Gear.GFileManager.OnCompareCDNResult arg2 = (Gear.GFileManager.OnCompareCDNResult)ToLua.CheckDelegate<Gear.GFileManager.OnCompareCDNResult>(L, 4);
			obj.CompareFiles(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownloadFilesByBundleInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Gear.GFileBundleInfo[] arg1 = ToLua.CheckObjectArray<Gear.GFileBundleInfo>(L, 3);
			Gear.GFileManager.OnLoadQueueProgressDelegate arg2 = (Gear.GFileManager.OnLoadQueueProgressDelegate)ToLua.CheckDelegate<Gear.GFileManager.OnLoadQueueProgressDelegate>(L, 4);
			Gear.GFileManager.OnLoadQueueCompleteDelegate arg3 = (Gear.GFileManager.OnLoadQueueCompleteDelegate)ToLua.CheckDelegate<Gear.GFileManager.OnLoadQueueCompleteDelegate>(L, 5);
			obj.DownloadFilesByBundleInfo(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBundleInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Gear.GFileBundleInfo o = obj.GetBundleInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasBundleInfoOnStorage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasBundleInfoOnStorage(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBundlesInfoToFilesTxt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			obj.WriteBundlesInfoToFilesTxt();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			obj.OnTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLateTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			obj.OnLateTick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWriteBundleInfoDirty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			obj.SetWriteBundleInfoDirty();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBundleToStorageAndUpdateBundleInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			GAssetBundleLoader arg1 = (GAssetBundleLoader)ToLua.CheckObject<GAssetBundleLoader>(L, 3);
			obj.WriteBundleToStorageAndUpdateBundleInfo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.CopyFile(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				Gear.GFileManager.OnCompleteDelegate arg2 = (Gear.GFileManager.OnCompleteDelegate)ToLua.CheckDelegate<Gear.GFileManager.OnCompleteDelegate>(L, 4);
				obj.CopyFile(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Gear.GFileManager.CopyFile");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyFiles(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
				string[] arg0 = ToLua.CheckStringArray(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.CopyFiles(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
				string[] arg0 = ToLua.CheckStringArray(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				Gear.GFileManager.OnCompleteDelegate arg2 = (Gear.GFileManager.OnCompleteDelegate)ToLua.CheckDelegate<Gear.GFileManager.OnCompleteDelegate>(L, 4);
				obj.CopyFiles(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Gear.GFileManager obj = (Gear.GFileManager)ToLua.CheckObject<Gear.GFileManager>(L, 1);
				string[] arg0 = ToLua.CheckStringArray(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				Gear.GFileManager.OnCompleteDelegate arg2 = (Gear.GFileManager.OnCompleteDelegate)ToLua.CheckDelegate<Gear.GFileManager.OnCompleteDelegate>(L, 4);
				Gear.GFileManager.OnItemCompleteDelegate arg3 = (Gear.GFileManager.OnItemCompleteDelegate)ToLua.CheckDelegate<Gear.GFileManager.OnItemCompleteDelegate>(L, 5);
				obj.CopyFiles(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Gear.GFileManager.CopyFiles");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cdnBuildVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)o;
			string ret = obj.cdnBuildVersion;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cdnBuildVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FILENAME_FILES_TXT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Gear.GFileManager.FILENAME_FILES_TXT);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FILENAME_BUILDVERSION_TXT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Gear.GFileManager.FILENAME_BUILDVERSION_TXT);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FILENAME_BUNDLESTABLE_TXT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Gear.GFileManager.FILENAME_BUNDLESTABLE_TXT);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FILENAME_APPCONFIG_JSON(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Gear.GFileManager.FILENAME_APPCONFIG_JSON);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StorageBundlesInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)o;
			System.Collections.Generic.Dictionary<string,Gear.GFileBundleInfo> ret = obj.StorageBundlesInfo;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StorageBundlesInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CDNBundlesInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)o;
			System.Collections.Generic.Dictionary<string,Gear.GFileBundleInfo> ret = obj.CDNBundlesInfo;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CDNBundlesInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cdnBuildVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.cdnBuildVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cdnBuildVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StorageBundlesInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)o;
			System.Collections.Generic.Dictionary<string,Gear.GFileBundleInfo> arg0 = (System.Collections.Generic.Dictionary<string,Gear.GFileBundleInfo>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.Dictionary<string,Gear.GFileBundleInfo>>.type);
			obj.StorageBundlesInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StorageBundlesInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CDNBundlesInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Gear.GFileManager obj = (Gear.GFileManager)o;
			System.Collections.Generic.Dictionary<string,Gear.GFileBundleInfo> arg0 = (System.Collections.Generic.Dictionary<string,Gear.GFileBundleInfo>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.Dictionary<string,Gear.GFileBundleInfo>>.type);
			obj.CDNBundlesInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CDNBundlesInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Gear_GFileManager_OnCompareCDNBuildVersionResult(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnCompareCDNBuildVersionResult>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnCompareCDNBuildVersionResult>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Gear_GFileManager_OnErrorDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnErrorDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnErrorDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Gear_GFileManager_OnCompareCDNResult(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnCompareCDNResult>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnCompareCDNResult>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Gear_GFileManager_OnLoadQueueProgressDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnLoadQueueProgressDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnLoadQueueProgressDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Gear_GFileManager_OnLoadQueueCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnLoadQueueCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnLoadQueueCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Gear_GFileManager_OnCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Gear_GFileManager_OnItemCompleteDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnItemCompleteDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Gear.GFileManager.OnItemCompleteDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

