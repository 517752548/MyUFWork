//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIRootWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIRoot), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("SetUICameraOrthographicSize", new LuaCSFunction(SetUICameraOrthographicSize));
		L.RegFunction("SetCanvasScalerReferenceResolution", new LuaCSFunction(SetCanvasScalerReferenceResolution));
		L.RegFunction("GetStage", new LuaCSFunction(GetStage));
		L.RegFunction("GetStageCamera", new LuaCSFunction(GetStageCamera));
		L.RegFunction("GetScreenFullSizeDelta", new LuaCSFunction(GetScreenFullSizeDelta));
		L.RegFunction("GetUIReferenceResolution", new LuaCSFunction(GetUIReferenceResolution));
		L.RegFunction("GetCanvasFullSize", new LuaCSFunction(GetCanvasFullSize));
		L.RegFunction("GetCanvasSafeSize", new LuaCSFunction(GetCanvasSafeSize));
		L.RegFunction("UpdateScreenSize", new LuaCSFunction(UpdateScreenSize));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegFunction("OnChangeScreenSizeComplete", new LuaCSFunction(UIRoot_OnChangeScreenSizeComplete));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUICameraOrthographicSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetUICameraOrthographicSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCanvasScalerReferenceResolution(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.SetCanvasScalerReferenceResolution(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
			UnityEngine.Transform o = obj.GetStage();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStageCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
			UnityEngine.Camera o = obj.GetStageCamera();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetScreenFullSizeDelta(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
			UnityEngine.Vector2 o = obj.GetScreenFullSizeDelta();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIReferenceResolution(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
			UnityEngine.Vector2 o = obj.GetUIReferenceResolution();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCanvasFullSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
			UnityEngine.Vector2 o = obj.GetCanvasFullSize();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCanvasSafeSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
			UnityEngine.Vector2 o = obj.GetCanvasSafeSize();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateScreenSize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
				obj.UpdateScreenSize();
				return 0;
			}
			else if (count == 2)
			{
				UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				obj.UpdateScreenSize(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UIRoot obj = (UIRoot)ToLua.CheckObject<UIRoot>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				UIRoot.OnChangeScreenSizeComplete arg1 = (UIRoot.OnChangeScreenSizeComplete)ToLua.CheckDelegate<UIRoot.OnChangeScreenSizeComplete>(L, 3);
				obj.UpdateScreenSize(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIRoot.UpdateScreenSize");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UIRoot_OnChangeScreenSizeComplete(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UIRoot.OnChangeScreenSizeComplete>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UIRoot.OnChangeScreenSizeComplete>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

