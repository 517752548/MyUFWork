//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HUDManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HUDManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("UpdateSceneCamera", new LuaCSFunction(UpdateSceneCamera));
		L.RegFunction("CreateSkipMesh", new LuaCSFunction(CreateSkipMesh));
		L.RegFunction("CreateBloodMesh", new LuaCSFunction(CreateBloodMesh));
		L.RegFunction("CreateTextMesh", new LuaCSFunction(CreateTextMesh));
		L.RegFunction("SetEnabled", new LuaCSFunction(SetEnabled));
		L.RegFunction("Destroy", new LuaCSFunction(Destroy));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("Camera", new LuaCSFunction(get_Camera), null);
		L.RegVar("SkipMesh", new LuaCSFunction(get_SkipMesh), null);
		L.RegVar("BloodMesh", new LuaCSFunction(get_BloodMesh), null);
		L.RegVar("TextMesh", new LuaCSFunction(get_TextMesh), null);
		L.RegVar("SceneCamera", new LuaCSFunction(get_SceneCamera), null);
		L.RegFunction("OnCreateMeshComplete", new LuaCSFunction(HUDManager_OnCreateMeshComplete));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateSceneCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDManager obj = (HUDManager)ToLua.CheckObject<HUDManager>(L, 1);
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 2);
			obj.UpdateSceneCamera(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateSkipMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				HUDManager obj = (HUDManager)ToLua.CheckObject<HUDManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.CreateSkipMesh(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				HUDManager obj = (HUDManager)ToLua.CheckObject<HUDManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				HUDManager.OnCreateMeshComplete arg2 = (HUDManager.OnCreateMeshComplete)ToLua.CheckDelegate<HUDManager.OnCreateMeshComplete>(L, 4);
				obj.CreateSkipMesh(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HUDManager.CreateSkipMesh");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateBloodMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				HUDManager obj = (HUDManager)ToLua.CheckObject<HUDManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.CreateBloodMesh(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				HUDManager obj = (HUDManager)ToLua.CheckObject<HUDManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				HUDManager.OnCreateMeshComplete arg2 = (HUDManager.OnCreateMeshComplete)ToLua.CheckDelegate<HUDManager.OnCreateMeshComplete>(L, 4);
				obj.CreateBloodMesh(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HUDManager.CreateBloodMesh");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTextMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				HUDManager obj = (HUDManager)ToLua.CheckObject<HUDManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.CreateTextMesh(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				HUDManager obj = (HUDManager)ToLua.CheckObject<HUDManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				HUDManager.OnCreateMeshComplete arg2 = (HUDManager.OnCreateMeshComplete)ToLua.CheckDelegate<HUDManager.OnCreateMeshComplete>(L, 4);
				obj.CreateTextMesh(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HUDManager.CreateTextMesh");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HUDManager obj = (HUDManager)ToLua.CheckObject<HUDManager>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HUDManager obj = (HUDManager)ToLua.CheckObject<HUDManager>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Camera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDManager obj = (HUDManager)o;
			UnityEngine.Camera ret = obj.Camera;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Camera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SkipMesh(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDManager obj = (HUDManager)o;
			HUDBaseMesh ret = obj.SkipMesh;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SkipMesh on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BloodMesh(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDManager obj = (HUDManager)o;
			HUDBaseMesh ret = obj.BloodMesh;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BloodMesh on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TextMesh(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDManager obj = (HUDManager)o;
			HUDBaseMesh ret = obj.TextMesh;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TextMesh on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SceneCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HUDManager obj = (HUDManager)o;
			UnityEngine.Camera ret = obj.SceneCamera;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SceneCamera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HUDManager_OnCreateMeshComplete(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<HUDManager.OnCreateMeshComplete>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<HUDManager.OnCreateMeshComplete>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

