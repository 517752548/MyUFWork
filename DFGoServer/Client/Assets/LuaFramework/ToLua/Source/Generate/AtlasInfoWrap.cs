//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AtlasInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AtlasInfo), typeof(System.Object));
		L.RegFunction("AddSprites", new LuaCSFunction(AddSprites));
		L.RegFunction("GetSpriteMap", new LuaCSFunction(GetSpriteMap));
		L.RegFunction("GetSprites", new LuaCSFunction(GetSprites));
		L.RegFunction("GetSpriteNum", new LuaCSFunction(GetSpriteNum));
		L.RegFunction("GetSprite", new LuaCSFunction(GetSprite));
		L.RegFunction("New", new LuaCSFunction(_CreateAtlasInfo));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("texturePath", new LuaCSFunction(get_texturePath), new LuaCSFunction(set_texturePath));
		L.RegVar("texture", new LuaCSFunction(get_texture), new LuaCSFunction(set_texture));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAtlasInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				AtlasInfo obj = new AtlasInfo();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: AtlasInfo.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSprites(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AtlasInfo obj = (AtlasInfo)ToLua.CheckObject<AtlasInfo>(L, 1);
			UnityEngine.Sprite[] arg0 = ToLua.CheckObjectArray<UnityEngine.Sprite>(L, 2);
			obj.AddSprites(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSpriteMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AtlasInfo obj = (AtlasInfo)ToLua.CheckObject<AtlasInfo>(L, 1);
			System.Collections.Generic.Dictionary<string,UnityEngine.Sprite> o = obj.GetSpriteMap();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprites(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AtlasInfo obj = (AtlasInfo)ToLua.CheckObject<AtlasInfo>(L, 1);
			UnityEngine.Sprite[] o = obj.GetSprites();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSpriteNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AtlasInfo obj = (AtlasInfo)ToLua.CheckObject<AtlasInfo>(L, 1);
			int o = obj.GetSpriteNum();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AtlasInfo obj = (AtlasInfo)ToLua.CheckObject<AtlasInfo>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Sprite o = obj.GetSprite(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_texturePath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AtlasInfo obj = (AtlasInfo)o;
			string ret = obj.texturePath;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texturePath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_texture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AtlasInfo obj = (AtlasInfo)o;
			UnityEngine.Texture2D ret = obj.texture;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_texturePath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AtlasInfo obj = (AtlasInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.texturePath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texturePath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_texture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AtlasInfo obj = (AtlasInfo)o;
			UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.CheckObject<UnityEngine.Texture2D>(L, 2);
			obj.texture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texture on a nil value");
		}
	}
}

