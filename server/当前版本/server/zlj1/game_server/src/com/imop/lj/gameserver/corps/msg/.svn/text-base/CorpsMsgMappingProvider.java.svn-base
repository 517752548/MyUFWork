package com.imop.lj.gameserver.corps.msg;

import java.util.HashMap;
import java.util.Map;

import com.imop.lj.core.msg.MessageType;
import com.imop.lj.common.MessageMappingProvider;

/**
 *  Generated by MessageCodeGenerator,don't modify please.
 *  Need to register in<code>GameMessageRecognizer#init</code>
 */
public class CorpsMsgMappingProvider implements MessageMappingProvider {

	@Override
	public Map<Short, Class<?>> getMessageMapping() {
		Map<Short, Class<?>> map = new HashMap<Short, Class<?>>();
		map.put(MessageType.CG_CLICK_CORPS_PANEL, CGClickCorpsPanel.class);
		map.put(MessageType.CG_SEARCH_CORPS, CGSearchCorps.class);
		map.put(MessageType.CG_CORPS_PAGE_SKIP, CGCorpsPageSkip.class);
		map.put(MessageType.CG_CLICK_CORPS_FUNCTION, CGClickCorpsFunction.class);
		map.put(MessageType.CG_CLICK_CORPS_MEMBER_FUNCTION, CGClickCorpsMemberFunction.class);
		map.put(MessageType.CG_CREATE_CORPS, CGCreateCorps.class);
		map.put(MessageType.CG_OPEN_CORPS_PANEL, CGOpenCorpsPanel.class);
		map.put(MessageType.CG_CORPS_DONATE, CGCorpsDonate.class);
		map.put(MessageType.CG_CORPS_NOTICE_UPDATE, CGCorpsNoticeUpdate.class);
		map.put(MessageType.CG_OPEN_CORPS_MEMBER_LIST, CGOpenCorpsMemberList.class);
		map.put(MessageType.CG_OPEN_CORPS_STORAGE, CGOpenCorpsStorage.class);
		map.put(MessageType.CG_ALLOCATION_ITEM, CGAllocationItem.class);
		map.put(MessageType.CG_CORPS_ADD_TO_FRIEND, CGCorpsAddToFriend.class);
		map.put(MessageType.CG_CORPS_BATCH_FIRE_MEMBER, CGCorpsBatchFireMember.class);
		map.put(MessageType.CG_CORPS_BATCH_ADD_APPLY_MEMBER, CGCorpsBatchAddApplyMember.class);
		map.put(MessageType.CG_CORPS_MEMBER_INFO, CGCorpsMemberInfo.class);
		map.put(MessageType.CG_CORPS_QUICK_APPLY, CGCorpsQuickApply.class);
		map.put(MessageType.CG_ENTER_CORPSWAR, CGEnterCorpswar.class);
		map.put(MessageType.CG_CORPSWAR_INFO, CGCorpswarInfo.class);
		map.put(MessageType.CG_LEAVE_CORPSWAR, CGLeaveCorpswar.class);
		map.put(MessageType.CG_CORPSWAR_RANK_LIST, CGCorpswarRankList.class);
		map.put(MessageType.CG_BACK_CORPS_MAP, CGBackCorpsMap.class);
		map.put(MessageType.CG_OPEN_CORPS_BUILDING_PANEL, CGOpenCorpsBuildingPanel.class);
		map.put(MessageType.CG_UPGRADE_CORPS, CGUpgradeCorps.class);
		map.put(MessageType.CG_OPEN_CORPS_BENIFIT_PANEL, CGOpenCorpsBenifitPanel.class);
		map.put(MessageType.CG_GET_BENIFIT, CGGetBenifit.class);
		map.put(MessageType.CG_OPEN_CORPS_CULTIVATE_PANEL, CGOpenCorpsCultivatePanel.class);
		map.put(MessageType.CG_CULTIVATE_SKILL, CGCultivateSkill.class);
		map.put(MessageType.CG_OPEN_CORPS_ASSIST_PANEL, CGOpenCorpsAssistPanel.class);
		map.put(MessageType.CG_LEARN_ASSIST_SKILL, CGLearnAssistSkill.class);
		map.put(MessageType.CG_MAKE_ITEM, CGMakeItem.class);
		map.put(MessageType.CG_OPEN_CORPS_RED_ENVELOPE_PANEL, CGOpenCorpsRedEnvelopePanel.class);
		map.put(MessageType.CG_CREATE_CORPS_RED_ENVELOPE, CGCreateCorpsRedEnvelope.class);
		map.put(MessageType.CG_GOT_CORPS_RED_ENVELOPE, CGGotCorpsRedEnvelope.class);
		map.put(MessageType.CG_LOOK_CORPS_RED_ENVELOPE, CGLookCorpsRedEnvelope.class);
		map.put(MessageType.CG_OPEN_ALLOCATE_PANEL, CGOpenAllocatePanel.class);
		map.put(MessageType.CG_ALLOCATE_ACTIVITY_ITEM, CGAllocateActivityItem.class);
		return map;
	}

}
