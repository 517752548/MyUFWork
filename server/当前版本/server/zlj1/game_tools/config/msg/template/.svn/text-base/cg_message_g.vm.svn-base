#macro( smallType $type)
#if($type == "Short")short#elseif( $type == "Integer" )int#elseif( $type == "Byte" )byte#elseif( $type == "Long" )long#elseif( $type == "Float" )float#elseif( $type == "Double" )double#elseif( $type == "Boolean" )boolean#else$type#end
#end
#macro( upperFirstChar $type)$type.substring(0,1).toUpperCase()$type.substring(1)#end
#macro( lowerFirstChar $type)$type.substring(0,1).toLowerCase()$type.substring(1)#end
#set($packageName = "com.imop.lj.gameserver."+$message.module+".msg")
package $packageName;

import com.imop.lj.core.msg.MessageType;
import com.imop.lj.gameserver.common.msg.CGMessage;
import com.imop.lj.gameserver.${message.module}.handler.#upperFirstChar($message.module)HandlerFactory;
#if ($message.friendQueue)
import com.imop.lj.gameserver.common.msg.FriendMessage;
#end
#if ($message.guildQueue)
import com.imop.lj.gameserver.common.msg.GuildMsg;
#end

/**
 * $message.comment
 * 
 * @author CodeGenerator, don't modify this file please.
 */
public class ${message.className} extends CGMessage#if($message.friendQueue) implements FriendMessage#elseif($message.guildQueue) implements GuildMsg#end{
	
#foreach( $field in $list )
	/** ${field.comment} */
#if ($field.list) 
	private #smallType($field.type)[] ${field.smallName};
#else
	private #smallType($field.type) $field.smallName;
#end
#end	
	
	public $message.className (){
	}
	
#if ($message.fieldSize>0)
	public $message.className (
#foreach( $field in $list )
#if ($field.list) 
			#smallType($field.type)[] ${field.smallName}#if($velocityCount != $list.size()),
#end	
#else
			#smallType($field.type) $field.smallName#if($velocityCount != $list.size()),
#end	
#end
#end ){
#foreach( $field in $list )
			this.${field.smallName} = ${field.smallName};
#end		
	}
#end
	
	@Override
	protected boolean readImpl() {
${message.fieldJavaReadContent}

#foreach( $field in $list )
			this.${field.smallName} = _${field.smallName};
#end
		return true;
	}
	
	@Override
	protected boolean writeImpl() {
${message.fieldJavaWriteContent}
		return true;
	}
	
	@Override
	public short getType() {
		return MessageType.$message.type;
	}
	
	@Override
	public String getTypeName() {
		return "$message.type";
	}
#foreach( $field in $list )
#if ($field.list)

	public #smallType($field.type)[] get${field.bigName}(){
		return ${field.smallName};
	}

	public void set${field.bigName}(#smallType($field.type)[] ${field.smallName}){
		this.${field.smallName} = ${field.smallName};
	}	
#if ($field.needCreateType)
	
	public static class $field.type{
#foreach( $subfield in $field.subFields )
		/** ${subfield.comment} */
		private #smallType($subfield.type) $subfield.smallName;
#end	

		public $field.type (){}

		public $field.type (
#foreach( $subfield in $field.subFields )
			#smallType($subfield.type) $subfield.smallName#if($velocityCount != $field.subFields.size()),
#end	
#end	 ){
#foreach( $subfield in $field.subFields )
			this.${subfield.smallName} = ${subfield.smallName};
#end	
		}
 #foreach( $subfield in $field.subFields )
 
		public #smallType(${subfield.type}) get${subfield.bigName}(){
			return ${subfield.smallName};
		}
			
		public void set${subfield.bigName}(#smallType(${subfield.type}) ${subfield.smallName}){
			this.${subfield.smallName} = ${subfield.smallName};
		}
#end
	}
#end	
#else

	public #smallType(${field.type}) get${field.bigName}(){
		return ${field.smallName};
	}
		
	public void set${field.bigName}(#smallType(${field.type}) ${field.smallName}){
		this.${field.smallName} = ${field.smallName};
	}
#end
#end

#if($message.compress)
	public boolean isCompress() {
		return true;
	}
#end

	@Override
	public void execute() {
		#upperFirstChar($message.module)HandlerFactory.getHandler().${message.handleMethodName}(this.getSession().getPlayer(), this);
	}
}