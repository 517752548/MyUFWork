#macro( smallType $type)
#if($type == "Byte")int#elseif( $type == "Boolean" )int#elseif( $type == "Short" )int#elseif( $type == "Integer" )int#elseif( $type == "Long" )Long#elseif( $type == "Float" )Number#elseif( $type == "Double" )Number#else$type#end
#end
#macro( bigType $type)
#if( $type == "Integer" )Int#elseif( $type == "Boolean" )Byte#elseif( $type == "String" )UTF#else$type#end
#end
#macro( upperFirstChar $type)$type.substring(0,1).toUpperCase()$type.substring(1)#end
package com.renren.framework.net.message.c2s {
	import flash.utils.ByteArray;
	import com.renren.framework.net.MessageType;
	import com.renren.framework.net.message.data.*;
	import com.renren.framework.net.core.GameConnection;
	import com.renren.framework.utils.Long;
	
#if($constants.size()>0)
	/**
	 * 常量定义：
#foreach( $constant in $constants )
	 *	【$constant.name】$constant.desc
#end	
	 */
#end
	public class ${module}CGMessage{
		public static var msgBody:ByteArray = new ByteArray();
#foreach( $msg in $msgs )
 
 		/**
		 * $msg.comment
#foreach( $field in $msg.fields )
		 * @param $field.smallName $field.comment
#end
		 */
		public static function ${msg.type}(#foreach( $field in $msg.fields )${field.smallName}:#if ($field.list)Array#else#if($field.isNewType)${field.clientType}#else#smallType($field.type)#end#end#if($velocityCount != $msg.fields.size()),#end#end):void {
				msgBody.length = 0;
${msg.fieldAsContent}
			GameConnection.sendMessages(MessageType.${msg.type},msgBody);
		}
#end
	}
}