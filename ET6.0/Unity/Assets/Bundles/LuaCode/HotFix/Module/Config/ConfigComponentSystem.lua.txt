-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("ConfigAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      ET.ConfigComponent.Instance = self
      ET.ConfigComponentSystem.Awake(self)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.ConfigComponent)
        }
      end,
      Awake = Awake
    }
  end)

  namespace.class("ConfigLoadSystem", function (namespace)
    local Load
    Load = function (this, self)
      ET.ConfigComponentSystem.Load(self)
    end
    return {
      base = function (out)
        return {
          out.ET.LoadSystem_1(out.ET.ConfigComponent)
        }
      end,
      Load = Load
    }
  end)


  namespace.class("ConfigDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      ET.ConfigComponent.Instance = nil
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.ConfigComponent)
        }
      end,
      Destroy = Destroy
    }
  end)

  namespace.class("ConfigComponentSystem", function (namespace)
    local Awake, Load
    Awake = function (self)
      Load(self)
    end
    Load = function (self)
      self.AllConfig:Clear()
      local types = ET.Game.getEventSystem():GetTypes(System.typeof(ET.ConfigAttribute))

      for _, type in System.each(types) do
        local obj = System.Activator.CreateInstance(type)

        local iCategory = System.as(obj, ET.ACategory)
        if iCategory == nil then
          System.throw(System.Exception("class: " .. type:getName() .. " not inherit from ACategory"))
        end
        iCategory:BeginInit()
        iCategory:EndInit()

        self.AllConfig:set(iCategory:getConfigType(), iCategory)
      end
    end
    return {
      Awake = Awake,
      Load = Load
    }
  end)
end)
