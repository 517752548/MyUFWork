-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local UnityEngine = UnityEngine
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("TurnComponentUpdateSystem", function (namespace)
    local Update
    Update = function (this, self)
      ET.TurnComponentSystem.Update(self)
    end
    return {
      base = function (out)
        return {
          out.ET.UpdateSystem_1(out.ET.TurnComponent)
        }
      end,
      Update = Update
    }
  end)

  namespace.class("TurnComponentSystem", function (namespace)
    local Update, UpdateTurn, Turn2D, Turn, Turn1, Turn2, TurnImmediately, TurnImmediately1, 
    TurnImmediately2
    Update = function (self)
      UpdateTurn(self)
    end
    UpdateTurn = function (self)
      --Log.Debug($"update turn: {this.t} {this.TurnTime}");
      if self.t > self.TurnTime then
        return
      end

      self.t = self.t + UnityEngine.Time.getdeltaTime()

      local v = UnityEngine.Quaternion.Slerp(self.From, self.To, self.t / self.TurnTime)
      self:GetParent(ET.Unit):setRotation(v)
    end
    -- <summary>
    -- 改变Unit的朝向
    -- </summary>
    Turn2D = function (self, dir, turnTime)
      local nexpos = UnityEngine.Vector3.op_Addition(self:GetParent(ET.Unit).GameObject:gettransform():getposition(), dir)
      Turn(self, nexpos:__clone__(), turnTime)
    end
    -- <summary>
    -- 改变Unit的朝向
    -- </summary>
    Turn = function (self, target, turnTime)
      local quaternion = ET.PositionHelper.GetVector3ToQuaternion(self:GetParent(ET.Unit):getPosition(), target)

      self.To = quaternion
      self.From = self:GetParent(ET.Unit):getRotation()
      self.t = 0
      self.TurnTime = turnTime
    end
    -- <summary>
    -- 改变Unit的朝向
    -- </summary>
    Turn1 = function (self, angle, turnTime)
      local quaternion = ET.PositionHelper.GetAngleToQuaternion(angle)

      self.To = quaternion
      self.From = self:GetParent(ET.Unit):getRotation()
      self.t = 0
      self.TurnTime = turnTime
    end
    Turn2 = function (self, quaternion, turnTime)
      self.To = quaternion
      self.From = self:GetParent(ET.Unit):getRotation()
      self.t = 0
      self.TurnTime = turnTime
    end
    TurnImmediately = function (self, quaternion)
      self:GetParent(ET.Unit):setRotation(quaternion)
    end
    TurnImmediately1 = function (self, target)
      local nowPos = self:GetParent(ET.Unit):getPosition()
      if UnityEngine.Vector3.op_Equality(nowPos, target) then
        return
      end

      local quaternion = ET.PositionHelper.GetVector3ToQuaternion(self:GetParent(ET.Unit):getPosition(), target)
      self:GetParent(ET.Unit):setRotation(quaternion)
    end
    TurnImmediately2 = function (self, angle)
      local quaternion = ET.PositionHelper.GetAngleToQuaternion(angle)
      self:GetParent(ET.Unit):setRotation(quaternion)
    end
    return {
      Update = Update,
      Turn2D = Turn2D,
      Turn = Turn,
      Turn1 = Turn1,
      Turn2 = Turn2,
      TurnImmediately = TurnImmediately,
      TurnImmediately1 = TurnImmediately1,
      TurnImmediately2 = TurnImmediately2
    }
  end)
end)
