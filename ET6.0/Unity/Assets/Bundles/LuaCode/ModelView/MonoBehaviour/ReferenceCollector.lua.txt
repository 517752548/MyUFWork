-- Generated by CSharp.lua Compiler
--Object并非C#基础中的Object，而是 UnityEngine.Object
--使其能在Inspector面板显示，并且可以被赋予相应值
local System = System
local UnityEngine = UnityEngine
local DictStringObject = System.Dictionary(System.String, UnityEngine.Object)
local ListReferenceCollectorData
System.import(function (out)
  ListReferenceCollectorData = System.List(ReferenceCollectorData)
end)
System.namespace("", function (namespace)
  namespace.class("ReferenceCollectorData", function (namespace)
    return {
      __metadata__ = function (out)
        return {
          fields = {
            { "gameObject", 0x6, out.UnityEngine.Object },
            { "key", 0x6, System.String }
          },
          class = { 0x6, System.SerializableAttribute() }
        }
      end
    }
  end)
end)
--继承IComparer对比器，Ordinal会使用序号排序规则比较字符串，因为是byte级别的比较，所以准确性和性能都不错
System.namespace("", function (namespace)
  namespace.class("ReferenceCollectorDataComparer", function (namespace)
    local Compare
    Compare = function (this, x, y)
      return System.String.Compare(x.key, y.key, System.StringComparison.Ordinal)
    end
    return {
      base = function (out)
        return {
          System.IComparer_1(out.ReferenceCollectorData)
        }
      end,
      Compare = Compare
    }
  end)
end)
--继承ISerializationCallbackReceiver后会增加OnAfterDeserialize和OnBeforeSerialize两个回调函数，如果有需要可以在对需要序列化的东西进行操作
--ET在这里主要是在OnAfterDeserialize回调函数中将data中存储的ReferenceCollectorData转换为dict中的Object，方便之后的使用
--注意UNITY_EDITOR宏定义，在编译以后，部分编辑器相关函数并不存在
System.namespace("", function (namespace)
  namespace.class("ReferenceCollector", function (namespace)
    local Get, GetObject, OnBeforeSerialize, OnAfterDeserialize, __ctor__
    __ctor__ = function (this)
      this.data = ListReferenceCollectorData()
      this.dict = DictStringObject()
      UnityEngine.MonoBehaviour.__ctor__(this)
    end
    Get = function (this, key, T)
      local dictGo
      local default
      default, dictGo = this.dict:TryGetValue(key)
      if not default then
        return nil
      end
      return System.as(dictGo, T)
    end
    GetObject = function (this, key)
      local dictGo
      local default
      default, dictGo = this.dict:TryGetValue(key)
      if not default then
        return nil
      end
      return dictGo
    end
    OnBeforeSerialize = function (this)
    end
    OnAfterDeserialize = function (this)
      this.dict:Clear()
      for _, referenceCollectorData in System.each(this.data) do
        if not this.dict:ContainsKey(referenceCollectorData.key) then
          this.dict:AddKeyValue(referenceCollectorData.key, referenceCollectorData.gameObject)
        end
      end
    end
    return {
      base = function (out)
        return {
          out.UnityEngine.MonoBehaviour,
          out.UnityEngine.ISerializationCallbackReceiver
        }
      end,
      Get = Get,
      GetObject = GetObject,
      OnBeforeSerialize = OnBeforeSerialize,
      OnAfterDeserialize = OnAfterDeserialize,
      __ctor__ = __ctor__
    }
  end)
end)
