-- Generated by CSharp.lua Compiler
local System = System
local SystemConcurrent = System.Collections.Concurrent
local ConcurrentQueue_1Delegate = SystemConcurrent.ConcurrentQueue_1(System.Delegate)
System.namespace("ET", function (namespace)
  namespace.class("OneThreadSynchronizationContext", function (namespace)
    local Instance, Update, Post, class, static, __ctor__
    static = function (this)
      Instance = class()
      this.Instance = Instance
    end
    __ctor__ = function (this)
      this.mainThreadId = System.Thread.getCurrentThread():getManagedThreadId()
      this.queue = ConcurrentQueue_1Delegate()
      System.SynchronizationContext.__ctor__(this)
    end
    Update = function (this)
      while true do
        local default
        default, this.a = this.queue:TryDequeue()
        if not default then
          return
        end
        this.a()
      end
    end
    Post = function (this, callback, state)
      if System.Thread.getCurrentThread():getManagedThreadId() == this.mainThreadId then
        callback(state)
        return
      end

      this.queue:Enqueue(function ()
        callback(state)
      end)
    end
    class = {
      base = function (out)
        return {
          System.SynchronizationContext
        }
      end,
      Update = Update,
      Post = Post,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
