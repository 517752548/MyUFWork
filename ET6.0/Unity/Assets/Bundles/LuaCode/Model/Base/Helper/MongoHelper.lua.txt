-- Generated by CSharp.lua Compiler
local System = System
local MongoDBBson = MongoDB.Bson
local MongoDBBsonIO = MongoDB.Bson.IO
local MongoDBBsonSerialization = MongoDB.Bson.Serialization
local MongoDBConventions = MongoDB.Bson.Serialization.Conventions
local MongoDBSerializers = MongoDB.Bson.Serialization.Serializers
local SystemIO = System.IO
local UnityEngine = UnityEngine
local ListInt32 = System.List(System.Int32)
local ArraySerializer_1Int32 = MongoDBSerializers.ArraySerializer_1(System.Int32)
local ArraySerializer_1Int64 = MongoDBSerializers.ArraySerializer_1(System.Int64)
local ArraySerializer_1String = MongoDBSerializers.ArraySerializer_1(System.String)
local EnumerableInterfaceImplementerSerializer_1ListInt32 = MongoDBSerializers.EnumerableInterfaceImplementerSerializer_1(ListInt32)
local EnumerableInterfaceImplementerSerializer_2ListInt32Int32 = MongoDBSerializers.EnumerableInterfaceImplementerSerializer_2(ListInt32, System.Int32)
local ET
local StructBsonSerialize_1Vector4
local StructBsonSerialize_1Vector2Int
System.import(function (out)
  ET = out.ET
  StructBsonSerialize_1Vector4 = ET.StructBsonSerialize_1(UnityEngine.Vector4)
  StructBsonSerialize_1Vector2Int = ET.StructBsonSerialize_1(UnityEngine.Vector2Int)
end)
System.namespace("ET", function (namespace)
  namespace.class("MongoHelper", function (namespace)
    local Init, ToJson, ToJson1, FromJson, FromJson1, ToBson, ToBson1, FromBson, 
    FromBson1, FromStream, FromBson2, FromBson3, Clone, AvoidAOT, static
    static = function (this)
      -- 自动注册IgnoreExtraElements

      local default = MongoDBConventions.ConventionPack()
      default:Add(MongoDBConventions.IgnoreExtraElementsConvention(true))
      local conventionPack = default

      MongoDBConventions.ConventionRegistry.Register("IgnoreExtraElements", conventionPack, function (type)
        return true
      end)

      local types = System.typeof(ET.Game):getAssembly():GetTypes()

      for _, type in System.each(types) do
        local continue
        repeat
          if not type:IsSubclassOf(System.typeof(ET.Entity)) then
            continue = true
            break
          end

          if type:getIsGenericType() then
            continue = true
            break
          end

          System.try(function ()
            MongoDBBsonSerialization.BsonClassMap.LookupClassMap(type)
          end, function (default)
            local e = default
            ET.Log.Error("11111111111111111: " .. type:getName() .. " " .. System.toString(e))
          end)
          continue = true
        until 1
        if not continue then
          break
        end
      end
      MongoDBBsonSerialization.BsonSerializer.RegisterSerializer(System.typeof(UnityEngine.Vector4), StructBsonSerialize_1Vector4())
      MongoDBBsonSerialization.BsonSerializer.RegisterSerializer(System.typeof(UnityEngine.Vector2Int), StructBsonSerialize_1Vector2Int())
    end
    Init = function ()
      -- 调用这个是为了调用MongoHelper的静态方法
    end
    ToJson = function (obj)
      return MongoDBBson.BsonExtensionMethods.ToJson(obj, nil, nil, nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs), System.Object)
    end
    ToJson1 = function (obj, settings)
      return MongoDBBson.BsonExtensionMethods.ToJson(obj, settings, nil, nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs), System.Object)
    end
    FromJson = function (str, T)
      return MongoDBBsonSerialization.BsonSerializer.Deserialize(str, nil, T)
    end
    FromJson1 = function (type, str)
      return MongoDBBsonSerialization.BsonSerializer.Deserialize(str, type, nil)
    end
    ToBson = function (obj)
      return MongoDBBson.BsonExtensionMethods.ToBson(obj, nil, nil, nil, System.default(MongoDBBsonSerialization.BsonSerializationArgs), System.Object)
    end
    ToBson1 = function (obj, stream)
      System.using(MongoDBBsonIO.BsonBinaryWriter(stream, MongoDBBsonIO.BsonBinaryWriterSettings.getDefaults()), function (bsonWriter)
        local context = MongoDBBsonSerialization.BsonSerializationContext.CreateRoot(bsonWriter)
        local args = System.default(MongoDBBsonSerialization.BsonSerializationArgs)
        args:setNominalType(System.typeof(System.Object))
        local serializer = MongoDBBsonSerialization.BsonSerializer.LookupSerializer(args:getNominalType())
        serializer:Serialize(context, args, obj)
      end)
    end
    FromBson = function (type, bytes)
      return MongoDBBsonSerialization.BsonSerializer.Deserialize(bytes, type, nil)
    end
    FromBson1 = function (type, bytes, index, count)
      local default, extern = System.using(SystemIO.MemoryStream(bytes, index, count), function (memoryStream)
        return true, MongoDBBsonSerialization.BsonSerializer.Deserialize(memoryStream, type, nil)
      end)
      if default then
        return extern
      end
    end
    FromStream = function (type, stream)
      return MongoDBBsonSerialization.BsonSerializer.Deserialize(stream, type, nil)
    end
    FromBson2 = function (bytes, T)
      local default, extern = System.using(SystemIO.MemoryStream(bytes), function (memoryStream)
        return true, System.cast(T, MongoDBBsonSerialization.BsonSerializer.Deserialize(memoryStream, System.typeof(T), nil))
      end)
      if default then
        return extern
      end
    end
    FromBson3 = function (bytes, index, count, T)
      return System.cast(T, FromBson1(System.typeof(T), bytes, index, count))
    end
    Clone = function (t, T)
      return FromBson2(ToBson(t), T)
    end
    AvoidAOT = function ()
      local aint = ArraySerializer_1Int32()
      local astring = ArraySerializer_1String()
      local along = ArraySerializer_1Int64()
      local e = EnumerableInterfaceImplementerSerializer_1ListInt32()
      local elistint = EnumerableInterfaceImplementerSerializer_2ListInt32Int32()
    end
    return {
      Init = Init,
      ToJson = ToJson,
      ToJson1 = ToJson1,
      FromJson = FromJson,
      FromJson1 = FromJson1,
      ToBson = ToBson,
      ToBson1 = ToBson1,
      FromBson = FromBson,
      FromBson1 = FromBson1,
      FromStream = FromStream,
      FromBson2 = FromBson2,
      FromBson3 = FromBson3,
      Clone = Clone,
      AvoidAOT = AvoidAOT,
      static = static
    }
  end)
end)
