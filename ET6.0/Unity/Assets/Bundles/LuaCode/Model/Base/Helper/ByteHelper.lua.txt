-- Generated by CSharp.lua Compiler
local System = System
local SystemText = System.Text
System.namespace("ET", function (namespace)
  namespace.class("ByteHelper", function (namespace)
    local ToHex, ToHex1, ToHex2, ToHex3, ToStr, ToStr1, Utf8ToStr, Utf8ToStr1, 
    WriteTo, WriteTo1, WriteTo2, WriteTo3, WriteTo4
    ToHex = function (b)
      return b:ToString("X2")
    end
    ToHex1 = function (bytes)
      local stringBuilder = System.StringBuilder()
      for _, b in System.each(bytes) do
        stringBuilder:Append(b:ToString("X2"))
      end
      return stringBuilder:ToString()
    end
    ToHex2 = function (bytes, format)
      local stringBuilder = System.StringBuilder()
      for _, b in System.each(bytes) do
        stringBuilder:Append(b:ToString(format))
      end
      return stringBuilder:ToString()
    end
    ToHex3 = function (bytes, offset, count)
      local stringBuilder = System.StringBuilder()
      for i = offset, offset + count - 1 do
        stringBuilder:Append(bytes:get(i):ToString("X2"))
      end
      return stringBuilder:ToString()
    end
    ToStr = function (bytes)
      return SystemText.Encoding.getDefault():GetString(bytes)
    end
    ToStr1 = function (bytes, index, count)
      return SystemText.Encoding.getDefault():GetString(bytes, index, count)
    end
    Utf8ToStr = function (bytes)
      return SystemText.Encoding.getUTF8():GetString(bytes)
    end
    Utf8ToStr1 = function (bytes, index, count)
      return SystemText.Encoding.getUTF8():GetString(bytes, index, count)
    end
    WriteTo = function (bytes, offset, num)
      bytes:set(offset, System.toByte(System.band(num, 0xff)))
      bytes:set(offset + 1, System.toByte(System.sr((System.band(num, 0xff00)), 8)))
      bytes:set(offset + 2, System.toByte(System.sr((System.band(num, 0xff0000)), 16)))
      bytes:set(offset + 3, System.toByte(System.sr((System.band(num, 0xff000000)), 24)))
    end
    WriteTo1 = function (bytes, offset, num)
      bytes:set(offset, System.toByte(System.band(num, 0xff)))
      bytes:set(offset + 1, System.toByte(System.sr((System.band(num, 0xff00)), 8)))
      bytes:set(offset + 2, System.toByte(System.sr((System.band(num, 0xff0000)), 16)))
      bytes:set(offset + 3, System.toByte(System.sr((System.band(num, 0xff000000)), 24)))
    end
    WriteTo2 = function (bytes, offset, num)
      bytes:set(offset, num)
    end
    WriteTo3 = function (bytes, offset, num)
      bytes:set(offset, System.toByte(System.band(num, 0xff)))
      bytes:set(offset + 1, System.toByte(System.sr((System.band(num, 0xff00)), 8)))
    end
    WriteTo4 = function (bytes, offset, num)
      bytes:set(offset, System.toByte(System.band(num, 0xff)))
      bytes:set(offset + 1, System.toByte(System.sr((System.band(num, 0xff00)), 8)))
    end
    return {
      ToHex = ToHex,
      ToHex1 = ToHex1,
      ToHex2 = ToHex2,
      ToHex3 = ToHex3,
      ToStr = ToStr,
      ToStr1 = ToStr1,
      Utf8ToStr = Utf8ToStr,
      Utf8ToStr1 = Utf8ToStr1,
      WriteTo = WriteTo,
      WriteTo1 = WriteTo1,
      WriteTo2 = WriteTo2,
      WriteTo3 = WriteTo3,
      WriteTo4 = WriteTo4
    }
  end)
end)
