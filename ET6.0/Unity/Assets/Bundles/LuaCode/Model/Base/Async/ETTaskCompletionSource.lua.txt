-- Generated by CSharp.lua Compiler
local System = System
local SystemExceptionServices = System.Runtime.ExceptionServices
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("ETTaskCompletionSource", function (namespace)
    local getTask, getStatus, getIsCompleted, UnsafeOnCompleted, OnCompleted, GetResult, SetResult, SetException, 
    TryInvokeContinuation, TrySetResult, TrySetException, __ctor__
    __ctor__ = function (this)
      this.state = ET.AwaiterStatus.Pending
    end
    getTask = function (this)
      return System.new(ET.ETTask, 2, this)
    end
    getStatus = function (this)
      return this.state
    end
    getIsCompleted = function (this)
      return this.state ~= ET.AwaiterStatus.Pending
    end
    UnsafeOnCompleted = function (this, action)
      this.continuation = action
      if this.state ~= ET.AwaiterStatus.Pending then
        TryInvokeContinuation(this)
      end
    end
    OnCompleted = function (this, action)
      UnsafeOnCompleted(this, action)
    end
    GetResult = function (this)
      repeat
        local default = this.state
        if default == ET.AwaiterStatus.Succeeded then
          return
        elseif default == ET.AwaiterStatus.Faulted then
          local extern = this.exception
          if extern ~= nil then
            extern:Throw()
          end
          this.exception = nil
          return
        else
          System.throw(System.NotSupportedException("ETTask does not allow call GetResult directly when task not completed. Please use 'await'."))
        end
      until 1
    end
    SetResult = function (this)
      if TrySetResult(this) then
        return
      end

      System.throw(System.InvalidOperationException("TaskT_TransitionToFinal_AlreadyCompleted"))
    end
    SetException = function (this, e)
      if TrySetException(this, e) then
        return
      end

      System.throw(System.InvalidOperationException("TaskT_TransitionToFinal_AlreadyCompleted"))
    end
    TryInvokeContinuation = function (this)
      local default = this.continuation
      if default ~= nil then
        default()
      end
      this.continuation = nil
    end
    TrySetResult = function (this)
      if this.state ~= ET.AwaiterStatus.Pending then
        return false
      end

      this.state = ET.AwaiterStatus.Succeeded

      TryInvokeContinuation(this)
      return true
    end
    TrySetException = function (this, e)
      if this.state ~= ET.AwaiterStatus.Pending then
        return false
      end

      this.state = ET.AwaiterStatus.Faulted

      this.exception = SystemExceptionServices.ExceptionDispatchInfo.Capture(e)
      TryInvokeContinuation(this)
      return true
    end
    return {
      getTask = getTask,
      getStatus = getStatus,
      getIsCompleted = getIsCompleted,
      UnsafeOnCompleted = UnsafeOnCompleted,
      OnCompleted = OnCompleted,
      GetResult = GetResult,
      SetResult = SetResult,
      SetException = SetException,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "IsCompleted", 0x206, System.Boolean, getIsCompleted, System.DebuggerHiddenAttribute() },
            { "Status", 0x206, out.ET.AwaiterStatus, getStatus, System.DebuggerHiddenAttribute() },
            { "Task", 0x206, out.ET.ETTask, getTask, System.DebuggerHiddenAttribute() }
          },
          methods = {
            { "GetResult", 0x6, GetResult, System.DebuggerHiddenAttribute() },
            { "OnCompleted", 0x106, OnCompleted, System.Delegate, System.DebuggerHiddenAttribute() },
            { "SetException", 0x106, SetException, System.Exception, System.DebuggerHiddenAttribute() },
            { "SetResult", 0x6, SetResult, System.DebuggerHiddenAttribute() },
            { "TryInvokeContinuation", 0x1, TryInvokeContinuation, System.DebuggerHiddenAttribute() },
            { "TrySetException", 0x181, TrySetException, System.Exception, System.Boolean, System.DebuggerHiddenAttribute() },
            { "TrySetResult", 0x81, TrySetResult, System.Boolean, System.DebuggerHiddenAttribute() },
            { "UnsafeOnCompleted", 0x106, UnsafeOnCompleted, System.Delegate, System.DebuggerHiddenAttribute() }
          }
        }
      end
    }
  end)

  namespace.class("ETTaskCompletionSource_1", function (namespace)
    return function (T)
      local getTask, GetAwaiter, GetResult, getIsCompleted, getStatus, UnsafeOnCompleted, OnCompleted, SetResult, 
      SetException, TryInvokeContinuation, TrySetResult, TrySetException, class, __ctor__
      local ETTask_1T = ET.ETTask_1(T)
      __ctor__ = function (this)
        this.state = ET.AwaiterStatus.Pending
        this.value = System.default(T)
      end
      getTask = function (this)
        return System.new(ETTask_1T, 2, this)
      end
      GetAwaiter = function (this)
        return this
      end
      GetResult = function (this)
        repeat
          local default = this.state
          if default == ET.AwaiterStatus.Succeeded then
            return this.value
          elseif default == ET.AwaiterStatus.Faulted then
            local extern = this.exception
            if extern ~= nil then
              extern:Throw()
            end
            this.exception = nil
            return System.default(T)
          else
            System.throw(System.NotSupportedException("ETask does not allow call GetResult directly when task not completed. Please use 'await'."))
          end
        until 1
      end
      getIsCompleted = function (this)
        return this.state ~= ET.AwaiterStatus.Pending
      end
      getStatus = function (this)
        return this.state
      end
      UnsafeOnCompleted = function (this, action)
        this.continuation = action
        if this.state ~= ET.AwaiterStatus.Pending then
          TryInvokeContinuation(this)
        end
      end
      OnCompleted = function (this, action)
        UnsafeOnCompleted(this, action)
      end
      SetResult = function (this, result)
        if TrySetResult(this, result) then
          return
        end

        System.throw(System.InvalidOperationException("TaskT_TransitionToFinal_AlreadyCompleted"))
      end
      SetException = function (this, e)
        if TrySetException(this, e) then
          return
        end

        System.throw(System.InvalidOperationException("TaskT_TransitionToFinal_AlreadyCompleted"))
      end
      TryInvokeContinuation = function (this)
        local default = this.continuation
        if default ~= nil then
          default()
        end
        this.continuation = nil
      end
      TrySetResult = function (this, result)
        if this.state ~= ET.AwaiterStatus.Pending then
          return false
        end

        this.state = ET.AwaiterStatus.Succeeded

        this.value = result
        TryInvokeContinuation(this)
        return true
      end
      TrySetException = function (this, e)
        if this.state ~= ET.AwaiterStatus.Pending then
          return false
        end

        this.state = ET.AwaiterStatus.Faulted

        this.exception = SystemExceptionServices.ExceptionDispatchInfo.Capture(e)
        TryInvokeContinuation(this)
        return true
      end
      class = {
        getTask = getTask,
        GetAwaiter = GetAwaiter,
        GetResult = GetResult,
        getIsCompleted = getIsCompleted,
        getStatus = getStatus,
        UnsafeOnCompleted = UnsafeOnCompleted,
        OnCompleted = OnCompleted,
        SetResult = SetResult,
        SetException = SetException,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            properties = {
              { "IsCompleted", 0x206, System.Boolean, getIsCompleted, System.DebuggerHiddenAttribute() },
              { "Status", 0x206, out.ET.AwaiterStatus, getStatus, System.DebuggerHiddenAttribute() },
              { "Task", 0x206, out.ET.ETTask_1(T), getTask, System.DebuggerHiddenAttribute() }
            },
            methods = {
              { "GetAwaiter", 0x86, GetAwaiter, class, System.DebuggerHiddenAttribute() },
              { "GetResult", 0x86, GetResult, T, System.DebuggerHiddenAttribute() },
              { "OnCompleted", 0x106, OnCompleted, System.Delegate, System.DebuggerHiddenAttribute() },
              { "SetException", 0x106, SetException, System.Exception, System.DebuggerHiddenAttribute() },
              { "SetResult", 0x106, SetResult, T, System.DebuggerHiddenAttribute() },
              { "TryInvokeContinuation", 0x1, TryInvokeContinuation, System.DebuggerHiddenAttribute() },
              { "TrySetException", 0x181, TrySetException, System.Exception, System.Boolean, System.DebuggerHiddenAttribute() },
              { "TrySetResult", 0x181, TrySetResult, T, System.Boolean, System.DebuggerHiddenAttribute() },
              { "UnsafeOnCompleted", 0x106, UnsafeOnCompleted, System.Delegate, System.DebuggerHiddenAttribute() }
            }
          }
        end
      }
      return class
    end
  end)
end)
