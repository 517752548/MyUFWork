-- Generated by CSharp.lua Compiler
local System = System
local ET
local ListETTaskCompletionSource
System.import(function (out)
  ET = out.ET
  ListETTaskCompletionSource = System.List(ET.ETTaskCompletionSource)
end)
System.namespace("ET", function (namespace)
  namespace.class("ETTaskHelper", function (namespace)
    local WaitAny, WaitAny1, WaitAll, WaitAll1, class
    namespace.class("CoroutineBlocker", function (namespace)
      local WaitAsync, __ctor__
      __ctor__ = function (this, count)
        this.tcss = ListETTaskCompletionSource()
        this.count = count
      end
      WaitAsync = function (this)
        return System.async(function (async, this)
          this.count = this.count - 1
          if this.count < 0 then
            return
          end

          if this.count == 0 then
            local t = this.tcss
            this.tcss = nil
            for _, ttcs in System.each(t) do
              ttcs:SetResult()
            end

            return
          end

          local tcs = ET.ETTaskCompletionSource()
          this.tcss:Add(tcs)
          async:Await(tcs:getTask())
        end, nil, this)
      end
      return {
        count = 0,
        WaitAsync = WaitAsync,
        __ctor__ = __ctor__
      }
    end)
    WaitAny = function (tasks, T)
      return System.async(function (async, tasks, T)
        local coroutineBlocker = class.CoroutineBlocker(2)
        for _, task in System.each(tasks) do
          RunOneTask(task:__clone__()):Coroutine()
        end

        async:Await(coroutineBlocker:WaitAsync())

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
      end, nil, tasks, T)
    end
    WaitAny1 = function (tasks)
      return System.async(function (async, tasks)
        local coroutineBlocker = class.CoroutineBlocker(2)
        for _, task in System.each(tasks) do
          RunOneTask(task:__clone__()):Coroutine()
        end

        async:Await(coroutineBlocker:WaitAsync())

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
      end, nil, tasks)
    end
    WaitAll = function (tasks, T)
      return System.async(function (async, tasks, T)
        local coroutineBlocker = class.CoroutineBlocker(#tasks + 1)
        for _, task in System.each(tasks) do
          RunOneTask(task:__clone__()):Coroutine()
        end

        async:Await(coroutineBlocker:WaitAsync())

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
      end, nil, tasks, T)
    end
    WaitAll1 = function (tasks)
      return System.async(function (async, tasks)
        local coroutineBlocker = class.CoroutineBlocker(#tasks + 1)
        for _, task in System.each(tasks) do
          RunOneTask(task:__clone__()):Coroutine()
        end

        async:Await(coroutineBlocker:WaitAsync())

        local function RunOneTask(task) 
          return System.async(function (async, task)
            async:Await(task)
            async:Await(coroutineBlocker:WaitAsync())
          end, nil, task)
        end
      end, nil, tasks)
    end
    class = {
      WaitAny = WaitAny,
      WaitAny1 = WaitAny1,
      WaitAll = WaitAll,
      WaitAll1 = WaitAll1
    }
    return class
  end)
end)
