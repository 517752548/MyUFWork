-- Generated by CSharp.lua Compiler
local System = System
local SystemIO = System.IO
local UnityEngine = UnityEngine
local UnityEngineNetworking = UnityEngine.Networking
local ListUnityWebRequest = System.List(UnityEngineNetworking.UnityWebRequest)
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("UnityWebRequestRenewalUpdateSystem", function (namespace)
    local Update
    Update = function (this, self)
      self:Update()
    end
    return {
      base = function (out)
        return {
          out.ET.UpdateSystem_1(out.ET.UnityWebRequestRenewalAsync)
        }
      end,
      Update = Update
    }
  end)

  -- <summary>
  -- 断点续传实现
  -- </summary>
  namespace.class("UnityWebRequestRenewalAsync", function (namespace)
    local getdataError, DownloadPackages, WritePackages, UpdatePackages, UpdateHead, CheckSameFile, DownloadAsync, getProgress, 
    getByteDownloaded, Update, Dispose, class, static, __ctor__
    namespace.class("AcceptAllCertificate", function (namespace)
      local ValidateCertificate
      ValidateCertificate = function (this, certificateData)
        return true
      end
      return {
        base = function (out, this)
          local base = out.UnityEngine.Networking.CertificateHandler
          this.__gc = base.__gc
          return {
            base
          }
        end,
        ValidateCertificate = ValidateCertificate
      }
    end)
    namespace.class("RequestType", function (namespace)
      return {}
    end)
    static = function (this)
      this.certificateHandler = class.AcceptAllCertificate()
    end
    __ctor__ = function (this)
      this.dataRequests = ListUnityWebRequest()
      ET.Entity.__ctor__(this)
    end
    getdataError = function (this)
      for _, webRequest in System.each(this.dataRequests) do
        if not System.String.IsNullOrEmpty(webRequest:geterror()) then
          return webRequest:geterror()
        end
      end
      return ""
    end
    DownloadPackages = function (this)
      if #this.dataRequests >= this.maxCount or this.downloadIndex == this.totalBytes - 1 then
        return
      end

      --开启一个下载任务
      local function DownloadPackage(start, end_) 
        this.downloadIndex = end_
        ET.Log.Debug("Request Data (" .. start .. "~" .. end_ .. "):" .. this.Url)
        local request = UnityEngineNetworking.UnityWebRequest.Get(this.Url)
        this.dataRequests:Add(request)
        request:setcertificateHandler(class.certificateHandler)
        request:SetRequestHeader("Range", "bytes=" .. start .. "-" .. end_)
        request:SendWebRequest()
      end

      --开启批量下载
      do
        local i = #this.dataRequests
        while i < this.maxCount do
          local start = this.byteWrites + i * this.packageLength
          local end_ = this.byteWrites + (i + 1) * this.packageLength - 1
          if end_ > this.totalBytes then
            end_ = this.totalBytes - 1
          end
          DownloadPackage(start, end_)
          if end_ == this.totalBytes - 1 then
            break
          end
          i = i + 1
        end
      end
    end
    WritePackages = function (this)
      --写入单个包
      local function WritePackage(webRequest) 
        local buff = webRequest:getdownloadHandler():getdata()
        if buff ~= nil and #buff > 0 then
          this.fileStream:Write(buff, 0, #buff)
          this.byteWrites = this.byteWrites + #buff
        end

        ET.Log.Debug("write file Length:" .. this.byteWrites)
      end

      --从第一个开始顺序写入
      while #this.dataRequests > 0 and this.dataRequests:get(0):getisDone() do
        local first = this.dataRequests:get(0)
        this.dataRequests:RemoveAt(0)
        WritePackage(first)
        first:Dispose()
      end
    end
    UpdatePackages = function (this)
      if this.isCancel then
        this.tcs:SetException(System.Exception("request data error: " .. getdataError(this)))
        return
      end

      if not System.String.IsNullOrEmpty(getdataError(this)) then
        this.tcs:SetException(System.Exception("request data error: " .. getdataError(this)))
        return
      end

      WritePackages(this)
      if this.byteWrites == this.totalBytes then
        this.tcs:SetResult()
      else
        DownloadPackages(this)
      end
    end
    UpdateHead = function (this)
      if this.isCancel then
        this.tcs:SetException(System.Exception("request error: " .. this.headRequest:geterror()))
        return
      end

      if not this.headRequest:getisDone() then
        return
      end

      if not System.String.IsNullOrEmpty(this.headRequest:geterror()) then
        this.tcs:SetException(System.Exception("request error: " .. this.headRequest:geterror()))
        return
      end

      this.tcs:SetResult()
    end
    CheckSameFile = function (this, modifiedTime)
      local cacheValue = UnityEngine.PlayerPrefs.GetString(this.Url)
      local currentValue = this.totalBytes .. "|" .. modifiedTime
      if cacheValue == currentValue then
        return true
      end
      UnityEngine.PlayerPrefs.SetString(this.Url, currentValue)
      UnityEngine.PlayerPrefs.Save()
      ET.Log.Debug("断点续传下载一个新的文件:" .. this.Url .. " cacheValue:" .. cacheValue .. " currentValue:" .. currentValue)
      return false
    end
    -- <summary>
    -- 断点续传入口
    -- </summary>
    -- <param name="filePath">文件写入路径</param>
    -- <param name="packageLength">单个任务包体字节大小</param>
    -- <param name="maxCount">同时开启最大任务个数</param>
    -- <returns></returns>
    DownloadAsync = function (this, url, filePath, packageLength, maxCount)
      return System.async(function (async, this, url, filePath, packageLength, maxCount)
        local default, extern = System.try(function ()
          url = url:Replace(" ", "%20")
          this.Url = url
          this.packageLength = packageLength
          this.maxCount = maxCount
          ET.Log.Debug("Web Request:" .. url)

          --#region Download File Header

          this.requestType = 1 --[[RequestType.Head]]
          --下载文件头
          ET.Log.Debug("Request Head: " .. this.Url)
          this.tcs = ET.ETTaskCompletionSource()
          this.headRequest = UnityEngineNetworking.UnityWebRequest.Head(this.Url)
          this.headRequest:SendWebRequest()
          async:Await(this.tcs:getTask())
          this.totalBytes = System.Int64.Parse(this.headRequest:GetResponseHeader("Content-Length"))
          local modifiedTime = this.headRequest:GetResponseHeader("Last-Modified")
          ET.Log.Debug("totalBytes: " .. this.totalBytes)
          local default = this.headRequest
          if default ~= nil then
            default:Dispose()
          end
          this.headRequest = nil

          --#endregion

          --#region Check Local File
          --打开或创建
          this.fileStream = SystemIO.FileStream(filePath, SystemIO.FileMode.OpenOrCreate, SystemIO.FileAccess.Write)
          --获取已下载长度
          this.byteWrites = this.fileStream:getLength()
          --通过本地缓存的服务器文件修改时间和文件总长度检测服务器是否是同一个文件 不是同一个从头开始写入
          if not CheckSameFile(this, modifiedTime) then
            this.byteWrites = 0
          end
          ET.Log.Debug("byteWrites: " .. this.byteWrites)
          if this.byteWrites == this.totalBytes then
            ET.Log.Debug("已经下载完成2")
            return true
          end

          --设置开始写入位置
          this.fileStream:Seek(this.byteWrites, SystemIO.SeekOrigin.Begin)

          --#endregion

          --#region Download File Data

          --下载文件数据
          this.requestType = 2 --[[RequestType.Data]]
          ET.Log.Debug("Request Data: " .. this.Url)
          this.tcs = ET.ETTaskCompletionSource()
          DownloadPackages(this)
          async:Await(this.tcs:getTask())

          --#endregion
        end, function (default)
          local e = default
          ET.Log.Error("下载:" .. this.Url .. " Exception:" .. System.toString(e))
          System.throw(default)
        end)
        if default then
          return extern
        end
      end, nil, this, url, filePath, packageLength, maxCount)
    end
    getProgress = function (this)
      if this.totalBytes == 0 then
        return 0
      end
      return System.ToSingle((this.byteWrites + getByteDownloaded(this)) / this.totalBytes)
    end
    getByteDownloaded = function (this)
      local length = 0
      for _, dataRequest in System.each(this.dataRequests) do
        length = length + #dataRequest:getdownloadHandler():getdata()
      end
      return length
    end
    Update = function (this)
      if this.requestType == 1 --[[RequestType.Head]] then
        UpdateHead(this)
      end
      if this.requestType == 2 --[[RequestType.Data]] then
        UpdatePackages(this)
      end
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      ET.Entity.Dispose(this)
      local default = this.headRequest
      if default ~= nil then
        default:Dispose()
      end
      this.headRequest = nil
      for _, dataRequest in System.each(this.dataRequests) do
        dataRequest:Dispose()
      end
      this.dataRequests:Clear()
      local default = this.fileStream
      if default ~= nil then
        default:Close()
      end
      local default = this.fileStream
      if default ~= nil then
        default:Dispose()
      end
      this.fileStream = nil
      this.isCancel = false
    end
    class = {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      isCancel = false,
      requestType = 0 --[[RequestType.None]],
      packageLength = 1000000,
      maxCount = 20,
      byteWrites = 0,
      totalBytes = 0,
      downloadIndex = 0,
      DownloadAsync = DownloadAsync,
      getProgress = getProgress,
      getByteDownloaded = getByteDownloaded,
      Update = Update,
      Dispose = Dispose,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
