-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("ACategory", function (namespace)
    local BeginInit, EndInit
    BeginInit = function (this)
    end
    EndInit = function (this)
    end
    return {
      base = function (out)
        return {
          System.ComponentModel.ISupportInitialize
        }
      end,
      BeginInit = BeginInit,
      EndInit = EndInit
    }
  end)

  -- <summary>
  -- 管理该所有的配置
  -- </summary>
  namespace.class("ACategory_1", function (namespace)
    return function (T)
      local BeginInit, getConfigType, EndInit, Get, GetAll, GetOne
      local DictInt64T = System.Dictionary(System.Int64, T)
      BeginInit = function (this)
        local configStr = ET.ConfigHelper.GetText(System.typeof(T):getName())

        System.try(function ()
          this.dict = ET.ConfigHelper.ToObject(configStr, DictInt64T)
        end, function (default)
          local e = default
          System.throw(System.Exception("parser json fail: " .. configStr, e))
        end)
      end
      getConfigType = function (this)
        return System.typeof(T)
      end
      EndInit = function (this)
      end
      Get = function (this, id)
        local t
        local default
        default, t = this.dict:TryGetValue(id)
        if not default then
          System.throw(System.Exception("not found config: " .. System.toString(System.typeof(T)) .. " id: " .. id))
        end
        return t
      end
      GetAll = function (this)
        return this.dict
      end
      GetOne = function (this)
        return Linq.First(this.dict:getValues())
      end
      return {
        base = function (out)
          return {
            out.ET.ACategory
          }
        end,
        BeginInit = BeginInit,
        getConfigType = getConfigType,
        EndInit = EndInit,
        Get = Get,
        GetAll = GetAll,
        GetOne = GetOne
      }
    end
  end)
end)
