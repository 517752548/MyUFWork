-- Generated by CSharp.lua Compiler
local System = System
local ET
local ListCoroutineLockQueueType
local ETTaskCompletionSource_1CoroutineLock
System.import(function (out)
  ET = out.ET
  ListCoroutineLockQueueType = System.List(ET.CoroutineLockQueueType)
  ETTaskCompletionSource_1CoroutineLock = ET.ETTaskCompletionSource_1(ET.CoroutineLock)
end)
System.namespace("ET", function (namespace)
  namespace.class("CoroutineLockComponentSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      self:Awake()
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.CoroutineLockComponent)
        }
      end,
      Awake = Awake
    }
  end)

  namespace.class("CoroutineLockComponent", function (namespace)
    local Awake, Dispose, Wait, Notify, class, __ctor__
    __ctor__ = function (this)
      this.list = ListCoroutineLockQueueType(13 --[[(int)CoroutineLockType.Max]])
      ET.Entity.__ctor__(this)
    end
    Awake = function (this)
      class.Instance = this
      for i = 0, this.list:getCapacity() - 1 do
        local coroutineLockQueueType = ET.EntityFactory.Create1(this:getDomain(), ET.CoroutineLockQueueType)
        this.list:Add(coroutineLockQueueType)
        coroutineLockQueueType:setParent(this)
      end
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      ET.Entity.Dispose(this)

      this.list:Clear()
    end
    Wait = function (this, coroutineLockType, key)
      return System.async(function (async, this, coroutineLockType, key)
        local coroutineLockQueueType = this.list:get(System.Convert.ToInt32(coroutineLockType))
        local default, queue = coroutineLockQueueType:TryGetValue(key)
        if not default then
          queue = ET.EntityFactory.Create1(this:getDomain(), ET.CoroutineLockQueue)
          coroutineLockQueueType:Add(key, queue)

          return ET.EntityFactory.CreateWithParent3(this, coroutineLockType, key, ET.CoroutineLock, ET.CoroutineLockType, System.Int64)
        end

        local tcs = ETTaskCompletionSource_1CoroutineLock()
        queue:Enqueue(tcs)
        return async:Await(tcs:getTask())
      end, nil, this, coroutineLockType, key)
    end
    Notify = function (this, coroutineLockType, key)
      local coroutineLockQueueType = this.list:get(System.Convert.ToInt32(coroutineLockType))
      local default, queue = coroutineLockQueueType:TryGetValue(key)
      if not default then
        System.throw(System.Exception("first work notify not find queue" .. ""))
      end
      if queue:getCount() == 0 then
        coroutineLockQueueType:Remove(key)
        queue:Dispose()
        return
      end

      local tcs = queue:Dequeue()
      tcs:SetResult(ET.EntityFactory.CreateWithParent3(this, coroutineLockType, key, ET.CoroutineLock, ET.CoroutineLockType, System.Int64))
    end
    class = {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      Awake = Awake,
      Dispose = Dispose,
      Wait = Wait,
      Notify = Notify,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
