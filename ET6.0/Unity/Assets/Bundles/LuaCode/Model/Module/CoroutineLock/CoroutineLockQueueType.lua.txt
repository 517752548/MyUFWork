-- Generated by CSharp.lua Compiler
local System = System
local ET
local DictInt64CoroutineLockQueue
System.import(function (out)
  ET = out.ET
  DictInt64CoroutineLockQueue = System.Dictionary(System.Int64, ET.CoroutineLockQueue)
end)
System.namespace("ET", function (namespace)
  namespace.class("CoroutineLockQueueType", function (namespace)
    local Add, Remove, ContainsKey, TryGetValue, __ctor__
    __ctor__ = function (this)
      this.workQueues = DictInt64CoroutineLockQueue()
      ET.Entity.__ctor__(this)
    end
    Add = function (this, key, coroutineLockQueue)
      this.workQueues:AddKeyValue(key, coroutineLockQueue)
      coroutineLockQueue:setParent(this)
    end
    Remove = function (this, key)
      local default, queue = this.workQueues:TryGetValue(key)
      if not default then
        return
      end

      this.workQueues:RemoveKey(key)
      queue:Dispose()
    end
    ContainsKey = function (this, key)
      return this.workQueues:ContainsKey(key)
    end
    TryGetValue = function (this, key, coroutineLockQueue)
      local default
      default, coroutineLockQueue = this.workQueues:TryGetValue(key)
      return default, coroutineLockQueue
    end
    return {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      Add = Add,
      Remove = Remove,
      ContainsKey = ContainsKey,
      TryGetValue = TryGetValue,
      __ctor__ = __ctor__
    }
  end)
end)
