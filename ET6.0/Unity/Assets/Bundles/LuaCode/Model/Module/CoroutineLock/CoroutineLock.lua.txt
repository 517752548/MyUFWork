-- Generated by CSharp.lua Compiler
local System = System
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("CoroutineLockSystem", function (namespace)
    local Awake
    Awake = function (this, self, coroutineLockType, key)
      self:Awake(coroutineLockType, key)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_3(out.ET.CoroutineLock, out.ET.CoroutineLockType, System.Int64)
        }
      end,
      Awake = Awake
    }
  end)

  namespace.class("CoroutineLock", function (namespace)
    local Awake, Dispose, __ctor__
    __ctor__ = function (this)
      this.coroutineLockType = ET.CoroutineLockType.None
      ET.Entity.__ctor__(this)
    end
    Awake = function (this, type, k)
      this.coroutineLockType = type
      this.key = k
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end
      ET.Entity.Dispose(this)

      ET.CoroutineLockComponent.Instance:Notify(this.coroutineLockType, this.key)
    end
    return {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      key = 0,
      Awake = Awake,
      Dispose = Dispose,
      __ctor__ = __ctor__
    }
  end)
end)
