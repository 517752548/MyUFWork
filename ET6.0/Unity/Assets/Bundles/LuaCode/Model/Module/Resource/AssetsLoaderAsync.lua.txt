-- Generated by CSharp.lua Compiler
local System = System
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("AssetsLoaderAsyncAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self, a)
      self:Awake(a)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_2(out.ET.AssetsLoaderAsync, out.UnityEngine.AssetBundle)
        }
      end,
      Awake = Awake
    }
  end)


  namespace.class("AssetsLoaderAsyncUpdateSystem", function (namespace)
    local Update
    Update = function (this, self)
      self:Update()
    end
    return {
      base = function (out)
        return {
          out.ET.UpdateSystem_1(out.ET.AssetsLoaderAsync)
        }
      end,
      Update = Update
    }
  end)

  namespace.class("AssetsLoaderAsync", function (namespace)
    local Awake, Update, Dispose, LoadAllAssetsAsync, InnerLoadAllAssetsAsync, __ctor__
    __ctor__ = function (this)
      ET.Entity.__ctor__(this)
    end
    Awake = function (this, ab)
      this.assetBundle = ab
    end
    Update = function (this)
      if not this.request:getisDone() then
        return
      end

      local t = this.tcs
      t:SetResult()
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end
      ET.Entity.Dispose(this)

      this.assetBundle = nil
      this.request = nil
    end
    LoadAllAssetsAsync = function (this)
      return System.async(function (async, this)
        async:Await(InnerLoadAllAssetsAsync(this))
        return this.request:getallAssets()
      end, nil, this)
    end
    InnerLoadAllAssetsAsync = function (this)
      this.tcs = ET.ETTaskCompletionSource()
      this.request = this.assetBundle:LoadAllAssetsAsync()
      return this.tcs:getTask()
    end
    return {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      Awake = Awake,
      Update = Update,
      Dispose = Dispose,
      LoadAllAssetsAsync = LoadAllAssetsAsync,
      __ctor__ = __ctor__
    }
  end)
end)
