-- Generated by CSharp.lua Compiler
local System = System
local DictUInt16Object = System.Dictionary(System.UInt16, System.Object)
local ET
local DoubleMap_2UInt16Type
System.import(function (out)
  ET = out.ET
  DoubleMap_2UInt16Type = ET.DoubleMap_2(System.UInt16, System.Type)
end)
System.namespace("ET", function (namespace)
  namespace.class("OpcodeTypeComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      ET.OpcodeTypeComponent.Instance = self
      self:Load()
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.OpcodeTypeComponent)
        }
      end,
      Awake = Awake
    }
  end)


  namespace.class("OpcodeTypeComponentLoadSystem", function (namespace)
    local Load
    Load = function (this, self)
      self:Load()
    end
    return {
      base = function (out)
        return {
          out.ET.LoadSystem_1(out.ET.OpcodeTypeComponent)
        }
      end,
      Load = Load
    }
  end)


  namespace.class("OpcodeTypeComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      ET.OpcodeTypeComponent.Instance = nil
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.OpcodeTypeComponent)
        }
      end,
      Destroy = Destroy
    }
  end)

  namespace.class("OpcodeTypeComponent", function (namespace)
    local Load, GetOpcode, GetType1, __ctor__
    __ctor__ = function (this)
      this.opcodeTypes = DoubleMap_2UInt16Type()
      this.typeMessages = DictUInt16Object()
      ET.Entity.__ctor__(this)
    end
    Load = function (this)
      this.opcodeTypes:Clear()
      this.typeMessages:Clear()

      local types = ET.Game.getEventSystem():GetTypes(System.typeof(ET.MessageAttribute))
      for _, type in System.each(types) do
        local continue
        repeat
          local attrs = type:GetCustomAttributes(System.typeof(ET.MessageAttribute), false)
          if #attrs == 0 then
            continue = true
            break
          end

          local messageAttribute = System.as(attrs:get(0), ET.MessageAttribute)
          if messageAttribute == nil then
            continue = true
            break
          end

          this.opcodeTypes:Add(messageAttribute.Opcode, type)
          this.typeMessages:AddKeyValue(messageAttribute.Opcode, System.Activator.CreateInstance(type))
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    GetOpcode = function (this, type)
      return this.opcodeTypes:GetKeyByValue(type)
    end
    GetType1 = function (this, opcode)
      return this.opcodeTypes:GetValueByKey(opcode)
    end
    return {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      Load = Load,
      GetOpcode = GetOpcode,
      GetType1 = GetType1,
      __ctor__ = __ctor__
    }
  end)
end)
