-- Generated by CSharp.lua Compiler
local System = System
local SystemIO = System.IO
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.enum("ParserState", function ()
    return {
      PacketSize = 0,
      PacketBody = 1
    }
  end)

  namespace.class("Packet", function (namespace)
    return {}
  end)

  namespace.class("PacketParser", function (namespace)
    local Parse, GetPacket, __ctor__
    __ctor__ = function (this, buffer, memoryStream)
      this.state = ET.ParserState.PacketSize
      this.buffer = buffer
      this.memoryStream = memoryStream
    end
    Parse = function (this)
      if this.isOK then
        return true
      end

      local finish = false
      while not finish do
        repeat
          local default = this.state
          if default == ET.ParserState.PacketSize then
            if this.buffer:getLength() < 4 --[[Packet.PacketSizeLength]] then
              finish = true
            else
              this.buffer:Read(this.memoryStream:GetBuffer(), 0, 4 --[[Packet.PacketSizeLength]])

              this.packetSize = System.BitConverter.ToInt32(this.memoryStream:GetBuffer(), 0)
              if this.packetSize > 1048560 --[[ushort.MaxValue * 16]] or this.packetSize < 2 --[[Packet.MinPacketSize]] then
                System.throw(System.Exception("recv packet size error, 可能是外网探测端口: " .. this.packetSize))
              end
              this.state = ET.ParserState.PacketBody
            end
            break
          elseif default == ET.ParserState.PacketBody then
            if this.buffer:getLength() < this.packetSize then
              finish = true
            else
              this.memoryStream:Seek(0, SystemIO.SeekOrigin.Begin)
              this.memoryStream:SetLength(this.packetSize)
              local bytes = this.memoryStream:GetBuffer()
              this.buffer:Read(bytes, 0, this.packetSize)
              this.isOK = true
              this.state = ET.ParserState.PacketSize
              finish = true
            end
            break
          end
        until 1
      end
      return this.isOK
    end
    GetPacket = function (this)
      this.isOK = false
      return this.memoryStream
    end
    return {
      packetSize = 0,
      isOK = false,
      Parse = Parse,
      GetPacket = GetPacket,
      __ctor__ = __ctor__
    }
  end)
end)
