-- Generated by CSharp.lua Compiler
local System = System
System.namespace("ET", function (namespace)

  namespace.class("Kcp", function (namespace)
    local KcpCheck, KcpCreate, KcpFlush, KcpGetconv, KcpInput, KcpNodelay, KcpPeeksize, KcpRecv, 
    KcpRelease, KcpSend, KcpSetminrto, KcpSetmtu, KcpSetoutput, KcpUpdate, KcpWaitsnd, KcpWndsize
    KcpCheck = function (kcp, current)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_check(kcp, current)
    end
    KcpCreate = function (conv, user)
      return ikcp_create(conv, user)
    end
    KcpFlush = function (kcp)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      ikcp_flush(kcp)
    end
    KcpGetconv = function (ptr)
      if ptr == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_getconv(ptr)
    end
    KcpInput = function (kcp, data, offset, size)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_input(kcp, data, offset, size)
    end
    KcpNodelay = function (kcp, nodelay, interval, resend, nc)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_nodelay(kcp, nodelay, interval, resend, nc)
    end
    KcpPeeksize = function (kcp)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_peeksize(kcp)
    end
    KcpRecv = function (kcp, buffer, len)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_recv(kcp, buffer, len)
    end
    KcpRelease = function (kcp)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      ikcp_release(kcp)
    end
    KcpSend = function (kcp, buffer, len)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_send(kcp, buffer, len)
    end
    KcpSetminrto = function (kcp, minrto)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      ikcp_setminrto(kcp, minrto)
    end
    KcpSetmtu = function (kcp, mtu)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_setmtu(kcp, mtu)
    end
    KcpSetoutput = function (kcp, output)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      ikcp_setoutput(kcp, output)
    end
    KcpUpdate = function (kcp, current)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      ikcp_update(kcp, current)
    end
    KcpWaitsnd = function (kcp)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_waitsnd(kcp)
    end
    KcpWndsize = function (kcp, sndwnd, rcvwnd)
      if kcp == System.IntPtr.Zero then
        System.throw(System.Exception("kcp error, kcp point is zero" .. ""))
      end
      return ikcp_wndsize(kcp, sndwnd, rcvwnd)
    end
    return {
      KcpCheck = KcpCheck,
      KcpCreate = KcpCreate,
      KcpFlush = KcpFlush,
      KcpGetconv = KcpGetconv,
      KcpInput = KcpInput,
      KcpNodelay = KcpNodelay,
      KcpPeeksize = KcpPeeksize,
      KcpRecv = KcpRecv,
      KcpRelease = KcpRelease,
      KcpSend = KcpSend,
      KcpSetminrto = KcpSetminrto,
      KcpSetmtu = KcpSetmtu,
      KcpSetoutput = KcpSetoutput,
      KcpUpdate = KcpUpdate,
      KcpWaitsnd = KcpWaitsnd,
      KcpWndsize = KcpWndsize
    }
  end)
end)
