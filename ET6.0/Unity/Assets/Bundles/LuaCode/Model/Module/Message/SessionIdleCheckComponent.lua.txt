-- Generated by CSharp.lua Compiler
local System = System
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("SessionIdleCheckerComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self, checkInteral, recvMaxIdleTime, sendMaxIdleTime)
      self.CheckInterval = checkInteral
      self.RecvMaxIdleTime = recvMaxIdleTime
      self.SendMaxIdleTime = sendMaxIdleTime

      self.RepeatedTimer = ET.TimerComponent.Instance:NewRepeatedTimer(checkInteral, System.fn(self, self.Check))
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_4(out.ET.SessionIdleCheckerComponent, System.Int32, System.Int32, System.Int32)
        }
      end,
      Awake = Awake
    }
  end)


  namespace.class("SessionIdleCheckerComponentLoadSystem", function (namespace)
    local Load
    Load = function (this, self)
      local repeatedTimer = ET.TimerComponent.Instance:GetRepeatedTimer(self.RepeatedTimer)
      if repeatedTimer ~= nil then
        repeatedTimer.Callback = System.fn(self, self.Check)
      end
    end
    return {
      base = function (out)
        return {
          out.ET.LoadSystem_1(out.ET.SessionIdleCheckerComponent)
        }
      end,
      Load = Load
    }
  end)


  namespace.class("SessionIdleCheckerComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      self.CheckInterval = 0
      self.RecvMaxIdleTime = 0
      self.SendMaxIdleTime = 0
      ET.TimerComponent.Instance:Remove(self.RepeatedTimer)
      self.RepeatedTimer = 0
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.SessionIdleCheckerComponent)
        }
      end,
      Destroy = Destroy
    }
  end)

  namespace.class("SessionIdleCheckerComponentSystem", function (namespace)
    local Check
    Check = function (self, isTimeOut)
      local session = self:GetParent(ET.Session)
      local timeNow = ET.TimeHelper.Now()
      if timeNow - session.LastRecvTime < self.RecvMaxIdleTime and timeNow - session.LastSendTime < self.SendMaxIdleTime then
        return
      end

      session:setError(102014 --[[ErrorCode.ERR_SessionSendOrRecvTimeout]])
      session:Dispose()
    end
    return {
      Check = Check
    }
  end)

  namespace.class("SessionIdleCheckerComponent", function (namespace)
    local __ctor__
    __ctor__ = function (this)
      ET.Entity.__ctor__(this)
    end
    return {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      CheckInterval = 0,
      RecvMaxIdleTime = 0,
      SendMaxIdleTime = 0,
      RepeatedTimer = 0,
      __ctor__ = __ctor__
    }
  end)
end)
