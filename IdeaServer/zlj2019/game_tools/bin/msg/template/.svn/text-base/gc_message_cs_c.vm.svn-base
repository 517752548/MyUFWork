#macro( smallType $type)
#if($type == "Short")short#elseif( $type == "Integer" )int#elseif( $type == "String" )string#elseif( $type == "Byte" )byte#elseif( $type == "Long" )long#elseif( $type == "Float" )float#elseif( $type == "Double" )double#elseif( $type == "Boolean" )bool#else$type#end
#end
#macro( upperFirstChar $type)$type.substring(0,1).toUpperCase()$type.substring(1)#end
#macro( lowerFirstChar $type)$type.substring(0,1).toLowerCase()$type.substring(1)#end

using System;
namespace app.net
{
/**
 * $message.comment
 *
 * @author CodeGenerator, don't modify this file please.
 */
public class ${message.className} :BaseMessage
{
#foreach( $field in $list )
	/** ${field.comment} */
#if ($field.list) 
	private #smallType($field.clientType)[] ${field.smallName};
#else
	private #smallType($field.clientType) $field.smallName;
#end
#end	
#foreach( $field in $message.subMsgs )
	/** ${field.comment} */
	private  $field.subMsgType[] ${field.smallName};
#end

	public $message.className ()
	{
	}

	protected override void ReadImpl()
	{
${message.fieldCsReadContent}

#foreach( $field in $list )
		this.${field.smallName} = _${field.smallName};
#end
	}
	
	protected override void WriteImpl()
    {
        return;
    }
	
	public override short GetMessageType() 
	{
		return (short)MessageType.$message.type;
	}
	
	public override string getEventType()
	{
		return ${module}GCHandler.${message.className}Event;
	}
	
#foreach( $field in $list )
#if ($field.list)

	public #smallType($field.clientType)[] get${field.bigName}(){
		return ${field.smallName};
	}

#else

	public #smallType(${field.clientType}) get${field.bigName}(){
		return ${field.smallName};
	}
		
#end
#end

#if($message.compress)
	public override bool isCompress() {
		return true;
	}
#end
}
}