#macro( smallType $type)
#if($type == "Byte")int#elseif( $type == "Boolean" )int#elseif( $type == "Short" )int#elseif( $type == "Integer" )int#elseif( $type == "Long" )Long#elseif( $type == "Float" )Number#elseif( $type == "Double" )Number#else$type#end
#end
#macro( bigType $type)
#if( $type == "Integer" )Int#elseif( $type == "Boolean" )Byte#elseif( $type == "String" )UTF#else$type#end
#end
#macro( upperFirstChar $type)$type.substring(0,1).toUpperCase()$type.substring(1)#end
#macro( toLowerCase $type)$type.toLowerCase()#end
package com.renren.framework.net.message.s2c {
	import flash.utils.IDataInput;
	import flash.utils.ByteArray;
	import com.renren.framework.net.core.MessageReciver;
	import com.renren.rmeta.events.EventCore;
	import com.renren.framework.net.MessageType;
	import com.renren.framework.net.message.data.*;
	import com.renren.framework.utils.Long;
	import com.renren.framework.net.core.GameConnection;
	
#if($constants.size()>0)
	/**
	 * 常量定义
#foreach( $constant in $constants )
	 *	【$constant.name】$constant.desc
#end	
	 */
#end
	public class ${module}GCMessage{

#foreach( $msg in $msgs )
		public static var GET_${msg.type}:String = "${module}GCMessage_GET_${msg.type}";
#end
		public function ${module}GCMessage():void{
#foreach( $msg in $msgs )
			MessageReciver.register(MessageType.${msg.type},${msg.type});
#end
		}
#foreach( $msg in $msgs )
 
  		/**
		 * $msg.comment
#foreach( $field in $msg.fields )
		 * @param $field.smallName $field.comment
#end
		 */
		public function ${msg.type}(data:IDataInput):void 
		{
#if($msg.compress)	
			var bytearr:ByteArray = new ByteArray();
			data.readBytes(bytearr,0,data.bytesAvailable);
			bytearr.uncompress();
			data = bytearr;
#end		
		
${msg.fieldAsContent}
#if($msg.fields.size()>0||$msg.subMsgs.size()==0)
			var #toLowerCase(${msg.type})_data:${msg.type}_DATA = new ${msg.type}_DATA();
#foreach( $field in $msg.fields )
			#toLowerCase(${msg.type})_data.${field.smallName} = ${field.smallName};
#end			
			EventCore.instance.dispatchRMetaEventByParm(GET_${msg.type},#toLowerCase(${msg.type})_data);
#end
#foreach( $subMsg in $msg.subMsgs )
			var i:int,size:int;
			size = data.readShort();
			for(i=0; i<size; i++)
			{
				${subMsg.type}(data);
			}
#end
		}
#end
	}
}