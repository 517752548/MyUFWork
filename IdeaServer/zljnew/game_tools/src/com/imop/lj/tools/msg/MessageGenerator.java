package com.imop.lj.tools.msg;



import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.util.ArrayListWrapper;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;

import com.imop.lj.core.encrypt.XorDecryptedInputStream;
import com.imop.lj.core.util.FileUtil;
import com.imop.lj.core.util.JsScriptHelper;
import com.imop.lj.core.util.StringUtils;
import com.imop.lj.tools.i18n.PoiUtils;
import com.imop.lj.tools.util.GeneratorHelper;


/**
 * 消息代码生成器
 *
 *
 */
@SuppressWarnings("unchecked")
public class MessageGenerator {
	private static final Logger logger = Logger.getLogger(MessageGenerator.class);

	public static final String TYPE_BYTE = "Byte";
	public static final String TYPE_SHORT = "Short";
	public static final String TYPE_INT = "Integer";
	public static final String TYPE_LONG = "Long";
	public static final String TYPE_FLOAT = "Float";
	public static final String TYPE_DOUBLE = "Double";
	public static final String TYPE_STRING = "String";
	public static final String TYPE_BOOLEAN = "Boolean";

	/*** rebot message 消息总汇*/
	private static final String robotMessageMapTemplate[] = {"robot_message_map.vm"};
	private static final String robotMessageMapTemplateDir = "robot";
	private static final String robotMessageMapPath="..\\robot\\src\\com\\imop\\lj\\robot\\startup\\";


	private static final String[] sysTypes = { TYPE_BYTE, TYPE_SHORT, TYPE_INT, TYPE_LONG, TYPE_FLOAT, TYPE_DOUBLE, TYPE_STRING, TYPE_BOOLEAN };

	/** 服务器端模板列表 */
	private static final String[] serverMsgTemplates = { "cg_message_g.vm", "gc_message_g.vm" ,
														"gw_message_g.vm","wg_message_g.vm",
														"gw_message_w.vm","wg_message_w.vm"};

	/** 客户端模板列表 */
	//FIXME
	private static final String[] clientMsgTemplates = { "cg_message_c.vm", "gc_message_c.vm" };
	/** handle服务器端模板列表 */
	private static final String[] servicesMsgTemplates = { "HandlerFactory_g.vm", "MessageHandler_g.vm"};

	private static final String[] gameToWorldServicesMsgTemplates = { "AcrossHandlerFactory_g.vm", "AcrossMessageHandler_g.vm"};

	private static final String[] worldToGameServicesMsgTemplates = { "AcrossServerHandlerFactory_w.vm", "AcrossServerMessageHandler_w.vm"};

	/** handle服务器端模板列表 */
	private static final String[] clientServicesMsgTemplates = { "clientHandler.vm" };
	/** 消息号与消息类映射模板 */
	private static final String mappingTemplate_game = "message_mapping_gc.vm";

	private static final String mappingTemplate_game_world = "message_mapping_gw.vm";

	private static final String mappingTemplate_world_game = "message_mapping_wg.vm";

	private static final String clientModelTemplate = "client_model.vm";
	
	private static final String clientMsgModelTemplate = "client_msg_model.vm";
	// private static final String signature = "/***Please don't modify the code,Its automatically generated by tool!!**/";

	/** 生成文件存放的路径列表 */
	private static final String clientRootPath = "..\\game_tools\\target\\as_target\\";// 暂时生成在当前目录
	private static final String gameRootPath = "..\\game_server\\src\\com\\imop\\lj\\gameserver\\";
	//com.imop.lj.gameserver.across.ceowar.msg
	private static final String gameToWorldRootPath = "..\\game_server\\src\\com\\imop\\lj\\gameserver\\across\\";
	//com.imop.lj.gameserver.acrossserver.ceowar.msg
	private static final String wordToGameRootPath = "..\\game_server\\src\\com\\imop\\lj\\gameserver\\acrossserver\\";

	public static  String servicesRootPath = "..\\game_tools\\target\\game_server_target\\handler\\com\\imop\\lj\\gameserver\\";

	public static  String gameToWorldServicesRootPath = "..\\game_tools\\target\\world_server_target\\across\\com\\imop\\lj\\gameserver\\across\\";

	public static  String worldToGameServicesRootPath = "..\\game_tools\\target\\world_server_target\\acrossserver\\com\\imop\\lj\\gameserver\\acrossserver\\";

	private static  String clentServiceRootPath = "..\\game_tools\\target\\as_target\\handler\\com\\imop\\game\\nceo\\net\\handler\\";
	private static final boolean replaceDirectly = false;
	private static final String dataPath = "D:\\temp\\com\\imop\\game\\nceo\\net\\message\\c2s\\model\\";
	private static final String messagePath = "D:\\temp\\com\\imop\\game\\nceo\\net\\message\\c2s\\model\\";
	private static final String messageTypePath = "D:\\temp\\com\\imop\\game\\nceo\\net\\message\\net\\";

	private static Map<String, Element> macros;
	private static Map<String, MessageObject> msgs = new HashMap<String, MessageObject>();
	private static Map<String, List<FieldObject>> fields;
	private static Map<String, String> gcMsgTypeNameToClassNameMap = new HashMap<String, String>();

	private Map<String,List<String>> globalsMessageType = new HashMap<String,List<String>>();
	private Map<String,List<String>> globalsMessageModelType = new HashMap<String,List<String>>();
	private static final String serverMessageTypeTemplate = "server_message_type.vm";
	private static final String clientMessageTypeTemplate = "client_message_type.vm";
	
	
	
	private static final String serverCoreMessageTypeFileName = "..\\core\\src\\com\\imop\\lj\\core\\msg\\MessageType.java";

	/** */
	public static final String MODEL_DIC = "msg/model/";
	/** */
	public static final String TEMPLATE_DIC = "msg/template/";

	public static final String Services_TEMPLATE_DIC = "msg/services/";
	public static final Namespace NAME_SPACE = Namespace.getNamespace("http://com.imop.lj.message");

	public static final String SERVER_GAME = "game";// gameserver


	/***************message type **********************/
	private static Map<String,Map<String, String>> messageTypeMap =  new HashMap<String,Map<String, String>>();
	private static String messageTypeExcelName = "msg/messageTypeConfig.xls";
	
	private static final String clientCppRootPath = "..\\game_tools\\target\\cpp_target\\";// 暂时生成在当前目录
	private static final String clientMessageTypeCppTemplate = "client_message_cpp_type.vm";
	private static final String clientModelCppTemplate = "client_model_cpp.vm";
	private static final String clientModelCppHFileTemplate = "client_model_cpp_h.vm";
	private static final String clientModelCppHFileName = "..\\game_tools\\target\\cpp_target\\Data.h";
	private static final String[] clientCppMsgTemplates = { "cg_message_cpp_c.vm", "gc_message_cpp_c.vm" };
	private static final String[] clientCppHMsgTemplates = { "cg_message_cpp_h_c.vm", "gc_message_cpp_h_c.vm" };
	
	private static final String clientLuaRootPath = "..\\game_tools\\target\\lua_target\\";// 暂时生成在当前目录
	private static final String clientMessageTypeLuaTemplate = "client_message_lua_type.vm";
	private static final String[] clientLuaMsgTemplates = { "cg_message_lua_c.vm", "gc_message_lua_c.vm" };
	private static final String clientMessageTypeLuaImportTemplate = "client_message_lua_import.vm";
	
	/** c# **/
	private static final String clientCSRootPath = "..\\game_tools\\target\\cs_target\\";
	private static final String clientMessageTypeCSTemplate = "client_message_cs_type.vm";
	private static final String clientMessageReciverCSTemplate = "client_message_reciver_cs.vm";
	private static final String clientModelCSTemplate = "client_model_cs.vm";
	private static final String[] clientCSMsgTemplates = { "cg_message_cs_c.vm", "gc_message_cs_c.vm" };
	private static final String[] clientCSHanlerTemplates = { "cg_client_hanler_cs.vm", "gc_client_hanler_cs.vm" };
	
	public MessageGenerator() {
		macros = new HashMap<String, Element>();
	}

	public void createMessageFiles(String modelFileName,boolean isUpdate) {
		try {
			String configFilePath = GeneratorHelper.getBuildPath(MODEL_DIC + modelFileName);
			SAXBuilder builder = new SAXBuilder();
			Document doc = builder.build(configFilePath);
			Element root = doc.getRootElement();
			String module = root.getAttributeValue("module");// 所属模块
			List messages = root.getChildren("message", NAME_SPACE);// 消息体定义
			
			for (Iterator i = messages.iterator(); i.hasNext();) {
				Element mElement = (Element) i.next();
				String msgType = mElement.getAttributeValue("type");
				if (msgType.startsWith("GC")) {
					gcMsgTypeNameToClassNameMap.put(msgType, GeneratorHelper.generateServerClassName(msgType));
				}
			}
			
			if (!isUpdate) {
				genMsgTypeFile(module, messages);
				System.out.println(modelFileName+"\t"+"ignore it");
				
			} else {
				System.out.println(modelFileName+"\t"+"do it");
//			msgs = new HashMap<String, MessageObject>();
				fields = new HashMap<String, List<FieldObject>>();
				List constants = null;
				Element constantsElement = root.getChild("constants", NAME_SPACE);
				if (constantsElement != null) {
					constants = root.getChild("constants", NAME_SPACE).getChildren();// 常量定义
				} else {
					constants = new ArrayList();
				}
				
				this.replaceMacros(messages);
				createServerFiles(messages, module);
				
				createClientFile(messages, module, constants);
				
				createServerMappingFile(messages, module);
				createServicesFiles(messages, module);
				
				createClientHandleFile(messages, module, constants);
				
				createRebotMessageMapFile(messages, module, constants);
				genMsgTypeFile(module, messages);
			}
		} catch (Exception e) {
			logger.error("", e);
		}
	}

	private void genMsgTypeFile(String module, List messages) {
		List<String> msgList = new ArrayList<String>();
		for (Iterator i = messages.iterator(); i.hasNext();) {
			Element msgElement = (Element) i.next();
			String msgType = msgElement.getAttributeValue("type");
			msgList.add(msgType);
		}
		globalsMessageType.put(module.toUpperCase(), msgList);
	}

	/**
	 * 
	 * 生成服务器端文件，每个消息一个文件
	 *
	 * @param messages
	 * @throws Exception
	 */
	private void createServerFiles(List<Element> messages, String module) throws Exception {
		for (Iterator i = messages.iterator(); i.hasNext();) {
			Element msgElement = (Element) i.next();
			MessageObject msgObj = new MessageObject();
			String msgType = msgElement.getAttributeValue("type");
			msgObj.setType(msgType);
			msgObj.setClassName(GeneratorHelper.generateServerClassName(msgType));
			msgObj.setModule(module);
			msgObj.setComment(msgElement.getAttributeValue("comment"));
			msgObj.setHandleMethodName(GeneratorHelper.generateHandleMethodName(msgType));
			if (msgElement.getAttributeValue("playerQueue") != null) {
				msgObj.setPlayerQueue(msgElement.getAttributeValue("playerQueue").equals("true") ? true : false);
			}
			if (msgElement.getAttributeValue("friendQueue") != null) {
				msgObj.setFriendQueue(msgElement.getAttribute("friendQueue").getValue().equals("true"));
			}
			if (msgElement.getAttributeValue("guildQueue") != null) {
				msgObj.setGuildQueue(msgElement.getAttribute("guildQueue").getValue().equals("true"));
			}
			if (msgElement.getAttributeValue("compress") != null) {
				msgObj.setCompress(msgElement.getAttribute("compress").getValue().equals("true"));
			}
			List fElements = msgElement.getChildren("field", NAME_SPACE);
			setMsgObjFields(msgObj, fElements, false, false);
			VelocityContext context = new VelocityContext();
			context.put("message", msgObj);
			context.put("list", msgObj.getFields());
			String templateFileName = "";
			String outputFile = "";
			//FIXME 递归创建
			GeneratorHelper.templateJavaGen(msgObj);
			
			for (int j = 0; j < serverMsgTemplates.length; j++) {
				String templateName = serverMsgTemplates[j];
				String firstTowChar = templateName.substring(0, 2);
				if (templateName.substring(0, 2).equalsIgnoreCase(msgType.substring(0, 2))) {
					templateFileName = templateName;
					char lastCharOfTempate = templateName.charAt(templateName.length() - 4);
					switch (lastCharOfTempate) {
					case 'g':// 放在GameServer
						if(firstTowChar.equalsIgnoreCase("gc") || firstTowChar.equalsIgnoreCase("cg")){
							outputFile = gameRootPath + msgObj.getModule() + "\\" + "msg\\" + msgObj.getClassName() + ".java";
							break;
						}else if(firstTowChar.equalsIgnoreCase("wg") || firstTowChar.equalsIgnoreCase("gw")){
							outputFile = gameToWorldRootPath + msgObj.getModule() + "\\" + "msg\\" + msgObj.getClassName() + ".java";
							break;
						}
					case 'w':// 放在GameServer
						if(firstTowChar.equalsIgnoreCase("wg") || firstTowChar.equalsIgnoreCase("gw")){
							outputFile = wordToGameRootPath + msgObj.getModule() + "\\" + "msg\\" + msgObj.getClassName() + ".java";
							break;
						}
					default:
						throw new RuntimeException("模板名称非法，" + templateName);
					}
					GeneratorHelper.generate(context, templateFileName, outputFile,MessageGenerator.TEMPLATE_DIC);
				}
			}
			msgs.put(msgObj.getClassName(), msgObj);
		}
	}

	/**
	 * 生成客户端文件，每个模块一个文件
	 *
	 * @param msgElements
	 * @throws Exception
	 */
	private void createClientFile(List<Element> msgElements, String module, List<Element> contantElements) throws Exception {
		VelocityContext context = new VelocityContext();
		List<String> modelNameList = new ArrayList<String>();
		List<MessageObject> cgMsgs = new ArrayList<MessageObject>();
		List<MessageObject> gcMsgs = new ArrayList<MessageObject>();
		List<MessageObject> allClientMsgs = new ArrayList<MessageObject>();
		for (Iterator i = msgElements.iterator(); i.hasNext();) {
			Element mElement = (Element) i.next();
			MessageObject msgObj = new MessageObject();
			String msgType = mElement.getAttributeValue("type");
			fields.put(msgType, msgObj.getFields());
			msgObj.setType(msgType);
			msgObj.setClassName(GeneratorHelper.generateServerClassName(msgType));
			
//			if (msgType.startsWith("GC")) {
//				gcMsgTypeNameToClassNameMap.put(msgType, msgObj.getClassName());
//			}
			
			msgObj.setModule(mElement.getAttributeValue("module"));
			msgObj.setComment(mElement.getAttributeValue("comment"));
			if (mElement.getAttributeValue("compress") != null) {
				msgObj.setCompress(mElement.getAttribute("compress").getValue().equals("true"));
			}
			msgObj.setHandleMethodName(GeneratorHelper.generateHandleMethodName(msgType));
			List fElements = mElement.getChildren("field", NAME_SPACE);
			this.setMsgObjFields(msgObj, fElements, true, false);
			if (msgType.substring(0, 2).equalsIgnoreCase("cg")) {
				cgMsgs.add(msgObj);
			} else if (msgType.substring(0, 2).equalsIgnoreCase("gc")) {
				gcMsgs.add(msgObj);
			}
			if (msgType.contains("c") || msgType.contains("C")) {
				allClientMsgs.add(msgObj);
			}
			
			context.put("list", msgObj.getFields());
		}

		this.createClientModel(allClientMsgs, module,modelNameList);
		globalsMessageModelType.put(module, modelNameList);
		this.createClientMessageModel(gcMsgs, module);
		
		List<ConstantObject> contants = new ArrayList<ConstantObject>();
		for (Iterator i = contantElements.iterator(); i.hasNext();) {
			Element constantElement = (Element) i.next();
			String constantName = constantElement.getAttributeValue("name");
			String constantDesc = constantElement.getValue();
			ConstantObject constantObj = new ConstantObject(constantName, constantDesc.replaceAll("\\n", "").replaceAll("\\r", "").trim());
			contants.add(constantObj);
		}

		context.put("module", StringUtils.upperCaseFirstCharOnly(module));
		context.put("modulename", module);
		
		//FIXME 递归分别生成gc cg 协议内容
		GeneratorHelper.templateClientGen(gcMsgs,MessageFileType.AS_GC);
		GeneratorHelper.templateClientGen(cgMsgs,MessageFileType.AS_CG);
		
		GeneratorHelper.templateCppClientGen(gcMsgs,MessageFileType.CPP_GC);
		GeneratorHelper.templateCppClientGen(cgMsgs,MessageFileType.CPP_CG);
		
		GeneratorHelper.templateLuaClientGen(cgMsgs,MessageFileType.LUA_CG);
		GeneratorHelper.templateLuaClientGen(gcMsgs,MessageFileType.LUA_GC);
		
		//c# XXX
		GeneratorHelper.templateCSClientGen(gcMsgs);
		GeneratorHelper.templateCSClientGen(cgMsgs);
		
		for (String templateFileName : clientMsgTemplates) {
			String outputFileNameSuffix = null;
			String templatePrefix = templateFileName.substring(0, 2);
			if (templatePrefix.equals("gc")) {
				if (gcMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", gcMsgs);
				outputFileNameSuffix = "GCMessage.as";
			} else if (templatePrefix.equals("cg")) {
				if (cgMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", cgMsgs);
				outputFileNameSuffix = "CGMessage.as";
			}
			context.put("constants", contants);
			String outputFilePath;
			if (replaceDirectly) {
				outputFilePath = messagePath + StringUtils.upperCaseFirstCharOnly(module) + outputFileNameSuffix;
			} else {
				String prefixDirStr = "";
				if (templatePrefix.equals("gc")) {
					prefixDirStr = "s2c";
				} else if (templatePrefix.equals("cg")) {
					prefixDirStr = "c2s";
				}
				outputFilePath = clientRootPath + "\\message\\" + prefixDirStr + "\\" + StringUtils.upperCaseFirstCharOnly(module)
						+ outputFileNameSuffix;
			}
			GeneratorHelper.generate(context, templateFileName, outputFilePath,MessageGenerator.TEMPLATE_DIC);
		}
		
		//c#
		for (String templateFileName : clientCSMsgTemplates) {
			String prefixDirStr = null;
			String className = null;
			String templatePrefix = templateFileName.substring(0, 2);
			if (templatePrefix.equals("gc")) {
				for (MessageObject mo : gcMsgs) {
					prefixDirStr = "s2c";
					className = mo.getClassName();
					
					context.put("message", mo);
					context.put("list", mo.getFields());
					
					String outputFilePath = clientCSRootPath + prefixDirStr + "\\" + className + ".cs";
					GeneratorHelper.generate(context, templateFileName, outputFilePath, MessageGenerator.TEMPLATE_DIC);
				}
			} else if (templatePrefix.equals("cg")) {
				for (MessageObject mo : cgMsgs) {
					prefixDirStr = "c2s";
					className = mo.getClassName();
					
					context.put("message", mo);
					context.put("list", mo.getFields());
					
					String outputFilePath = clientCSRootPath + prefixDirStr + "\\" + className + ".cs";
					GeneratorHelper.generate(context, templateFileName, outputFilePath, MessageGenerator.TEMPLATE_DIC);
				}
			}
		}
		
		//FIXME 
		for (String templateFileName : clientCppMsgTemplates) {
			String outputFileNameSuffix = null;
			String templatePrefix = templateFileName.substring(0, 2);
			if (templatePrefix.equals("gc")) {
				if (gcMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", gcMsgs);
				outputFileNameSuffix = "GCMessage.cpp";
			} else if (templatePrefix.equals("cg")) {
				if (cgMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", cgMsgs);
				outputFileNameSuffix = "CGMessage.cpp";
			}
			context.put("constants", contants);
			String outputFilePath;
			if (replaceDirectly) {
				outputFilePath = messagePath + StringUtils.upperCaseFirstCharOnly(module) + outputFileNameSuffix;
			} else {
				String prefixDirStr = "";
				if (templatePrefix.equals("gc")) {
					prefixDirStr = "s2c";
				} else if (templatePrefix.equals("cg")) {
					prefixDirStr = "c2s";
				}
				outputFilePath = clientCppRootPath + "\\message\\" + prefixDirStr + "\\" + StringUtils.upperCaseFirstCharOnly(module)
						+ outputFileNameSuffix;
			}
			GeneratorHelper.generate(context, templateFileName, outputFilePath,MessageGenerator.TEMPLATE_DIC);
		}
		
		//FIXME 
		for (String templateFileName : clientLuaMsgTemplates) {
			String outputFileNameSuffix = null;
			String templatePrefix = templateFileName.substring(0, 2);
			if (templatePrefix.equals("gc")) {
				if (gcMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", gcMsgs);
				outputFileNameSuffix = "GCMessage.lua";
			} else if (templatePrefix.equals("cg")) {
				if (cgMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", cgMsgs);
				outputFileNameSuffix = "CGMessage.lua";
			}
			context.put("constants", contants);
			String outputFilePath;
			if (replaceDirectly) {
				outputFilePath = messagePath + StringUtils.upperCaseFirstCharOnly(module) + outputFileNameSuffix;
			} else {
				String prefixDirStr = "";
				if (templatePrefix.equals("gc")) {
					prefixDirStr = "s2c";
				} else if (templatePrefix.equals("cg")) {
					prefixDirStr = "c2s";
				}
				outputFilePath = clientLuaRootPath + "\\message\\" + prefixDirStr + "\\" + StringUtils.upperCaseFirstCharOnly(module)
						+ outputFileNameSuffix;
			}
			GeneratorHelper.generate(context, templateFileName, outputFilePath,MessageGenerator.TEMPLATE_DIC);
		}
		
		for (String templateFileName : clientCppHMsgTemplates) {
			String outputFileNameSuffix = null;
			String templatePrefix = templateFileName.substring(0, 2);
			if (templatePrefix.equals("gc")) {
				if (gcMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", gcMsgs);
				outputFileNameSuffix = "GCMessage.h";
			} else if (templatePrefix.equals("cg")) {
				if (cgMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", cgMsgs);
				outputFileNameSuffix = "CGMessage.h";
			}
			context.put("constants", contants);
			String outputFilePath;
			if (replaceDirectly) {
				outputFilePath = messagePath + StringUtils.upperCaseFirstCharOnly(module) + outputFileNameSuffix;
			} else {
				String prefixDirStr = "";
				if (templatePrefix.equals("gc")) {
					prefixDirStr = "s2c";
				} else if (templatePrefix.equals("cg")) {
					prefixDirStr = "c2s";
				}
				outputFilePath = clientCppRootPath + "\\message\\" + prefixDirStr + "\\" + StringUtils.upperCaseFirstCharOnly(module)
						+ outputFileNameSuffix;
			}
			GeneratorHelper.generate(context, templateFileName, outputFilePath,MessageGenerator.TEMPLATE_DIC);
		}
	}

	/**
	 * 生成客户端数据模型
	 *
	 * @param messages
	 */
	private void createClientMessageModel(List<MessageObject> messages, String module) {
		for (MessageObject msg : messages) {
			VelocityContext context = new VelocityContext();
			context.put("msg", msg);
			context.put("model", module);
			String outputFilePath;
			outputFilePath = clientRootPath + "\\message\\data\\" + msg.getType() + "_DATA" + ".as";
			try {
				GeneratorHelper.generate(context, clientMsgModelTemplate, outputFilePath,MessageGenerator.TEMPLATE_DIC);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	public void getClientModel(FieldObject field,Map<String, FieldObject> map){
		if(field.getIsNewType()){
			String clientType = GeneratorHelper.getClientClassName(field.getClientType());
			FieldObject newField = map.get(clientType);
			if(newField == null){
				newField = new FieldObject();
				newField.setList(field.getList());
				newField.setSmallName(field.getSmallName());
				newField.setClientType(clientType);
				newField.setComment(field.getComment());
				newField.setIsNewType(field.getIsNewType());
				map.put(clientType, newField);
			}
			
			List<FieldObject> subFields = newField.getSubFields();
			if(subFields == null){
				subFields = new ArrayList<FieldObject>();
				newField.setSubFields(subFields);
			}
			Set<String> subFieldTypeNames = newField.getSubFieldTypeNames();
			if(subFieldTypeNames == null){
				subFieldTypeNames = new LinkedHashSet<String>();
				newField.setSubFieldTypeNames(subFieldTypeNames);
			}
			
			for(FieldObject subField : field.getSubFields()){
				String subClientType = GeneratorHelper.getClientClassName(subField.getClientType());
//				System.out.println(subClientType);
//				if(subClientType.equalsIgnoreCase("AttrDescData")){
//					System.out.println();
//				}
				boolean isExist = false;
				for(FieldObject newSubField : newField.getSubFields()){
					if(newSubField.getSmallName().equalsIgnoreCase(subField.getSmallName())){
						isExist = true;
						break;
					}
				}
				
				if(!isExist){
					FieldObject putSubField = new FieldObject();
					putSubField.setList(subField.getList());
					putSubField.setSmallName(subField.getSmallName());
					putSubField.setClientType(subClientType);
					putSubField.setComment(subField.getComment());
					putSubField.setType(subField.getType());
					putSubField.setIsNewType(subField.getIsNewType());
					subFields.add(putSubField);
					if(putSubField.getIsNewType()){
						subFieldTypeNames.add(subClientType);
					}
				}else{
//					System.out.println();
				}
				//TODO 如果存在
				this.getClientModel(subField, map);
			}
		}
	}

	/**
	 * 生成客户端数据模型
	 * FIXME
	 * @param messages
	 */
	private void createClientModel(List<MessageObject> messages, String module,List<String> modelNameList) {
		Map<String, FieldObject> newTypeFields = new HashMap<String, FieldObject>();
		for (MessageObject msgObj : messages) {
			for (FieldObject fieldObject : msgObj.getFields()) {
				this.getClientModel(fieldObject, newTypeFields);
			}
		}
		for (FieldObject fieldObject : newTypeFields.values()) {
			VelocityContext context = new VelocityContext();
			context.put("modulename", module);
			context.put("field", fieldObject);
			String outputFilePath;
			String outputCppFilePath;
			if (replaceDirectly) {
				outputFilePath = dataPath + fieldObject.getClientType() + ".as";
				outputCppFilePath = dataPath + fieldObject.getClientType() + ".h";
			} else {
				outputFilePath = clientRootPath + "\\message\\data\\" + fieldObject.getClientType() + ".as";
				outputCppFilePath = clientCppRootPath + "\\message\\data\\" + fieldObject.getClientType() + ".h";
			}
			try {
//				GeneratorHelper.generate(context, clientModelTemplate, outputFilePath,MessageGenerator.TEMPLATE_DIC);
//				GeneratorHelper.generate(context, clientModelCppTemplate, outputCppFilePath,MessageGenerator.TEMPLATE_DIC);
			} catch (Exception e) {
				e.printStackTrace();
			}
			modelNameList.add(fieldObject.getClientType());
		}
	}
	
	/**
	 * 生成客户端数据模型
	 * FIXME
	 * @param messages
	 */
	private void createGlobalsClientModel(Collection<MessageObject> messages) {
		Map<String, FieldObject> newTypeFields = new HashMap<String, FieldObject>();
		for (MessageObject msgObj : messages) {
			for (FieldObject fieldObject : msgObj.getFields()) {
				this.getClientModel(fieldObject, newTypeFields);
			}
		}
		for (FieldObject fieldObject : newTypeFields.values()) {
			VelocityContext context = new VelocityContext();
//			context.put("modulename", module);
			context.put("field", fieldObject);
			String outputFilePath;
			String outputCppFilePath;
			String outputCSFilePath;
			if (replaceDirectly) {
				outputFilePath = dataPath + fieldObject.getClientType() + ".as";
				outputCppFilePath = dataPath + fieldObject.getClientType() + ".h";
				outputCSFilePath = dataPath + fieldObject.getClientType() + ".cs";
			} else {
				outputFilePath = clientRootPath + "\\message\\data\\" + fieldObject.getClientType() + ".as";
				outputCppFilePath = clientCppRootPath + "\\message\\data\\" + fieldObject.getClientType() + ".h";
				//c#
				outputCSFilePath = clientCSRootPath + "\\data\\" + fieldObject.getClientType() + ".cs";
			}
			try {
				GeneratorHelper.generate(context, clientModelTemplate, outputFilePath,MessageGenerator.TEMPLATE_DIC);
				GeneratorHelper.generate(context, clientModelCppTemplate, outputCppFilePath,MessageGenerator.TEMPLATE_DIC);
				//c#
				GeneratorHelper.generate(context, clientModelCSTemplate, outputCSFilePath,MessageGenerator.TEMPLATE_DIC);
			} catch (Exception e) {
				e.printStackTrace();
			}
//			modelNameList.add(fieldObject.getClientType());
		}
	}

	/**
	 * 设置消息对象的字段
	 *
	 * @param msgObj
	 * @param msgElement
	 */
	private void setMsgObjFields(MessageObject msgObj, List fElements, boolean isClient, boolean isCppClient) {
		for (Iterator j = fElements.iterator(); j.hasNext();) {
			Element fElement = (Element) j.next();
			FieldObject field = new FieldObject();
			field.setType(fElement.getAttributeValue("type"));
			String clientType = fElement.getAttributeValue("clientType");
			if (StringUtils.isEmpty(clientType)) {
				field.setClientType(GeneratorHelper.getClientClassName(field.getType()));
			}else{
				field.setClientType(GeneratorHelper.getClientClassName(clientType));
			}
			field.setSmallName(fElement.getAttributeValue("name"));
			field.setComment(fElement.getAttributeValue("comment"));
			List<Element> subFieldElements = fElement.getChildren("field", NAME_SPACE);
			if (fElement.getAttributeValue("bytes") != null) {
				field.setBytes(fElement.getAttributeValue("bytes").equals("true") ? true : false);
			}
			if (fElement.getAttributeValue("list") != null) {
				field.setList(fElement.getAttributeValue("list").equals("true") ? true : false);
				msgObj.setHasListField(true);
			}

			boolean isSubMsg = "true".equalsIgnoreCase(fElement.getAttributeValue("subMsg"));
			field.setSubMsg(isSubMsg);
			if (isSubMsg) {
				field.setSubMsgType(GeneratorHelper.generateServerClassName(field.getType()));
				msgObj.setListMsg(true);
				if (isCppClient) {
					field.setList(true);
					msgObj.setHasListField(true);
					field.setType("_LZOBEX_" + field.getType());
				}
			}

			// 如果不是系统定义的类型则说明是子消息
			if (!new ArrayListWrapper(sysTypes).contains(field.getType())) {
				if (!isCppClient || !field.isSubMsg()) {
					field.setIsNewType(true);
					if (!isClient && field.getType().indexOf("_") > 0) {
						field.setType(GeneratorHelper.generateServerClassName(field.getType()));
					}
				}
			}

			if (subFieldElements.size() > 0) {
				this.setSubFields(field, subFieldElements);
			} else {
				if (isClient && field.getIsNewType()) {// 客户端生成消息的时候要为其补全
					field.setSubFields(fields.get(field.getType()));
				}
				if (!isClient && field.getList() && field.getIsNewType()) {
					String type = field.getType();
					field.setSubFields(msgs.get(type).getFields());
				}
			}
			if (field.isSubMsg() && !isCppClient) {
				msgObj.addSubMsg(field);
			} else {
				msgObj.addField(field);
			}
		}
	}

	/**
	 * @param field
	 * @param subFieldElements
	 */
	private void setSubFields(FieldObject field, List<Element> subFieldElements) {
		List<FieldObject> subFields = new ArrayList<FieldObject>();
		fields.put(field.getType(), subFields);
		for (Element subElement : subFieldElements) {
			FieldObject subField = new FieldObject();
			subField.setType(subElement.getAttributeValue("type"));
			String clientType = subElement.getAttributeValue("clientType");
			if (StringUtils.isEmpty(clientType)) {
				subField.setClientType(GeneratorHelper.getClientClassName(subField.getType()));
			}else{
				subField.setClientType(GeneratorHelper.getClientClassName(clientType));
			}
			subField.setSmallName(subElement.getAttributeValue("name"));
			subField.setComment(subElement.getAttributeValue("comment"));
			if (subElement.getAttributeValue("list") != null) {
				subField.setList(subElement.getAttributeValue("list").equals("true") ? true : false);
				field.setHasListField(true);
			}
			subFields.add(subField);
			List<Element> subsubFieldElements = subElement.getChildren("field", NAME_SPACE);
			if (subsubFieldElements.size() > 0) {
				this.setSubFields(subField, subsubFieldElements);
			}

			// 如果不是系统定义的类型则说明是子消息
			if (!new ArrayListWrapper(sysTypes).contains(subField.getType())) {
				subField.setIsNewType(true);
				if (subField.getType().indexOf("_") > 0) {
					subField.setType(GeneratorHelper.generateServerClassName(subField.getType()));
				}
			}
		}
		field.setSubFields(subFields);
		// 如果配置了子节点，而且类型中不存在包名，则说明是新定义的类型
		if (field.getType().indexOf(".") == -1) {
			field.setNeedCreateType(true);
		}
	}

	/**
	 * 生成 message mapping映射文件
	 *
	 * @param msgElements
	 * @param module
	 * @throws Exception
	 */
	private void createServerMappingFile(List<Element> msgElements, String module) throws Exception {
		List<MessageObject> toCGMsgs = new ArrayList<MessageObject>();
		List<MessageObject> toGWMsgs = new ArrayList<MessageObject>();
		List<MessageObject> toWGMsgs = new ArrayList<MessageObject>();
		for (Iterator i = msgElements.iterator(); i.hasNext();) {
			Element message = (Element) i.next();
			MessageObject msg = new MessageObject();
			String msgType = message.getAttributeValue("type");
			msg.setType(msgType);
			msg.setClassName(GeneratorHelper.generateServerClassName(msgType));
			String msgTypePrefix = msgType.substring(0, 2);
			if (msgTypePrefix.equalsIgnoreCase("cg")) {
				toCGMsgs.add(msg);
			}
			if (msgTypePrefix.equalsIgnoreCase("gw")) {
				toGWMsgs.add(msg);
			}
			if (msgTypePrefix.equalsIgnoreCase("wg")) {
				toWGMsgs.add(msg);
			}
		}
		VelocityContext context = new VelocityContext();
		context.put("module", module);
		String mappingClassName = StringUtils.upperCaseFirstCharOnly(module) + "MsgMappingProvider";
		context.put("classname", mappingClassName);
		
		//生成cg
		if (toCGMsgs.size() > 0) {
			context.put("msgs", toCGMsgs);
			String outputFile = gameRootPath + module + "\\msg\\" + mappingClassName + ".java";
			GeneratorHelper.generate(context, mappingTemplate_game, outputFile,MessageGenerator.TEMPLATE_DIC);
		}

		if (toWGMsgs.size() > 0) {
			context.put("msgs", toWGMsgs);
			String outputFile = gameToWorldRootPath + module + "\\msg\\" +
					"Across" + mappingClassName + ".java";
			GeneratorHelper
					.generate(context, mappingTemplate_game_world, outputFile,MessageGenerator.TEMPLATE_DIC);
		}


		if (toGWMsgs.size() > 0) {
					context.put("msgs", toGWMsgs);
			String outputFile = wordToGameRootPath + module + "\\msg\\" +
					"AcrossServer" + mappingClassName + ".java";
			GeneratorHelper
					.generate(context, mappingTemplate_world_game, outputFile,MessageGenerator.TEMPLATE_DIC);
		}
	}

	/**
	 *
	 */
	private void loadModelMacros(String marcoFileName) {
		try {
			String configFilePath = GeneratorHelper.getBuildPath(MODEL_DIC + marcoFileName);
			SAXBuilder builder = new SAXBuilder();
			Document doc;
			doc = builder.build(configFilePath);
			Element root = doc.getRootElement();
			List<Element> macroElements = root.getChildren("macro", NAME_SPACE);// 消息体定义
			for (Element macroElement : macroElements) {
				macros.put(macroElement.getAttributeValue("id"), macroElement);
			}
			// 处理宏定义中引用其它宏的情况
			for (Element macro : macros.values()) {
				List<Element> fieldList = macro.getChildren();
				for (Element macroField : fieldList) {
					String otherMacroId = macroField.getAttributeValue("macro");
					this.doReplaceMacros(macroField, otherMacroId);
				}
			}
		} catch (Exception e) {
			logger.error("", e);
		}
	}

	/**
	 * 替换消息定义文件中的宏
	 *
	 * @param messages
	 */
	private void replaceMacros(List<Element> messages) {
		for (Element msg : messages) {
			String macroId = null;
			// 首先替换message节点中的宏
			macroId = msg.getAttributeValue("macro");
			// 仅一次宏替换(这里假设此时的模板宏中没有还未被处理的嵌套宏)
			if (!this.doReplaceMacros(msg, macroId)) {
				// 然后替换field节点中的宏
				List<Element> fieldList = msg.getChildren();
				for (Element field : fieldList) {
					macroId = field.getAttributeValue("macro");
					if (!this.doReplaceMacros(field, macroId)) {
						List<Element> childFields = field.getChildren();
						// 然后替换field的子节点中的宏
						if (childFields != null && childFields.size() > 0) {
							for (Element childField : childFields) {
								macroId = childField.getAttributeValue("macro");
								this.doReplaceMacros(childField, macroId);
							}
						}
					}
				}
			}
		}
	}

	/**
	 * 替换宏
	 *
	 * @param element
	 * @param macroId
	 * @return 仅当成功的进行宏替换后返回真
	 */
	private boolean doReplaceMacros(Element element, String macroId) {
		if (!StringUtils.isEmpty(macroId)) {
			if (!macros.containsKey(macroId)) {
				logger.error("消息配置错误，不存在这样的宏定义：" + macroId);
				return false;
			}
			Element macro = macros.get(macroId);
			Element macroClone = (Element) macro.clone();
			element.addContent(macroClone.removeContent());
			return true;
		}
		return false;
	}

	/**
	 * 生成server msgType文件
	 * @throws Exception
	 */
	public void createServerMessageType() throws Exception{
		VelocityContext context = new VelocityContext();

		Set<String> key = globalsMessageType.keySet();
		for(Iterator it = key.iterator();it.hasNext();)
		{
			String module = (String)it.next();
			Map<String,String> excelMap = messageTypeMap.get(module.toLowerCase());
			List<String> xmlList = globalsMessageType.get(module);
			int length = xmlList.size();
			int top =Integer.parseInt(excelMap.get("top"));
			int start =Integer.parseInt(excelMap.get("start"));

			if(length>top-start)
			{
				System.out.println(module+" 协议超出最大数");
				System.exit(0);
			}
		}
		context.put("message", messageTypeMap);
		context.put("msgMap", globalsMessageType);
//		globalsMessageType
		GeneratorHelper.generate(context, serverMessageTypeTemplate, serverCoreMessageTypeFileName,MessageGenerator.TEMPLATE_DIC);
	}

	/**
	 * 生成client msgType文件
	 * @throws Exception
	 */
	public void createClientMessageType() throws Exception{
		VelocityContext context = new VelocityContext();

		Set<String> key = globalsMessageType.keySet();
		for(Iterator it = key.iterator();it.hasNext();)
		{
			String module = (String)it.next();
			Map<String,String> excelMap = messageTypeMap.get(module.toLowerCase());
			List<String> xmlList = globalsMessageType.get(module);
			int length = xmlList.size();
			int top =Integer.parseInt(excelMap.get("top"));
			int start =Integer.parseInt(excelMap.get("start"));

			if(length>top-start)
			{
				System.out.println(module+" 协议超出最大数");
				System.exit(0);
			}
		}


		context.put("msgMap", globalsMessageType);
		context.put("message", messageTypeMap);
		
		String outPath = clientRootPath + "MessageType.as";
		GeneratorHelper.generate(context, clientMessageTypeTemplate, outPath,MessageGenerator.TEMPLATE_DIC);
		
		String outCppPath = clientCppRootPath + "MessageType.h";
		GeneratorHelper.generate(context, clientMessageTypeCppTemplate, outCppPath,MessageGenerator.TEMPLATE_DIC);
		
		String outLuaPath = clientLuaRootPath + "MessageType.lua";
		GeneratorHelper.generate(context, clientMessageTypeLuaTemplate, outLuaPath,MessageGenerator.TEMPLATE_DIC);
		
		//c#
		String outCSPath = clientCSRootPath + "MessageType.cs";
		GeneratorHelper.generate(context, clientMessageTypeCSTemplate, outCSPath, MessageGenerator.TEMPLATE_DIC);
		
		//c# MessageReciver.cs
		String outCSReciverPath = clientCSRootPath + "MessageReciver.cs";
		context.put("gcMsgTypeNameToClassNameMap", gcMsgTypeNameToClassNameMap);
		GeneratorHelper.generate(context, clientMessageReciverCSTemplate, outCSReciverPath, MessageGenerator.TEMPLATE_DIC);
		
	}
	
	/**
	 * 生成client Import文件
	 * @throws Exception
	 */
	public void createLuaImportMessageFile() throws Exception{
		List<String> messageImportNames = new ArrayList<String>();
		VelocityContext context = new VelocityContext();

		for(Entry<String,List<String>> entry : globalsMessageType.entrySet()){
			String module = StringUtils.upperCaseFirstCharOnly(entry.getKey());
			for(String messageType : entry.getValue()){
				if(messageType.startsWith("GC")){
					String messageImportName = "script/message/s2c/" + module + "GC" + "Message";
					if(!messageImportNames.contains(messageImportName)){
						messageImportNames.add(messageImportName);
					}
				}
				if(messageType.startsWith("CG")){
					String registerMessageName = "script/message/c2s/" + module + "CG" + "Message";
					if(!messageImportNames.contains(registerMessageName)){
						messageImportNames.add(registerMessageName);
					}
				}
			}
		}
		context.put("message", messageImportNames);
		
		String outLuaPath = clientLuaRootPath + "MessageImport.lua";
		GeneratorHelper.generate(context, clientMessageTypeLuaImportTemplate, outLuaPath,MessageGenerator.TEMPLATE_DIC);
	}

	/**
	 * 生成server msgType文件
	 * @throws Exception
	 */
	public void createCppMessageModelType() throws Exception{
		VelocityContext context = new VelocityContext();
		Set<String> names = new LinkedHashSet<String>();
		for(List<String> messageModelType : this.globalsMessageModelType.values()){
			for(String messageModelName : messageModelType){
				if(names.contains(messageModelName)){
					System.out.println("XXXXXXXXX" + "消息model重复name:" + messageModelName);
//					throw new Exception("消息model重复name:" + messageModelName);
				}
				names.add(messageModelName);
			}
		}
		context.put("messageNames", names);
		GeneratorHelper.generate(context, clientModelCppHFileTemplate, clientModelCppHFileName,MessageGenerator.TEMPLATE_DIC);
	}
	
	/**
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
		readExcel(GeneratorHelper.getBuildPath(messageTypeExcelName));
		if (replaceDirectly) {
			FileUtil.cleanFolder(new File(dataPath), ".svn");
			FileUtil.cleanFolder(new File(messagePath), ".svn");
			FileUtil.delete(new File(messageTypePath + "MessageType.as"));
		} else {
			FileUtil.delete(new File(clientRootPath));
			FileUtil.delete(new File(clientCSRootPath));
		}
		Map<String, Object> context = new HashMap<String, Object>();
		MessageGenerator generator = new MessageGenerator();
		generator.loadModelMacros("macros.xml");
		context.put("engine", generator);
		JsScriptHelper.executeScriptFile(GeneratorHelper.getBuildPath("msg/message_generator.js"), context);

		generator.createClientMessageType();
		
		generator.createServerMessageType();
		
		generator.createCppMessageModelType();
		generator.createLuaImportMessageFile();
		
		generator.createGlobalsClientModel(generator.msgs.values());
//		for(Entry<String, MessageObject> entry : MessageGenerator.msgs.entrySet()){
//			System.out.println(entry.getKey() + "===" + entry.getValue());
//		}
		
		
	}
	/**
	 *生成handle文件
	 *
	 * @param messages
	 * @throws Exception
	 */
	public void createServicesFiles(List<Element> messages, String module) throws Exception {
		List<MessageObject> cgMsgs = new ArrayList<MessageObject>();
		List<MessageObject> wgMsgs = new ArrayList<MessageObject>();
		List<MessageObject> gwMsgs = new ArrayList<MessageObject>();
		for (Iterator i = messages.iterator(); i.hasNext();) {
			Element msgElement = (Element) i.next();
			MessageObject msgObj = new MessageObject();
			String msgType = msgElement.getAttributeValue("type");
			msgObj.setType(msgType);
			msgObj.setClassName(GeneratorHelper.generateServerClassName(msgType));
			msgObj.setModule(module);
			msgObj.setComment(msgElement.getAttributeValue("comment"));
			msgObj.setHandleMethodName(GeneratorHelper.generateHandleMethodName(msgType));

			/******handle*******/

			//fields.put(msgType, msgObj.getFields());
//			msgObj.setType(msgType);
//			msgObj.setClassName(GeneratorHelper.generateServerClassName(msgType));

			if (msgType.substring(0, 2).equalsIgnoreCase("cg")) {
				cgMsgs.add(msgObj);
			}
			if (msgType.substring(0, 2).equalsIgnoreCase("wg")) {
				wgMsgs.add(msgObj);
			}
			if (msgType.substring(0, 2).equalsIgnoreCase("gw")) {
				gwMsgs.add(msgObj);
			}
			/*****/
			if (msgElement.getAttributeValue("playerQueue") != null) {
				msgObj.setPlayerQueue(msgElement.getAttributeValue("playerQueue").equals("true") ? true : false);
			}
			if (msgElement.getAttributeValue("friendQueue") != null) {
				msgObj.setFriendQueue(msgElement.getAttribute("friendQueue").getValue().equals("true"));
			}
			if (msgElement.getAttributeValue("guildQueue") != null) {
				msgObj.setGuildQueue(msgElement.getAttribute("guildQueue").getValue().equals("true"));
			}


			List fElements = msgElement.getChildren("field", NAME_SPACE);
			setMsgObjFields(msgObj, fElements, false, false);

//			msgs.put(msgObj.getClassName(), msgObj);
		}
		String templateFileName = "";
		String outputFile = "";

		if(cgMsgs != null && cgMsgs.size() !=0){
			VelocityContext cgcontext = new VelocityContext();
			cgcontext.put("msgs", cgMsgs);
			cgcontext.put("module", module);
			templateFileName = "";
			outputFile = "";
			for (int j = 0; j < servicesMsgTemplates.length; j++) {
				String templateName = servicesMsgTemplates[j];

				templateFileName = module.substring(0,1).toUpperCase() + module.substring(1)+templateName.substring(0,templateName.length() - 5);
				outputFile = servicesRootPath + module + "\\" + "handler\\" +templateFileName + ".java";
				GeneratorHelper.generate(cgcontext, templateName, outputFile,MessageGenerator.Services_TEMPLATE_DIC);
			}
		}

		if(wgMsgs != null && wgMsgs.size() !=0){
			VelocityContext wgcontext = new VelocityContext();
			wgcontext.put("msgs", wgMsgs);
			wgcontext.put("module", module);
			templateFileName = "";
			outputFile = "";
			for (int j = 0; j < gameToWorldServicesMsgTemplates.length; j++) {
				String templateName = gameToWorldServicesMsgTemplates[j];

				templateFileName = module.substring(0,1).toUpperCase() + module.substring(1)+templateName.substring(0,templateName.length() - 5);
				outputFile = gameToWorldServicesRootPath + module + "\\" + "handler\\" +templateFileName + ".java";
				GeneratorHelper.generate(wgcontext, templateName, outputFile,MessageGenerator.Services_TEMPLATE_DIC);
			}
		}

		if(gwMsgs != null && gwMsgs.size() !=0){
			VelocityContext gwcontext = new VelocityContext();
			gwcontext.put("msgs", gwMsgs);
			gwcontext.put("module", module);
			templateFileName = "";
			outputFile = "";
			for (int j = 0; j < worldToGameServicesMsgTemplates.length; j++) {
				String templateName = worldToGameServicesMsgTemplates[j];
				templateFileName = module.substring(0,1).toUpperCase() + module.substring(1)+templateName.substring(0,templateName.length() - 5);
				outputFile = worldToGameServicesRootPath + module + "\\" + "handler\\" +templateFileName + ".java";
				GeneratorHelper.generate(gwcontext, templateName, outputFile,MessageGenerator.Services_TEMPLATE_DIC);
			}
		}
	}
	/**
	 * 生成客户端文件，handle文件
	 *
	 * @param msgElements
	 * @throws Exception
	 */
	public void createClientHandleFile(List<Element> msgElements, String module, List<Element> contantElements) throws Exception {
		VelocityContext context = new VelocityContext();
		List<MessageObject> cgMsgs = new ArrayList<MessageObject>();
		List<MessageObject> gcMsgs = new ArrayList<MessageObject>();
		List<MessageObject> allClientMsgs = new ArrayList<MessageObject>();
		for (Iterator i = msgElements.iterator(); i.hasNext();) {
			Element mElement = (Element) i.next();
			MessageObject msgObj = new MessageObject();
			String msgType = mElement.getAttributeValue("type");
			fields.put(msgType, msgObj.getFields());
			msgObj.setType(msgType);
			msgObj.setClassName(GeneratorHelper.generateServerClassName(msgType));
			msgObj.setModule(mElement.getAttributeValue("module"));
			msgObj.setComment(mElement.getAttributeValue("comment"));
			msgObj.setHandleMethodName(GeneratorHelper.generateHandleMethodName(msgType));
			List fElements = mElement.getChildren("field", NAME_SPACE);
			this.setMsgObjFields(msgObj, fElements, true, false);
			if (msgType.substring(0, 2).equalsIgnoreCase("cg")) {
				cgMsgs.add(msgObj);
			} else if (msgType.substring(0, 2).equalsIgnoreCase("gc")) {
				gcMsgs.add(msgObj);
			}
			if (msgType.contains("c") || msgType.contains("C")) {
				allClientMsgs.add(msgObj);
			}
		}

//		this.createClientModel(allClientMsgs, module);

		List<ConstantObject> contants = new ArrayList<ConstantObject>();
		for (Iterator i = contantElements.iterator(); i.hasNext();) {
			Element constantElement = (Element) i.next();
			String constantName = constantElement.getAttributeValue("name");
			String constantDesc = constantElement.getValue();
			ConstantObject constantObj = new ConstantObject(constantName, constantDesc.replaceAll("\\n", "").replaceAll("\\r", "").trim());
			contants.add(constantObj);
		}

		
		context.put("module", StringUtils.upperCaseFirstCharOnly(module));
		context.put("modulename", module);
		
		for (String templateFileName : clientServicesMsgTemplates) {
			String outputFileNameSuffix = null;
			String templatePrefix = "gc";//templateFileName.substring(0, 2);
			if (templatePrefix.equals("gc")) {
				if (gcMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", gcMsgs);
				outputFileNameSuffix = "GCMessage.as";
			} else if (templatePrefix.equals("cg")) {
				if (cgMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", cgMsgs);
				outputFileNameSuffix = "CGMessage.as";
			}
			context.put("constants", contants);
			String outputFilePath;

			outputFilePath = clentServiceRootPath +StringUtils.upperCaseFirstCharOnly(module)+"Handler.as";

			GeneratorHelper.generate(context, templateFileName, outputFilePath,MessageGenerator.Services_TEMPLATE_DIC);
		}
		
		//c#
		for (String templateFileName : clientCSHanlerTemplates) {
			String outputFileNameSuffix = null;
			String templatePrefix = templateFileName.substring(0, 2);
			if (templatePrefix.equals("gc")) {
				if (gcMsgs.size() == 0) {
					continue;
				}
//				for (MessageObject mo : gcMsgs) {
//					context.put("list", mo.getFields());
//				}
				context.put("msgs", gcMsgs);
				outputFileNameSuffix = "GCHandler.cs";
			} else if (templatePrefix.equals("cg")) {
				if (cgMsgs.size() == 0) {
					continue;
				}
//				for (MessageObject mo : cgMsgs) {
//					context.put("list", mo.getFields());
//				}
				context.put("msgs", cgMsgs);
				outputFileNameSuffix = "CGHandler.cs";
			}
			context.put("constants", contants);
			String outputFilePath;
			outputFilePath = clientCSRootPath + "\\handler\\" + StringUtils.upperCaseFirstCharOnly(module) + outputFileNameSuffix;

			GeneratorHelper.generate(context, templateFileName, outputFilePath, MessageGenerator.TEMPLATE_DIC);
		}
	}
	/**
	 * 生成客户端文件，handle文件
	 *
	 * @param msgElements
	 * @throws Exception
	 */
	public void createRebotMessageMapFile(List<Element> msgElements, String module, List<Element> contantElements) throws Exception {

		List<MessageObject> cgMsgs = new ArrayList<MessageObject>();
		List<MessageObject> gcMsgs = new ArrayList<MessageObject>();
		List<MessageObject> allClientMsgs = new ArrayList<MessageObject>();
		for (Iterator i = msgElements.iterator(); i.hasNext();) {
			Element mElement = (Element) i.next();
			MessageObject msgObj = new MessageObject();
			String msgType = mElement.getAttributeValue("type");
			fields.put(msgType, msgObj.getFields());
			msgObj.setType(msgType);
			msgObj.setClassName(GeneratorHelper.generateServerClassName(msgType));
			msgObj.setModule(mElement.getAttributeValue("module"));
			msgObj.setComment(mElement.getAttributeValue("comment"));
			msgObj.setHandleMethodName(GeneratorHelper.generateHandleMethodName(msgType));
			List fElements = mElement.getChildren("field", NAME_SPACE);
			this.setMsgObjFields(msgObj, fElements, true, false);
			if (msgType.substring(0, 2).equalsIgnoreCase("cg")) {
				cgMsgs.add(msgObj);
			} else if (msgType.substring(0, 2).equalsIgnoreCase("gc")) {
				gcMsgs.add(msgObj);
			}
			if (msgType.contains("c") || msgType.contains("C")) {
				allClientMsgs.add(msgObj);
			}
		}

//		this.createClientModel(allClientMsgs, module);

		List<ConstantObject> contants = new ArrayList<ConstantObject>();
		for (Iterator i = contantElements.iterator(); i.hasNext();) {
			Element constantElement = (Element) i.next();
			String constantName = constantElement.getAttributeValue("name");
			String constantDesc = constantElement.getValue();
			ConstantObject constantObj = new ConstantObject(constantName, constantDesc.replaceAll("\\n", "").replaceAll("\\r", "").trim());
			contants.add(constantObj);
		}

		VelocityContext context = new VelocityContext();
		context.put("module", StringUtils.upperCaseFirstCharOnly(module));
		context.put("modulename", module);
		for (String templateFileName : robotMessageMapTemplate) {
			String outputFileNameSuffix = null;
			String templatePrefix = "gc";//templateFileName.substring(0, 2);
			if (templatePrefix.equals("gc")) {
				if (gcMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", gcMsgs);
				outputFileNameSuffix = "Robot#ClientMsgRecognizer.java";
			} else if (templatePrefix.equals("cg")) {
				if (cgMsgs.size() == 0) {
					continue;
				}
				context.put("msgs", cgMsgs);
				outputFileNameSuffix = "CGMessage.as";
			}
			context.put("constants", contants);
			String outputFilePath;

			outputFilePath = robotMessageMapPath +outputFileNameSuffix.replaceAll("#",StringUtils.upperCaseFirstCharOnly(module));

			GeneratorHelper.generate(context, templateFileName, outputFilePath,MessageGenerator.robotMessageMapTemplateDir);
		}
	}
	private String getCurrentDir()
	{
		return System.getProperty("user.dir");
	}
	/**
	 * 读取消息配置文件，
	 * 这个是为messagetype.java messagetype.as 做分段用的，
	 * 一个功能用一个数据段
	 * @param path
	 */
	public static void readExcel(String path)
	{
		InputStream fout = null;
		try {
			fout = new FileInputStream(path);
			HSSFWorkbook wb =null;

			//List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();
				Map<String,String> items = new LinkedHashMap<String,String>();
				fout = true ? new FileInputStream(path)
						: new XorDecryptedInputStream(path);
				wb = new HSSFWorkbook(new POIFSFileSystem(fout));

				HSSFSheet sheet1 = wb.getSheetAt(0);
				for (int i =1; i <= sheet1.getLastRowNum(); i++) {
					HSSFRow row = sheet1.getRow(i);
					String module = PoiUtils.getStringValue(row.getCell(0));
					String start = PoiUtils.getStringValue(row.getCell(1));
					String top = PoiUtils.getStringValue(row.getCell(2));
					// itemName = ExcelLangManagerService.readItems(itemName);
					Map<String, String> map = new HashMap<String, String>();
					map.put("module", module);
					map.put("start",start);
					map.put("top", top);
					//dataList.add(map);
					messageTypeMap.put(module,map);
				}

				fout.close();// 关闭流

		}
		catch (Exception e)
		{
			e.printStackTrace();
			System.out.println(e.getMessage());
			e.getStackTrace();
		}
		finally{
			if (fout != null) {
				try {
					fout.close();
				} catch (IOException e) {
					logger.error("IOException", e);
				}
			}
		}
	}

	public void validateMessageType()
	{

	}
}
