// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the FrameWork Editor.
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
//  Build Time：2020-07-14 08:20:34 下午
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using UnityEngine;
using Bag;
using BetaFramework;
using Facebook.Unity;

public class GameAnalyze
{
    /// <summary>
    /// 初始化
    /// </summary>
    public static void Init()
    {
#if UNITY_IOS
        FTDSdk.init(SdkConst.FtdAppId, SdkConst.FtdIosKey, SdkConst.FtdsignWay);
#elif UNITY_ANDROID
FTDSdk.init(SdkConst.FtdAppId, SdkConst.FtdIosKey, SdkConst.FtdsignWay);
#endif
    }

    public static void LogusersActive()
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"classicLevelSeq", AppEngine.SSystemManager.GetSystem<ClassicGameSystem>().currentLevel.Value.ToString()},
            {"LevelABTestAB", AppEngine.SSystemManager.GetSystem<TestABWordLibSystem>().GetUserTestLib()},
            {"LevelABTest", AppEngine.SSystemManager.GetSystem<ClassicGameSystem>().GetAbTestSpecialId()},
            {"RewardAB", AppEngine.SSystemManager.GetSystem<RewardABSystem>().GetUserRewardLib()},
            {"RewardABTest", AppEngine.SSystemManager.GetSystem<RewardABSystem>().GetABReportStr()},
            {"CellHintAB", AppEngine.SSystemManager.GetSystem<CellTipABSystem>().GetUserRewardLib()},
            {"ADAB", AppEngine.SSystemManager.GetSystem<TestABSystem>().GetUserTestLib()},
        };
        LogEvent("UserActive", data);
        FTDSdk.getInstance().setOnlineTimeParams(data);
    }

    /// <summary>
    /// 用户购买表
    /// 上报条件：玩家充值时，实时上报
    /// <summary>
    /// <param name="userTypeBefore">玩家分层支付前</param>
    /// <param name="userTypeAfter">玩家分层支付后</param>
    /// <param name="levelSeq">关卡序数</param>
    /// <param name="buyItemId">购买项</param>
    /// <param name="moneyCost">消费金额，内购id对应的美元数额</param>
    /// <param name="leftHint1"> 剩余hint1数量（付费前）</param>
    /// <param name="leftHint2"> 剩余hint2数量（付费前）</param>
    /// <param name="leftHint3"> 剩余hint3数量（付费前）</param>
    /// <param name="leftHint4"> 剩余hint4数量（付费前）</param>
    /// <param name="leftCoin">付费前金币数（付费前）</param>
    /// <param name="buyLeftHint1">付费后剩余hint1数（拿到订单为主）</param>
    /// <param name="buyLeftHint2">付费后剩余hint2数（拿到订单为主）</param>
    /// <param name="buyLeftHint3">付费后剩余hint3数（拿到订单为主）</param>
    /// <param name="buyLeftHint4">付费后剩余hint4数（拿到订单为主）</param>
    /// <param name="buyLeftCoin">付费后剩余金币数</param>
    /// <param name="installDays">付费距离安装天数（卸载重装后，玩家同步进度后，此数据需要更新）</param>
    /// <param name="payDay">付费距离上次付费天数（当天付2次天数为0拉取时间使用UTC时）</param>
    /// <param name="totalPayTimes">付费总次数</param>
    /// <param name="payType">购买来源1普通计费点商城:normal</param>
    /// <param name="orderId">订单号</param>
    public static void LogusersBuy(int money, string currency, string itemName, string p_userTypeBefore,
        string p_userTypeAfter, string p_buyItemId, int p_moneyCost, int coinreward, int beforecoin, int beforehint1,
        int beforehint2, int beforehint3,
        int beforehint4, int beforehint5, int afterhint1, int afterhint2, int afterhint3, int afterhint4,
        int afterhint5, string p_orderId, bool Verify)
    {
        string level = AppEngine.SSystemManager.GetSystem<ClassicGameSystem>().currentLevel.Value.ToString();
        int installdays = AppEngine.SSystemManager.GetSystem<PlayerInfoSystem>().GetPlayerInstallDays();
        int payDays = AppEngine.SSystemManager.GetSystem<PlayerInfoSystem>().GetPayDays();
        int totalPayTimes = AppEngine.SSystemManager.GetSystem<PlayerInfoSystem>().GetTotalPayTimes();
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"userTypeBefore", p_userTypeBefore},
            {"userTypeAfter", p_userTypeAfter},
            {"levelSeq", level},
            {"buyItemId", p_buyItemId},
            {"moneyCost", p_moneyCost.ToString()},
            {"leftHint1", beforehint1.ToString()},
            {"leftHint2", (beforehint2).ToString()},
            {"leftHint3", (beforehint3).ToString()},
            {"leftHint4", (beforehint4).ToString()},
            {"leftHint5", beforehint5.ToString()},
            {"leftCoin", beforecoin.ToString()},
            {"buyLeftHint1", afterhint1.ToString()},
            {"buyLeftHint2", afterhint2.ToString()},
            {"buyLeftHint3", afterhint3.ToString()},
            {"buyLeftHint4", afterhint4.ToString()},
            {"buyLeftHint5", afterhint5.ToString()},
            {"buyLeftCoin", (beforecoin + coinreward).ToString()},
            {"installDays", installdays.ToString()},
            {"payDay", payDays.ToString()},
            {"totalPayTimes", totalPayTimes.ToString()},
            {"payType", "normal"},
            {"orderId", p_orderId},
            {"Verify", Verify.ToString()},
            {"RewardAB", AppEngine.SSystemManager.GetSystem<RewardABSystem>().GetUserRewardLib()}
        };
        string channel = "ios";
#if UNITY_ANDROID
 channel = "google";
#endif
        FTDSdk.getInstance().logEventPurchase(channel, p_buyItemId, itemName, p_moneyCost, money, currency, !Verify,
            false, data);
        if (FB.IsInitialized && Const.reportFB)
        {
            FB.LogAppEvent("usersBuy", null, null);
        }
    }

    public static void LogEvent(string name, string value)
    {
        LogEvent(name, new Dictionary<string, string>() {{name, value}});
    }

    /// <summary>
    /// 可传 Dictionary<string,string>参数
    /// </summary>
    /// <param name="name">Name.</param>
    /// <param name="values">Valus.</param>
    public static void LogEvent(string name, Dictionary<string, string> eventParams)
    {
        if (!string.IsNullOrEmpty(name) && eventParams != null)
        {
            FTDSdk.getInstance().logCustomEvent(name, name, eventParams);
        }

        // if (FB.IsInitialized && Const.reportFB)
        // {
        //     Dictionary<string, object> fbParas = new Dictionary<string, object>();
        //     foreach (string eventParamsKey in eventParams.Keys)
        //     {
        //         if (!string.IsNullOrEmpty(eventParamsKey) && !string.IsNullOrEmpty(eventParams[eventParamsKey]))
        //         {
        //             fbParas.Add(eventParamsKey, eventParams[eventParamsKey]);
        //         }
        //     }
        //
        //     if (fbParas.Count == 0)
        //     {
        //         FB.LogAppEvent(name, null, null);
        //     }
        //     else
        //     {
        //         FB.LogAppEvent(name, null, fbParas);
        //     }
        // }
    }

    public static void LogException(string condition, string trace)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"condition", condition},
            {"trace", trace},
        };
        LogEvent("LogException", data);
    }

    public static void SettingReport(string from, string item = "", string value = "")
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"from", from},
        };
        if (!string.IsNullOrEmpty(item))
        {
            data.Add("action", item);
            data.Add("cvalue", value);
        }

        LogEvent("Setting", data);
    }

    /// <summary>
    /// 插屏打点
    /// 上报条件：插屏打点
    /// <summary>
    /// <param name="type">1.开始观看（播放）2.完成观看进入局内（看完/到秒数关闭后成功进入局内）</param>
    /// <param name="mode">1：classic2：daily3：flash</param>
    /// <param name="levelSeq">对应的主线关卡位置</param>
    /// <param name="abTest_v1">"第一轮AB测试的AB分组AB</param>
    public static void LogInsertVideoData(string p_type, string p_mode, string p_levelSeq, string p_abTest_v1)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"type", p_type},
            {"mode", p_mode},
            {"levelSeq", p_levelSeq},
            {"abTest_v1", p_abTest_v1}
        };
        LogEvent("InsertVideoData", data);
    }

    /// <summary>
    /// 推送
    /// 上报条件：根据关卡不同阶段打点
    /// <summary>
    /// <param name="LevelSeq">关卡序数</param>
    /// <param name="Step">step</param>
    public static void LogNotificationState(string p_LevelSeq, string p_Step)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"LevelSeq", p_LevelSeq},
            {"Step", p_Step}
        };
        LogEvent("NotificationState", data);
    }

    /// <summary>
    /// 推送
    /// 上报条件：根据关卡不同阶段打点
    /// <summary>
    /// <param name="LevelSeq">关卡序数</param>
    /// <param name="Step">step</param>
    public static void LogSendNotification(string p_LevelSeq, string p_Step)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"LevelSeq", p_LevelSeq},
            {"Step", p_Step}
        };
        LogEvent("SendNotification", data);
    }

    /// <summary>
    /// 玩家点击推送过来的
    /// 上报条件：根据关卡不同阶段打点
    /// <summary>
    /// <param name="LevelSeq">关卡序数</param>
    /// <param name="Step">step</param>
    public static void LogPlayerClickNotification(string p_LevelSeq, string p_Step)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"LevelSeq", p_LevelSeq},
            {"Step", p_Step}
        };
        LogEvent("PlayerClickNotification", data);
    }

    /// <summary>
    /// 问题反馈打点
    /// 上报条件：玩家点击反馈时打点
    /// <summary>
    /// <param name="levelSeq">主线关卡序数</param>
    /// <param name="queId">问题Id</param>
    /// <param name="feedbackType">回馈：1：fun，0：boring</param>
    public static void LogqueFeedback(string p_levelSeq, string p_queId, string p_feedbackType, string p_Question,
        string p_Answer, string p_LevelABTestAB, string p_LevelABTest)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"levelSeq", p_levelSeq},
            {"queId", p_queId},
            {"feedbackType", p_feedbackType},
            {"Question", p_Question},
            {"Answer", p_Answer},
            {"LevelABTestAB", p_LevelABTestAB},
            {"LevelABTest", p_LevelABTest},
        };
        LogEvent("queFeedback", data);
    }


    /// <summary>
    /// 过关表
    /// 上报条件：玩家完成或者退出关卡时打点
    /// <summary>
    /// <param name="levelSeq">主线关卡序数，在游戏内的实际位置，不管主线还是每日都打主线的位置</param>
    /// <param name="timeCost">关卡耗时，从进入本关局内，到退出本关或者是完成本关的时间</param>
    /// <param name="leftCoin">剩余金币数</param>
    /// <param name="leftHint1">剩余道具1数</param>
    /// <param name="leftHint2">剩余道具2数</param>
    /// <param name="leftHint3">剩余道具3数</param>
    /// <param name="leftHint4">剩余道具4数</param>
    /// <param name="levelStatus">过关状态：1：过关0：未过关</param>
    /// <param name="gameType">游戏类型主线：Classic每日：Daily每日一词OneWord</param>
    /// <param name="dailyTypes">如果时daily关卡，则打入当天的关卡种类的序列，例如134</param>
    /// <param name="LevelABTestVersion">与点LevelABTest配合，一起决定在此次AB测试中用户的AB版本，例如在4月30日开启的测试中A用户的打点为：LevelABTestAB：ALevelABTest：V200430</param>
    /// <param name="LevelABTestAB">关卡AB测试打点，这个点的参数将会在config文件中以字段形式存在，每当新的一轮AB测试开始时，动态读入。命名规则：V+日期。例如A200310</param>
    /// <param name="RewardABTestAB">与点RewardABTest配合，一起决定在此次AB测试中用户的AB版本，例如在4月30日开启的测试中A用户的打点为：RewardABTestAB：ARewardABTest：V200430</param>
    /// <param name="RewardABTest">关卡AB测试打点，这个点的参数将会在config文件中以字段形式存在，每当新的一轮AB测试开始时，动态读入。命名规则：V+日期。例如V200310</param>
    /// <param name="LoginID">LoginID</param>
    /// <param name="FBID">FBID</param>
    /// <param name="isTournament">当前主线是否激活了老锦标赛1：是0：否</param>
    /// <param name="usedBee">使用数量</param>
    /// <param name="leftHint5">剩余小蜜蜂道具数</param>
    /// <param name="voiceProportion">voiceProportion</param>
    /// <param name="CellTipAB">CellTipAB</param>
    public static void LoglevelPass(string p_levelSeq, string p_timeCost, string p_leftCoin, string p_leftHint1,
        string p_leftHint2, string p_leftHint3, string p_leftHint4, string p_levelStatus, string p_gameType,
        string p_dailyTypes, string p_LevelABTestVersion, string p_LevelABTestAB, string p_RewardABTestAB,
        string p_RewardABTest, string p_LoginID, string p_FBID, string p_isTournament, string p_usedBee,
        string p_leftHint5, string p_voiceProportion, string p_CellTipAB)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"levelSeq", p_levelSeq},
            {"timeCost", p_timeCost},
            {"leftCoin", p_leftCoin},
            {"leftHint1", p_leftHint1},
            {"leftHint2", p_leftHint2},
            {"leftHint3", p_leftHint3},
            {"leftHint4", p_leftHint4},
            {"levelStatus", p_levelStatus},
            {"gameType", p_gameType},
            {"dailyTypes", p_dailyTypes},
            {"LevelABTestVersion", p_LevelABTestVersion},
            {"LevelABTestAB", p_LevelABTestAB},
            {"RewardABTestAB", p_RewardABTestAB},
            {"RewardABTest", p_RewardABTest},
            {"LoginID", p_LoginID},
            {"FBID", p_FBID},
            {"isTournament", p_isTournament},
            {"usedBee", p_usedBee},
            {"leftHint5", p_leftHint5},
            {"voiceProportion", p_voiceProportion},
            {"CellHintAB", p_CellTipAB}
        };
        LogEvent("levelPass", data);
    }


    /// <summary>
    /// 用户活跃表
    /// 上报条件：打在BI的时长参数事件中
    /// <summary>
    /// <param name="wordVersion">词库版本</param>
    /// <param name="levelSeq">主线关卡序数</param>
    /// <param name="userType">打NULL</param>
    public static void LoguserActive(string p_wordVersion, string p_levelSeq, string p_userType)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"wordVersion", p_wordVersion},
            {"levelSeq", p_levelSeq},
            {"userType", p_userType},
        };
        LogEvent("userActive", data);
    }


    /// <summary>
    /// 主线单词打点
    /// 上报条件：每当玩家完成一次单词输入时上传（如果玩家把模式调整成非删除错误字母的模式，错误词只上传一次，如果是删除模式，则每次输入错误均上传）
    /// <summary>
    /// <param name="levelSeq">关卡序号</param>
    /// <param name="queId">问题序号</param>
    /// <param name="playSeq">回答出这个问题的次序，如果是错误词则上传-1，出现一次多个，那就顺延序数</param>
    /// <param name="answer">这个答案是什么</param>
    /// <param name="type">单词类型，1：正确词2：错误词</param>
    /// <param name="playTime">距离上一次答对的时间</param>
    /// <param name="hint1Num">在这次以及上次回答中正确答案之间使用过几个Hint1</param>
    /// <param name="hint2Num">在这次以及上次回答中正确答案之间使用过几个Hint2</param>
    /// <param name="hint3Num">在这次以及上次回答中正确答案之间使用过几个Hint3</param>
    /// <param name="hint4Num">在这次以及上次回答中正确答案之间使用过几个Hint4</param>
    /// <param name="wrongWord">当这个答案是一个错误答案时，用户输入的错误答案是什么。对于正确单词不打</param>
    public static void LogclassicLevelWords(string p_levelSeq, string p_queId, string p_playSeq, string p_answer,
        string p_type, string p_playTime, string p_hint1Num, string p_hint2Num, string p_hint3Num, string p_hint4Num,
        string p_wrongWord)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"levelSeq", p_levelSeq},
            {"queId", p_queId},
            {"playSeq", p_playSeq},
            {"answer", p_answer},
            {"type", p_type},
            {"playTime", p_playTime},
            {"hint1Num", p_hint1Num},
            {"hint2Num", p_hint2Num},
            {"hint3Num", p_hint3Num},
            {"hint4Num", p_hint4Num},
            {"wrongWord", p_wrongWord}
        };
        LogEvent("classicLevelWords", data);
    }


    /// <summary>
    /// FB登陆信息
    /// 上报条件：玩家第1次登陆FB后上传
    /// <summary>
    /// <param name="FBId">Fb的id</param>
    /// <param name="userName">FB昵称</param>
    /// <param name="userEmail">FB邮箱</param>
    public static void LogFBLoginInfo(string p_FBId, string p_userName, string p_userEmail)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"FBId", p_FBId},
            {"userName", p_userName},
            {"userEmail", p_userEmail},
        };
        LogEvent("FBLoginInfo", data);
    }


    /// <summary>
    /// 奖励获得表
    /// 上报条件：玩家获得一切道具时，实时上报
    /// <summary>
    /// <param name="levelSeq">主线关卡序数</param>
    /// <param name="userType">打NULL</param>
    /// <param name="getHint1">获得hint1数量</param>
    /// <param name="getHint2">获得hint2数量</param>
    /// <param name="getHint3">获得hint3数量</param>
    /// <param name="getHint4">获得hint4数量</param>
    /// <param name="getCoin">获得coin数量</param>
    /// <param name="getBBId">获得小人的ID</param>
    /// <param name="getSource">来源类型1充值shop,2每日挑战胜利Daily3subworld宝箱subworld4关闭商店后面板视频入口advideo5每日挑战得星阶段奖励1dailyStepReward16每日挑战得星阶段奖励2dailyStepReward27每日挑战得星阶段奖励3dailyStepReward38每日挑战得星阶段奖励4dailyStepReward49商店内激励视频inShopAd10每日n个词OneWord11每日登陆7signBox1，signBox212微博奖励WebBox13单词反馈queFeedback14FB登陆奖励fbLogin15签到激励视频奖励signAd16等级宝箱视频奖励subworldAd</param>
    /// <param name="buyItemId">购买Id</param>
    /// <param name="moneyCost">现时中金钱消耗（美元）</param>
    /// <param name="payType">购买来源：1普通计费点商城normal</param>
    /// <param name="getHint5">获得hint5数量</param>
    /// <param name="RewardABTestAB">与点RewardABTest配合，一起决定在此次AB测试中用户的AB版本，例如在4月30日开启的测试中A用户的打点为：RewardABTestAB：ARewardABTest：V200430</param>
    /// <param name="RewardABTest">关卡AB测试打点，这个点的参数将会在config文件中以字段形式存在，每当新的一轮AB测试开始时，动态读入。命名规则：V+日期。例如V200310</param>
    public static void LoggetReward(string p_levelSeq, string p_userType, string p_getHint1, string p_getHint2,
        string p_getHint3, string p_getHint4, string p_getCoin, string p_getBBId, string p_getSource,
        string p_buyItemId, string p_moneyCost, string p_payType, string p_getHint5, string p_RewardABTestAB,
        string p_RewardABTest)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"levelSeq", p_levelSeq},
            {"userType", p_userType},
            {"getHint1", p_getHint1},
            {"getHint2", p_getHint2},
            {"getHint3", p_getHint3},
            {"getHint4", p_getHint4},
            {"getCoin", p_getCoin},
            {"getBBId", p_getBBId},
            {"getSource", p_getSource},
            {"buyItemId", p_buyItemId},
            {"moneyCost", p_moneyCost},
            {"payType", p_payType},
            {"getHint5", p_getHint5},
            {"RewardABTestAB", p_RewardABTestAB},
            {"RewardABTest", p_RewardABTest}
        };
        LogEvent("getReward", data);
    }


    /// <summary>
    /// 物品消耗表
    /// 上报条件：道具发生消耗时，实时上报
    /// <summary>
    /// <param name="levelSeq">主线和每日打主线关卡序数flash打1或者2</param>
    /// <param name="levelType">游戏类型主线：Classic每日：Daily每日一词OneWord</param>
    /// <param name="userType">打NULL</param>
    /// <param name="leftCoin">消耗之后剩余金币</param>
    /// <param name="leftHint1">消耗之后剩余hint1</param>
    /// <param name="leftHint2">消耗之后剩余hint2</param>
    /// <param name="leftHint3">消耗之后剩余hint3</param>
    /// <param name="leftHint4">消耗之后剩余hint4</param>
    /// <param name="levelProgress">当前关卡进度：（完成单词数/总单词数）*100</param>
    /// <param name="userEndurance">用户忍耐度（消耗道具之前，记录划错词次数2次正确词之间次数）</param>
    /// <param name="spendType">消耗类型1coin2hint</param>
    /// <param name="spendItem">消耗物品1hint12hint23hint34hint4</param>
    /// <param name="coinQuantity">消耗数量金币数量</param>
    /// <param name="hintQuantity">消耗数量hint数量</param>
    /// <param name="leftHint5">消耗之后剩余hint5</param>
    /// <param name="RewardABTestAB">与点RewardABTest配合，一起决定在此次AB测试中用户的AB版本，例如在4月30日开启的测试中A用户的打点为：RewardABTestAB：ARewardABTest：V200430</param>
    /// <param name="RewardABTest">关卡AB测试打点，这个点的参数将会在config文件中以字段形式存在，每当新的一轮AB测试开始时，动态读入。命名规则：V+日期。例如V200310</param>
    public static void LogitemConsume(string p_levelSeq, string p_levelType, string p_userType, string p_leftCoin,
        string p_leftHint1, string p_leftHint2, string p_leftHint3, string p_leftHint4, string p_levelProgress,
        string p_userEndurance, string p_spendType, string p_spendItem, string p_coinQuantity, string p_hintQuantity,
        string p_leftHint5, string p_RewardABTestAB, string p_RewardABTest)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"levelSeq", p_levelSeq},
            {"levelType", p_levelType},
            {"userType", p_userType},
            {"leftCoin", p_leftCoin},
            {"leftHint1", p_leftHint1},
            {"leftHint2", p_leftHint2},
            {"leftHint3", p_leftHint3},
            {"leftHint4", p_leftHint4},
            {"levelProgress", p_levelProgress},
            {"userEndurance", p_userEndurance},
            {"spendType", p_spendType},
            {"spendItem", p_spendItem},
            {"coinQuantity", p_coinQuantity},
            {"hintQuantity", p_hintQuantity},
            {"leftHint5", p_leftHint5},
            {"RewardABTestAB", p_RewardABTestAB},
            {"RewardABTest", p_RewardABTest}
        };
        LogEvent("itemConsume", data);
    }


    /// <summary>
    /// 用户购买表
    /// 上报条件：玩家充值时，实时上报
    /// <summary>
    /// <param name="userTypeBefore">玩家分层支付前</param>
    /// <param name="userTypeAfter">玩家分层支付后</param>
    /// <param name="levelSeq">关卡序数</param>
    /// <param name="buyItemId">购买项</param>
    /// <param name="moneyCost">消费金额，内购id对应的美元数额</param>
    /// <param name="leftHint1"> 剩余hint1数量（付费前）</param>
    /// <param name="leftHint2"> 剩余hint2数量（付费前）</param>
    /// <param name="leftHint3"> 剩余hint3数量（付费前）</param>
    /// <param name="leftHint4"> 剩余hint4数量（付费前）</param>
    /// <param name="leftCoin">付费前金币数（付费前）</param>
    /// <param name="buyLeftHint1">付费后剩余hint1数（拿到订单为主）</param>
    /// <param name="buyLeftHint2">付费后剩余hint2数（拿到订单为主）</param>
    /// <param name="buyLeftHint3">付费后剩余hint3数（拿到订单为主）</param>
    /// <param name="buyLeftHint4">付费后剩余hint4数（拿到订单为主）</param>
    /// <param name="buyLeftCoin">付费后剩余金币数</param>
    /// <param name="installDays">付费距离安装天数（卸载重装后，玩家同步进度后，此数据需要更新）</param>
    /// <param name="payDay">付费距离上次付费天数（当天付2次天数为0拉取时间使用UTC时）</param>
    /// <param name="totalPayTimes">付费总次数</param>
    /// <param name="payType">购买来源1普通计费点商城:normal</param>
    /// <param name="orderId">订单号</param>
    public static void LoguserBuy(string p_userTypeBefore, string p_userTypeAfter, string p_levelSeq,
        string p_buyItemId, string p_moneyCost, string p_leftHint1, string p_leftHint2, string p_leftHint3,
        string p_leftHint4, string p_leftCoin, string p_buyLeftHint1, string p_buyLeftHint2, string p_buyLeftHint3,
        string p_buyLeftHint4, string p_buyLeftCoin, string p_installDays, string p_payDay, string p_totalPayTimes,
        string p_payType, string p_orderId)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"userTypeBefore", p_userTypeBefore},
            {"userTypeAfter", p_userTypeAfter},
            {"levelSeq", p_levelSeq},
            {"buyItemId", p_buyItemId},
            {"moneyCost", p_moneyCost},
            {"leftHint1", p_leftHint1},
            {"leftHint2", p_leftHint2},
            {"leftHint3", p_leftHint3},
            {"leftHint4", p_leftHint4},
            {"leftCoin", p_leftCoin},
            {"buyLeftHint1", p_buyLeftHint1},
            {"buyLeftHint2", p_buyLeftHint2},
            {"buyLeftHint3", p_buyLeftHint3},
            {"buyLeftHint4", p_buyLeftHint4},
            {"buyLeftCoin", p_buyLeftCoin},
            {"installDays", p_installDays},
            {"payDay", p_payDay},
            {"totalPayTimes", p_totalPayTimes},
            {"payType", p_payType},
            {"orderId", p_orderId}
        };
        LogEvent("userBuy", data);
    }


    /// <summary>
    /// 问题反馈打点
    /// 上报条件：玩家点击反馈时打点
    /// <summary>
    /// <param name="levelSeq">主线关卡序数</param>
    /// <param name="queId">问题Id</param>
    /// <param name="feedbackType">回馈：1：fun，0：boring</param>
    public static void LogqueFeedback(string p_levelSeq, string p_queId, string p_feedbackType)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"levelSeq", p_levelSeq},
            {"queId", p_queId},
            {"feedbackType", p_feedbackType},
        };
        LogEvent("queFeedback", data);
    }


    /// <summary>
    /// 微博喜欢打点
    /// 上报条件：打点时机：玩家点击微博界面中的like图标后打点，在玩家点击结算界面的图片时打点，在blog界面点击图片打开说明时，点击进入blog时
    /// <summary>
    /// <param name="cardId">微博Id，对于进入blog无ID传NULL</param>
    /// <param name="clickType">1：点击微博界面中的like，2：点击结算界面中的图片，3，点blog图片，4点击进入blog</param>
    public static void LogblogClick(string p_cardId, string p_clickType)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"cardId", p_cardId},
            {"clickType", p_clickType},
        };
        LogEvent("blogClick", data);
    }


    /// <summary>
    /// flashCraze过关表
    /// 上报条件：玩家通过每日N词关卡时，或者未完成退出时上报
    /// <summary>
    /// <param name="queTimeStamp">问题发布时间戳</param>
    /// <param name="queId">问题的绝对ID</param>
    /// <param name="queSeq">今天的第几个问题：1or2</param>
    /// <param name="hint1Num">本关用了几个hint1</param>
    /// <param name="hint2Num">本关用了几个hint2</param>
    /// <param name="hint3Num">本关用了几个hint3</param>
    /// <param name="hint4Num">本关用了几个hint4</param>
    /// <param name="status">0：未过关，1：过关，2：已经过关（再次进入后退出）</param>
    /// <param name="type">1正常关卡2视频关卡</param>
    /// <param name="voiceProportion">voiceProportion</param>
    public static void LogflashCrazePass(string p_queTimeStamp, string p_queId, string p_queSeq, string p_hint1Num,
        string p_hint2Num, string p_hint3Num, string p_hint4Num, string p_status, string p_type,
        string p_voiceProportion)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"queTimeStamp", p_queTimeStamp},
            {"queId", p_queId},
            {"queSeq", p_queSeq},
            {"hint1Num", p_hint1Num},
            {"hint2Num", p_hint2Num},
            {"hint3Num", p_hint3Num},
            {"hint4Num", p_hint4Num},
            {"status", p_status},
            {"type", p_type},
            {"voiceProportion", p_voiceProportion}
        };
        LogEvent("flashCrazePass", data);
    }


    /// <summary>
    /// 激励视频打点
    /// 上报条件：广告SDK展示，玩家点击视频展示时
    /// <summary>
    /// <param name="AdsLevel">点击激励视频的关卡数</param>
    /// <param name="AdsRemaincoins">点击激励视频时剩余金币</param>
    /// <param name="AdsRemainHint1">点击激励视频时剩余hint1</param>
    /// <param name="AdsRemainHint2">点击激励视频时剩余hint2</param>
    /// <param name="AdsRemainHint3">点击激励视频时剩余hint3</param>
    /// <param name="AdsRemainHint4">点击激励视频时剩余hint4</param>
    /// <param name="AdsScene">点击激励视频的场景。按照现有的枚举去做。包括0主线，1每日挑战，2每日一词3签到奖励4LEVEL宝箱奖励</param>
    /// <param name="AdsRemainHint5">点击激励视频时剩余hint4</param>
    public static void LogAdBtnClick(string p_AdsLevel, string p_AdsRemaincoins, string p_AdsRemainHint1,
        string p_AdsRemainHint2, string p_AdsRemainHint3, string p_AdsRemainHint4, string p_AdsScene,
        string p_AdsRemainHint5)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"AdsLevel", p_AdsLevel},
            {"AdsRemaincoins", p_AdsRemaincoins},
            {"AdsRemainHint1", p_AdsRemainHint1},
            {"AdsRemainHint2", p_AdsRemainHint2},
            {"AdsRemainHint3", p_AdsRemainHint3},
            {"AdsRemainHint4", p_AdsRemainHint4},
            {"AdsScene", p_AdsScene},
            {"AdsRemainHint5", p_AdsRemainHint5},
        };
        LogEvent("AdBtnClick", data);
    }


    /// <summary>
    /// 小人点击打点
    /// 上报条件：玩家在各种情况点击小人和界面时
    /// <summary>
    public static void LogFriendTouch()
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
        };
        LogEvent("FriendTouch", data);
    }


    /// <summary>
    /// 小人界面打点
    /// 上报条件：小人界面展示
    /// <summary>
    public static void LogCrazeFriendsUI()
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
        };
        LogEvent("CrazeFriendsUI", data);
    }


    /// <summary>
    /// 小人更换打点
    /// 上报条件：小人更换打点
    /// <summary>
    /// <param name="OldFriend">替换小人的原始小人ID</param>
    /// <param name="NewFriend">替换小人的新小人ID</param>
    public static void LogChangeFriend(string p_OldFriend, string p_NewFriend)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"OldFriend", p_OldFriend},
            {"NewFriend", p_NewFriend},
        };
        LogEvent("ChangeFriend", data);
    }


    /// <summary>
    /// 读条打点
    /// 上报条件：在打开游戏开始读条和结束时
    /// <summary>
    /// <param name="Step">打开APP后进入开始Loading</param>
    /// <param name="LoadingTime">完成时本次loading时长</param>
    public static void LogLoading(string p_Step, string p_LoadingTime)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"Step", p_Step},
            {"LoadingTime", p_LoadingTime},
        };
        LogEvent("Loading", data);
    }


    /// <summary>
    /// 主线关卡流程打点
    /// 上报条件：根据关卡不同阶段打点
    /// <summary>
    /// <param name="LevelSeq">关卡序数</param>
    /// <param name="Step">0点击按钮进入关卡1开始播放激励视频（如果没有激励视频则不打点）2开始输入3关卡完成</param>
    public static void LogClassicLevelStep(string p_LevelSeq, string p_Step)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"LevelSeq", p_LevelSeq},
            {"Step", p_Step}
        };
        LogEvent("ClassicLevelStep", data);
    }


    public static void LogAFBackInfo(string channel,string compaign,string compaingnid,string adgroup,string adgroupid,string mediasource,string afchannel)
    {
        Dictionary<string, string> data = new Dictionary<string, string>()
        {
            {"channel", channel},
            {"compaign", compaign},
            {"compaingnid", compaingnid},
            {"adgroup", adgroup},
            {"adgroupid", adgroupid},
            {"mediasource", mediasource},
            {"afchannel", afchannel},
        };
        LogEvent("UserAFSource", data);
    }
}