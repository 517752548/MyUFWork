using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;
using UnityEditor;
using NPOI.SS.UserModel;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using ExcelConverter.Excel.Editor;
using NPOI.SS.Formula.Functions;
using UnityEditor;
using UnityEngine;
using Debug = UnityEngine.Debug;
using ExcelReader = BettaFramework.ExcelReader;

public class AnalyticsGenerator : EditorWindow
{
    const string inputXlsPath = "/WordCody/数据打点.xls";
    const string outputPath = "/Scripts_Game/Analyze/GameAnalyze.cs";
    const string eventNamePath = "/Scripts_Game/Analyze/AnalyzeEventNames.cs";
    const string templatePath = "/UnityFrameWork/ThirdParty/AnlyscEditor/GameAnalyzeTemplate.txt";
    private ExcelReader m_ExcelReader;
    private string m_ExcelClassPath;
    private string paramsFormat = "p_{0}";
    private string funFormat = "Log{0}";
    private string TABLE_NAME = "表名";
    private string CONDITION = "上报条件";
    private string PARAMS = "参数";
    private string COMMONT = "备注";
    private string TYPE_NAME = "字段类型";


    private string commonInfoFormat = "m_{0}";

    [MenuItem("Framework/Generate GameAnalyzeService.cs")]
    public static void Show()
    {
        AnalyticsGenerator window = GetWindow<AnalyticsGenerator>();
        ((EditorWindow) window).Show();
    }

    private void OnEnable()
    {
        m_ExcelClassPath = Application.dataPath + inputXlsPath;
        m_ExcelReader = new ExcelReader();
    }

    private void OnGUI()
    {
        if (GUILayout.Button("点击生成埋点类"))
        {
            string templateConternt = "";
            string content = "";
            string path = Application.dataPath + templatePath;
            if (!File.Exists(path))
            {
                EditorUtility.DisplayDialog("信息", "样板代码未找到!", "OK");
                return;
            }

            content = File.ReadAllText(path);
            Dictionary<string, List<List<ICell>>> sheets = m_ExcelReader.Load(m_ExcelClassPath);
            List<ICell> row;
            List<List<ICell>> position;
            StringBuilder builder = new StringBuilder();
            foreach (var sheet in sheets)
            {
                if (sheet.Key != "打点")
                {
                    continue;
                }

                Debug.Log(sheet.Key);
                position = new List<List<ICell>>(1);
                for (int i = 0; i < sheet.Value.Count; i++)
                {
                    row = sheet.Value[i];
                    //判断是否为打点表
                    for (int j = 0; j < row.Count; j++)
                    {
                        if (IsPositionPart(row[j]))
                        {
                            position.Add(row);
                            break;
                        }
                    }

                    if (position.Count == 5)
                    {
                        builder.Append(GetLogPositiontDef(position));
                        position.Clear();
                    }
                }
            }

            string main = builder.ToString();
            builder.Clear();
            AddAutoGenerateInfo(builder);
            builder.Append("\n\n");
            content = content.Replace("<|||>0<|||>", main);
            builder.Append(content);
            string final = builder.ToString();
            string finalPath = Application.dataPath + outputPath;
            if (File.Exists(finalPath))
            {
                File.Delete(finalPath);
            }

            File.WriteAllText(finalPath, final);
            //到处所有的事件名称const
            ExportEventNames();
            AssetDatabase.Refresh();
        }
    }


    void AddAutoGenerateInfo(StringBuilder builder)
    {
        builder.AppendFormat(@"// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the FrameWork Editor.
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
//  Build Time：{0}
// ------------------------------------------------------------------------------",
            System.DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt"));
    }

    private Dictionary<string, string> eventNamesDesMap = new Dictionary<string, string>();

    string GetLogPositiontDef(List<List<ICell>> datas)
    {
        StringBuilder builder = new StringBuilder();
        string oldName = GetOldFunName(datas[0]);
        if (!eventNamesDesMap.ContainsKey(oldName))
        {
            eventNamesDesMap.Add(oldName, "");
        }

        string funName = string.Format(funFormat, oldName);
        string summary = GetSummary(GetFunSummary(datas[0]), GetFunCondition(datas[1]));
        builder.Append(summary);
        eventNamesDesMap[oldName] = summary;
        List<ICell> paramsName = new List<ICell>(datas[2]);
        for (int i = 0; i < paramsName.Count; i++)
        {
            if (paramsName[i] == null || string.IsNullOrEmpty(paramsName[i].StringCellValue) ||
                paramsName[i].StringCellValue.StartsWith(PARAMS))
            {
                if (paramsName[i] != null && !string.IsNullOrEmpty(paramsName[i].StringCellValue) &&
                    paramsName[i].StringCellValue.StartsWith(PARAMS))
                {
                    paramsName.RemoveAt(i);
                    break;
                }

                paramsName.RemoveAt(i);
                i--;
            }
        }

        List<ICell> desc = new List<ICell>(datas[3]);
        for (int i = 0; i < desc.Count; i++)
        {
            if (desc[i] == null || string.IsNullOrEmpty(desc[i].StringCellValue) ||
                desc[i].StringCellValue.StartsWith(COMMONT))
            {
                if (desc[i] != null && !string.IsNullOrEmpty(desc[i].StringCellValue) &&
                    desc[i].StringCellValue.StartsWith(COMMONT))
                {
                    desc.RemoveAt(i);
                    break;
                }

                desc.RemoveAt(i);
                i--;
            }
        }

        builder.Append(GetSummaryParams(paramsName, desc));
        string setValue = GetSetValueSection(paramsName);
        string container = GetContainer(funName, oldName, GetParamsList(paramsName), setValue);
        builder.Append(container);
        builder.Append("\n\n\n");
        return builder.ToString();
    }

    void ExportEventNames()
    {
        StringBuilder builder = new StringBuilder();
        AddAutoGenerateInfo(builder);
        builder.Append("\npublic class AnalyzeEventNames\n{\n");
        foreach (var eventName in eventNamesDesMap)
        {
            builder.Append(eventName.Value);
            builder.AppendFormat("\tpublic const string {0} = \"{1}\";\n\n", eventName.Key, eventName.Key);
        }

        builder.Append("}\n");
        File.WriteAllText(Application.dataPath + eventNamePath, builder.ToString());
    }

    string GetOldFunName(List<ICell> row)
    {
        for (int i = 0; i < row.Count; i++)
        {
            if (row[i] == null)
            {
                continue;
            }

            if (row[i].StringCellValue.StartsWith(TABLE_NAME))
            {
                return row[i + 2].StringCellValue;
            }
        }

        return "";
    }

    string GetFunSummary(List<ICell> row)
    {
        for (int i = 0; i < row.Count; i++)
        {
            if (row[i] == null)
            {
                continue;
            }

            if (row[i].StringCellValue.StartsWith(TABLE_NAME))
            {
                return row[i + 1].StringCellValue;
            }
        }

        return "";
    }

    string GetFunCondition(List<ICell> row)
    {
        for (int i = 0; i < row.Count; i++)
        {
            if (row[i] == null)
            {
                continue;
            }

            if (row[i].StringCellValue.StartsWith(CONDITION))
            {
                return row[i + 1].StringCellValue;
            }
        }

        return "";
    }

    bool IsPositionPart(ICell cell)
    {
        if (cell == null || string.IsNullOrEmpty(cell.StringCellValue))
        {
            return false;
        }

        return cell.StringCellValue.StartsWith(TABLE_NAME) || cell.StringCellValue.StartsWith(CONDITION) ||
               cell.StringCellValue.StartsWith(PARAMS) || cell.StringCellValue.StartsWith(COMMONT) ||
               cell.StringCellValue.StartsWith(TYPE_NAME);
    }

    public string GenerateDictionMethod(List<ICell>[] source)
    {
        StringBuilder builder = new StringBuilder();

        return builder.ToString();
    }

    string GetSummary(string summary, string condition)
    {
        if (summary == null)
        {
            return "";
        }

        StringBuilder builder = new StringBuilder();
        builder.Append("\t/// <summary>\n");
        builder.AppendFormat("\t/// {0}\n", summary);
        builder.AppendFormat("\t/// 上报条件：{0}\n", condition);
        builder.Append("\t/// <summary>\n");
        return builder.ToString();
    }

    string GetSummaryParams(List<ICell> paramNames, List<ICell> desc)
    {
        if (paramNames == null)
        {
            return "";
        }

        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < paramNames.Count; i++)
        {
            if (paramNames[i] == null || string.IsNullOrEmpty(paramNames[i].StringCellValue))
            {
                continue;
            }

            string par = paramNames[i].StringCellValue;
            if (string.IsNullOrEmpty(par.Trim()))
            {
                continue;
            }

            string descip = i < desc.Count && desc[i] != null
                ? desc[i].StringCellValue.Trim('\n', '\t', ' ', '\r')
                : "";
            descip = descip.Replace("\n", "");
            descip = descip.Replace(" ", "");
            builder.AppendFormat("\t/// <param name=\"{0}\">{1}</param>\n", paramNames[i].StringCellValue, descip);
        }

        return builder.ToString();
    }

    string GetParamsList(List<ICell> cells)
    {
        if (cells == null)
        {
            return null;
        }

        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < cells.Count; i++)
        {
            if (cells[i] == null || string.IsNullOrEmpty(cells[i].StringCellValue))
            {
                if (i == cells.Count - 1)
                {
                    if(builder.Length > 0)
                    builder.Remove(builder.Length - 1, 1);
                }

                continue;
            }

            string para = cells[i].StringCellValue.Trim();
            para = para.Replace(" ", "");
            para = para.Replace("\n", "");

            builder.AppendFormat("string {0}", string.Format(paramsFormat, para));

            if (i != cells.Count - 1)
            {
                builder.Append(",");
            }
        }

        return builder.ToString();
    }

    string GetContainer(string funcName, string oldFuncNam, string param, string setValue)
    {
        StringBuilder builder = new StringBuilder();
        if (string.IsNullOrEmpty(funcName))
        {
            return null;
        }

        AppendIntent(builder, 1);
        builder.AppendFormat("public static void {0}({1})\n", funcName, param);
        AppendIntent(builder, 1);
        builder.Append("{\n");
        AppendIntent(builder, 2);
        builder.Append("Dictionary<string, string> data = new Dictionary<string, string>()\n");
        AppendIntent(builder, 2);
        builder.Append("{\n");
        AppendIntent(builder, 0);
        builder.Append(setValue);
        AppendIntent(builder, 2);
        builder.Append("};\n");
        AppendIntent(builder, 2);
        builder.AppendFormat("LogEvent(\"{0}\" , data);\n", oldFuncNam);
        AppendIntent(builder, 1);
        builder.Append("}\n");
        return builder.ToString();
    }

    string GetSetValueSection(List<ICell> parames)
    {
        if (parames == null)
        {
            return null;
        }

        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < parames.Count; i++)
        {
            if (parames[i] == null || string.IsNullOrEmpty(parames[i].StringCellValue))
            {
                continue;
            }

            AppendIntent(builder, 3);
            string para = parames[i].StringCellValue.Trim();
            para = para.Replace(" ", "");
            para = para.Replace("\n", "");
            builder.Append("{ ");
            builder.AppendFormat("\"{0}\" , {1}", para, string.Format(paramsFormat, para));
            builder.Append(" }");
            if (i != parames.Count - 1)
            {
                builder.Append(",\n");
            }
            else
            {
                builder.Append("\n");
            }
        }

        return builder.ToString();
    }

    void AppendIntent(StringBuilder builder, int num)
    {
        for (int i = 0; i < num; i++)
        {
            builder.Append("\t");
        }
    }
}